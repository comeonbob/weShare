<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>如何使用ab做接口压力测试</title>
      <link href="/ab-test/"/>
      <url>/ab-test/</url>
      <content type="html"><![CDATA[<p><strong>文章概要</strong></p><ul><li>什么是压力测试</li><li>如何实现压力测试</li><li>测试案例</li><li>测试中可能遇到的错误</li><li>参考链接</li></ul><h3 id="一、什么是压力测试"><a href="#一、什么是压力测试" class="headerlink" title="一、什么是压力测试"></a>一、什么是压力测试</h3><blockquote><p>压力测试是通过不断向被测系统施加“压力”，测试系统在压力情况下的性能表现，考察当前软硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在，也就是我们可以模拟巨大的工作负荷以查看应用程序在峰值使用情况下如何执行操作。</p></blockquote><p><strong>压力/负载/性能测试之间的区别</strong></p><p>压力测试（StressTesting），也称为强度测试，通过模拟实际应用的软硬件环境及用户使用过程的系统负荷，长时间或超大负荷地运行测试软件，来测试被测系统的性能、可靠性、稳定性等。压力测试需要确定一个系统的瓶颈或者不能接收的性能点，来获得系统能提供的最大的服务级别。通俗地讲，压力测试是为了发现在什么条件下您的应用程序的性能会变得不可接受。</p><p>负载测试（Load Testing）通常被定义为给被测系统加上它所能操作的最大任务数的过程，负载测试有时也会被称为“容量测试”或者“耐久性测试/持久性测试”，其目标是确定并确保系统在超出最大预期工作量的情况下仍能正常运行。对于WEB应用来讲，负载则是并发用户或者HTTP连接的数量。负载测试通过测试系统在资源超负荷情况下的表现，以发现设计上的错误或验证系统的负载能力。在这种测试中，将使测试对象承担不同的工作量，以评测和评估测试对象在不同工作量条件下的性能行为，以及持续正常运行的能力。</p><p>性能测试（PerformanceTesting）的目的不是去找系统Bugs，而是排除系统的性能瓶颈，并为回归测试建立一个基准。而性能测试的操作，实际上就是一个非常小心受控的测量分析过程：“运行负载试验-&gt;测度性能-&gt;调试系统”。在理想的情况下，被测应用在这个时候已经是足够稳定，所以这个过程得以顺利进行。性能测试还有另一个目标就是建立一组被测系统的基准数据。应用在网络上的性能测试重点是利用成熟先进的自动化技术进行网络应用性能监控、网络应用性能分析和网络预测。</p><p>虽然三种测试的目的截然不同，但其测试操作的环节都是基本一致的，因此一次测试过程中完全可以包含性能测试、负载测试、压力测试三个方面的内容，所使用的测试工具往往大同小异。</p><h3 id="二、如何实现压力测试"><a href="#二、如何实现压力测试" class="headerlink" title="二、如何实现压力测试"></a>二、如何实现压力测试</h3><p>压力测试需要对应的工具支持，测试工具有很多，详见链接：<br><a href="https://blog.csdn.net/u012942982/article/details/55251930/" target="_blank" rel="noopener">压力测试工具</a></p><p>今天， 我们的主题是用ab工具来完成压力测试。</p><h4 id="2-1-安装-ab"><a href="#2-1-安装-ab" class="headerlink" title="2.1 安装 ab"></a>2.1 安装 ab</h4><p>(1) Windows 环境安装ab<br><a href="https://blog.csdn.net/foreverling_ling/article/details/81667857" target="_blank" rel="noopener">https://blog.csdn.net/foreverling_ling/article/details/81667857</a></p><p>(2) Linux 环境安装ab</p><p><code>yum -y install httpd-tools</code></p><p>(3) 安装成功后，检查版本号</p><p><code>ab -V</code></p><h4 id="2-2-使用ab"><a href="#2-2-使用ab" class="headerlink" title="2.2 使用ab"></a>2.2 使用ab</h4><p><code>ab -n 1000 -c 10 www.baidu.com/</code></p><p>-n 表示请求总数， -c 表示并发数， 后面跟上需要测试的接口</p><p>更多详细参数，请参考：<br><a href="https://blog.csdn.net/wang404838334/article/details/78458828" target="_blank" rel="noopener">https://blog.csdn.net/wang404838334/article/details/78458828</a></p><h3 id="三、测试案例"><a href="#三、测试案例" class="headerlink" title="三、测试案例"></a>三、测试案例</h3><p>实际项目中使用ab，根据场景不同，使用方法有差别，也会碰到各种错误信息。<br>接下来我们选取了GET, POST分别做压力测试，介绍了如何携带cookie, 如何发送请求体等。</p><h4 id="（1）测试GET-接口，需要cookie"><a href="#（1）测试GET-接口，需要cookie" class="headerlink" title="（1）测试GET 接口，需要cookie"></a>（1）测试GET 接口，需要cookie</h4><p><code>ab -n 5000 -c 500 -C uin=7000000；session=99999999 url</code></p><p>其中 -C代表请求携带的cookie信息；若有多个cookie， windows上用分号分割， linux用逗号分割。</p><p><strong>测试结果</strong><br><img src="/img/ab/get.png" alt="需要cookie的GET接口压力测试"></p><p><strong>分析</strong></p><ul><li>3k请求，300并发，总耗时50.93s, 每个耗时16.97ms， qps 58.9， 性能一般。</li><li>我们可以修改请求数量，并发数量，查看系统运行状况，响应时间来判断接口性能瓶颈。</li></ul><h4 id="（2）测试POST接口，需要JSON格式请求体"><a href="#（2）测试POST接口，需要JSON格式请求体" class="headerlink" title="（2）测试POST接口，需要JSON格式请求体"></a>（2）测试POST接口，需要JSON格式请求体</h4><p><code>ab -n 5000 -c 300 -p post.txt -T &#39;application/json&#39; url</code></p><p>其中，-p 表示需要携带的请求体，一般是.txt格式文件，文件内容如下：<br><code>{&quot;toBank&quot;:&quot;123456&quot;}</code>; -T 表示请求体格式，一般为’application/json’</p><p><strong>测试结果</strong></p><p>（1） windows 报错，初步判断ab在windows上不支持post 接口。</p><p>错误内容如下：<br><code>ab：Counld not stat POST data file (post.txt): Partial results are valid but processing is incomplete</code></p><p>（2）linux 上运行成功</p><p><img src="/img/ab/post.png" alt="POST接口压力测试"></p><p><strong>分析</strong></p><ul><li><p>5k 请求，300并发，总耗时6.75s，平均每个请求耗时1.35ms，qps 740.7，性能良好。</p></li><li><p>同理，我们可以修改并发数，请求数来测试接口性能 ，需要注意的一般数据库写的操作并发数相对较低。</p></li></ul><h3 id="四、测试中可能遇到的错误"><a href="#四、测试中可能遇到的错误" class="headerlink" title="四、测试中可能遇到的错误"></a>四、测试中可能遇到的错误</h3><p>(1) Windows 环境测试post接口报错</p><p>错误消息： </p><p><code>Counld not stat POST data file (post.txt): Partial results are valid but processing is incomplete</code></p><p>错误原因： windows环境暂不支持用ab来测试post接口</p><p>解决方法： 使用linux环境，测试post请求一切正常，请求体支持application/json格式</p><p>(2) Linux 环境并发数1500以上，运行报错</p><p>错误消息： <code>socket：Too many open files (24)</code></p><p>错误原因： 进程打开了超过系统限制的文件数量以及通讯链接数，默认值是1024，使用ulimit -n 就可以查看。</p><p>解决方法： 设置较大的系统最大文件数量值，如： ulimit -n 2048</p><p>参考链接： <a href="https://blog.csdn.net/roy_70/article/details/78423880" target="_blank" rel="noopener">too many open files(打开的文件过多)解决方法</a></p><p>(3) Linux 环境并发数3000，运行报错</p><p>错误消息：  <code>Connection timed out (110)</code></p><p>错误原因：  连接超时</p><p>解决方法： 接口服务系统支持有限，不支持这么多并发，优化系统</p><h3 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h3><ul><li><a href="https://blog.csdn.net/wang404838334/article/details/78458828" target="_blank" rel="noopener">ab命令做压测测试</a></li><li><a href="https://www.cnblogs.com/shenshangzz/p/8340640.html" target="_blank" rel="noopener">使用ab 进行并发压力测试</a></li><li><a href="https://www.cnblogs.com/zhengah/p/4334314.html" target="_blank" rel="noopener">ab,qps,服务器性能压力</a></li><li><a href="https://blog.csdn.net/roy_70/article/details/78423880" target="_blank" rel="noopener">too many open files(打开的文件过多)解决方法</a></li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript单元测试及接口测试</title>
      <link href="/Javascript-unit-test/"/>
      <url>/Javascript-unit-test/</url>
      <content type="html"><![CDATA[<p><strong>文章概要</strong></p><ul><li>什么是单元测试</li><li>为什么要做单元测试</li><li>javascript测试框架对比</li><li>koa2中如何使用AVA做单元测试</li><li>vue2中如何使用AVA做单元测试</li><li>koa2中如何使用AVA做接口测试</li></ul><h3 id="单元测试是什么"><a href="#单元测试是什么" class="headerlink" title="单元测试是什么"></a>单元测试是什么</h3><p>单元测试（unit testing）指的是以软件的单元（unit）为单位，对软件进行测试。单元可以是一个函数，也可以是一个模块或组件。它的基本特征就是，只要输入不变，必定返回同样的输出。</p><p>单元测试应该避免依赖性问题，比如不存取数据库、不访问网络等等，而是使用工具虚拟出运行环境。这种虚拟使得测试成本最小化，不用花大力气搭建各种测试环境。</p><p>一般来说，单元测试的步骤如下。</p><ol><li>准备所有的测试条件</li><li>调用（触发）所要测试的函数</li><li>验证运行结果是否正确</li><li>还原被修改的记录</li></ol><h3 id="为什么要做单元测试"><a href="#为什么要做单元测试" class="headerlink" title="为什么要做单元测试"></a>为什么要做单元测试</h3><p>Web应用程序越来越复杂，这意味着有更多的可能出错。测试是帮助我们提高代码质量、降低错误的最好方法和工具之一。</p><ul><li>测试可以确保得到预期结果</li><li>加快开发速度</li><li>方便维护</li><li>提供用法的文档</li></ul><p>通过测试提供软件的质量，在开始的时候，可能会降低开发速度。但是从长期看，尤其是那种代码需要长期维护、不断开发的情况，测试会大大加快开发速度，减轻维护难度。</p><h3 id="javascript测试框架对比"><a href="#javascript测试框架对比" class="headerlink" title="javascript测试框架对比"></a>javascript测试框架对比</h3><ul><li><p><a href="https://github.com/mochajs/mocha" target="_blank" rel="noopener">Mocha</a><br>Star: 16.3k<br>使用最多，社区成熟，需要较多配置</p></li><li><p><a href="https://github.com/jasmine/jasmine" target="_blank" rel="noopener">Jasmine</a><br>Star: 13.9k<br>开箱即用(支持断言和仿真)，全局环境，比较‘老’，坑基本都有人踩过</p></li><li><p><a href="https://github.com/substack/tape" target="_blank" rel="noopener">Tape</a><br>Star: 4.8k<br>体积最小，只提供最关键的东西</p></li><li><p><a href="https://github.com/facebook/jest" target="_blank" rel="noopener">Jest</a><br>Star: 20.7k<br>facebook 坐庄，开箱即用配置少，API简单；较新，社区不十分成熟</p></li><li><p><a href="https://github.com/avajs/ava" target="_blank" rel="noopener">AVA</a><br>Star: 14.8k<br>异步，性能好；简约，清晰；快照测试和断言需要三方支持</p></li></ul><p>总结一下，Mocha 用的人最多，社区最成熟，灵活，可配置性强易拓展，Jest 开箱即用，里边啥都有提供全面的方案，Tape 最精简，提供最基础的东西最底层的API。而我们选择了AVA， 支持异步，性能好，也有较多的人使用。</p><h3 id="koa2中如何使用AVA做单元测试"><a href="#koa2中如何使用AVA做单元测试" class="headerlink" title="koa2中如何使用AVA做单元测试"></a>koa2中如何使用AVA做单元测试</h3><p><strong>一、简单3步骤</strong></p><ol><li><p>安装AVA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --global ava</span><br><span class="line">ava --init</span><br></pre></td></tr></table></figure></li><li><p>创建测试文件<br>在项目工程目录下创建test文件夹，在该文件夹下创建test.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span>;</span><br><span class="line">test(<span class="string">'foo'</span>, t =&gt; &#123;</span><br><span class="line">   t.pass();</span><br><span class="line">&#125;);</span><br><span class="line">test(<span class="string">'bar'</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">   <span class="keyword">const</span> bar = <span class="built_in">Promise</span>.resolve(<span class="string">'bar'</span>);</span><br><span class="line">    t.is(<span class="keyword">await</span> bar, <span class="string">'bar'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>运行<br><code>npm run test --verbose --watch</code><br>其中 –verbose表示详细输出； –watch其中观察模式</p></li></ol><p>二、实际项目需要注意事项</p><ol><li><p>package json中可以配置单元测试命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">   <span class="string">"test"</span>: <span class="string">"ava --verbose"</span>,  <span class="comment">// 单次运行</span></span><br><span class="line">   <span class="string">"wtest"</span>: <span class="string">"ava --verbose --watch"</span>  <span class="comment">// 监听运行</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>目录结构<br>源码目录与测试目录一一对应，如下：</p></li></ol><ul><li>src<ul><li>service<ul><li>tools.js</li></ul></li></ul><ul><li>test<ul><li>service<ul><li>tools.test.js</li></ul></li></ul></li></ul></li></ul><ol start="3"><li><p>单元测试示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* @Desc:   工具函数单元测试</span></span><br><span class="line"><span class="comment">* @Author: Bob</span></span><br><span class="line"><span class="comment">* @Date:   2018-09-12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span></span><br><span class="line"><span class="keyword">import</span> tools <span class="keyword">from</span> <span class="string">'../../service/tools'</span></span><br><span class="line"><span class="comment">/** 获取指定位数的随机数字符串 */</span></span><br><span class="line">test(<span class="string">'getRandom'</span>, t =&gt; &#123;</span><br><span class="line"><span class="comment">// 自然数</span></span><br><span class="line"><span class="keyword">let</span> result = tools.getRandom(<span class="number">6</span>);</span><br><span class="line">t.is(result.length, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1000位</span></span><br><span class="line">result = tools.getRandom(<span class="number">1000</span>);</span><br><span class="line">t.is(result.length, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数</span></span><br><span class="line">result = tools.getRandom(<span class="number">6.8</span>);</span><br><span class="line">t.is(result.length, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 负数</span></span><br><span class="line">result = tools.getRandom(<span class="number">-6.8</span>);</span><br><span class="line">t.is(result.length, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">result = tools.getRandom(<span class="string">'abc'</span>);</span><br><span class="line">t.is(result.length, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">result = tools.getRandom(<span class="literal">null</span>);</span><br><span class="line">t.is(result.length, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line">result = tools.getRandom(<span class="literal">undefined</span>);</span><br><span class="line">t.is(result.length, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p></li></ol><ul><li>结果是否正确 </li><li>是否所有的边界条件都是正确的</li><li>检查反向关联 </li><li>强制产生错误条件</li><li>性能特性</li></ul><ol start="5"><li>测试API<br>AVA 提供的API比较简洁，清晰，详见<a href="https://github.com/avajs/ava-docs/blob/master/zh_CN/readme.md" target="_blank" rel="noopener">官方文档</a></li></ol><h3 id="vue2中如何使用AVA做单元测试"><a href="#vue2中如何使用AVA做单元测试" class="headerlink" title="vue2中如何使用AVA做单元测试"></a>vue2中如何使用AVA做单元测试</h3><p>前端使用AVA做单元测试操作步骤同上，编译时可能会遇到几个错误。</p><ul><li>es6 语法不支持，import等关键词不支持</li><li>有包含css文件编译报错</li><li>有包含@相对路径报错</li></ul><p>解决方法：<br>前面两项可以通过在package.json 中增加配置文件，并且要把babel配置中module: false 去掉, 这个bug 花了很多时间才解决，github上有<a href="https://github.com/avajs/ava/issues/1640" target="_blank" rel="noopener">issue</a>。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ava"</span>: &#123;</span><br><span class="line">  <span class="string">"files"</span>: [</span><br><span class="line">    <span class="string">"test/**/**.test.js"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"babel"</span>: <span class="string">"inherit"</span>,</span><br><span class="line">  <span class="string">"require"</span>: [</span><br><span class="line">    <span class="string">"babel-core/register"</span>,</span><br><span class="line">    <span class="string">"babel-polyfill"</span>,</span><br><span class="line">    <span class="string">"ignore-styles"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>第三个可能问题， 需要修改下测试文件，把@相对路径，修改成../../这种模式即可。</p><p>另外， 前端只做了公共函数的单元测试， 接口测试放在后端做，单文件组件测试ava没有很好的支持。</p><h3 id="koa2中如何使用AVA做接口测试"><a href="#koa2中如何使用AVA做接口测试" class="headerlink" title="koa2中如何使用AVA做接口测试"></a>koa2中如何使用AVA做接口测试</h3><ul><li>接口测试，指的是对koa2 中routes的api服务测试，每个接口对应一个测试用例。</li><li>接口测试，能够保持api的服务稳定， 便于后续代码维护，减少耦合问题。</li><li>接口测试，使用mock数据发送请求，调用正常服务，测试完需要还原数据。</li><li>接口测试，与业务逻辑关联，构造mock数据，构造cookie，请求执行顺序是几个难点。</li><li>supertest可以很好的在koa2中支持接口测试。</li></ul><p><strong>接口测试示例</strong></p><ul><li><p>在前面单元测试的基础上，安装supertest<br><code>npm install supertest --save-dev</code></p></li><li><p>创建接口测试文件， test/routes/api.test.js</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Desc:   路由单元测试</span></span><br><span class="line"><span class="comment"> * @Author: Bob</span></span><br><span class="line"><span class="comment"> * @Date:   2018-09-12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">'supertest'</span></span><br><span class="line"><span class="keyword">import</span> app <span class="keyword">from</span> <span class="string">'../../app.js'</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 测试接口</span></span><br><span class="line">   test.cb(<span class="string">`GET v1/demo/status`</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">request(app)</span><br><span class="line">.get(<span class="string">`v1/demo/status`</span>)</span><br><span class="line">.expect(<span class="string">'Content-Type'</span>, /json/)</span><br><span class="line">.end(<span class="function">(<span class="params">err, res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (err)  <span class="built_in">console</span>.log(err);</span><br><span class="line">t.is(<span class="keyword">typeof</span> res.body, <span class="string">'object'</span>);</span><br><span class="line">t.is(res.body.code, <span class="number">0</span>);</span><br><span class="line">t.end();</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>app.js 中需要导出服务句柄， 很容易配合supertest使用</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> koaBody = <span class="built_in">require</span>(<span class="string">'koa-body'</span>);</span><br><span class="line"><span class="keyword">const</span> cors = <span class="built_in">require</span>(<span class="string">'@koa/cors'</span>);</span><br><span class="line"><span class="keyword">const</span> config = <span class="built_in">require</span>(<span class="string">'./config/base'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跨域</span></span><br><span class="line">app.use(cors( config.corsOption ));</span><br><span class="line"></span><br><span class="line">app.use(koaBody());</span><br><span class="line">app.use(router.routes());</span><br><span class="line">app.use(router.allowedMethods());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = app.listen(config.port, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`app is listening on <span class="subst">$&#123;config.port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = server;</span><br></pre></td></tr></table></figure></li><li><p>接口源文件./routes/index</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"><span class="comment">/** 测试接口 */</span></span><br><span class="line">router.get(<span class="string">'/v1/demo/status'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> rst = <span class="keyword">await</span> getData();</span><br><span class="line">ctx.response.body = &#123; <span class="attr">code</span>:  <span class="number">0</span>, <span class="attr">data</span>: rst &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure></li><li><p>若有些接口需要cookie, 可以放在前置钩子函数中; 数据还原，放在后置钩子函数中</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 测试前置钩子函数, 初始化cookie等 */</span></span><br><span class="line">test.before(<span class="string">'before'</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line">   <span class="keyword">await</span> login();</span><br><span class="line">   setCookie();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 测试后置钩子函数, 数据还原等 */</span></span><br><span class="line">test.after(<span class="string">'after'</span>, <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line"><span class="keyword">await</span> removeSome();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>接口性能测试，模拟同时发送1000个请求，可以查看耗时，数据库连接性能等问题。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test(<span class="string">'GET /v1/demo/company'</span>,  <span class="keyword">async</span> t =&gt; &#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">let</span> statrt_time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="keyword">let</span> pAll = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">pAll.push(request(app).get(<span class="string">'v1/demo/company'</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(pAll);</span><br><span class="line"><span class="keyword">let</span> end_time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`response time: <span class="subst">$&#123;end_time - start_time&#125;</span>ms`</span>);</span><br><span class="line">t.is(data.length, count);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>参考文章</strong></p><ul><li><a href="http://javascript.ruanyifeng.com/tool/testing.html" target="_blank" rel="noopener">JavaScript 程序测试 阮一峰</a></li><li><a href="https://www.colabug.com/2659042.html" target="_blank" rel="noopener">JavaScript 测试框架对比</a></li><li><a href="https://www.cnblogs.com/lihuanqing/p/8533552.html" target="_blank" rel="noopener">前端测试框架对比</a></li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hybrid简单了解</title>
      <link href="/hybrid-jian-dan-liao-jie/"/>
      <url>/hybrid-jian-dan-liao-jie/</url>
      <content type="html"><![CDATA[<p>文章概要：</p><ol><li>hybrid 基本概念</li><li>前端和客户端的交互</li><li>前端和客户端的交互实现</li><li>前端交互实现关注点</li><li>小结</li></ol><h2 id="⒈hybrid-基本概念"><a href="#⒈hybrid-基本概念" class="headerlink" title="⒈hybrid 基本概念"></a>⒈hybrid 基本概念</h2><h3 id="1-1什么是hybrid？"><a href="#1-1什么是hybrid？" class="headerlink" title="1.1什么是hybrid？"></a>1.1<strong>什么是hybrid？</strong></h3><p>hybrid即“混合”，前端和客户端的混合开发模式，某些环节也可能涉及到 server 端。 hybrid 底层依赖于Native提供的容器<strong>（WebView）</strong>，上层使用html&amp;css&amp;JS做业务开发。</p><h3 id="1-2webview是什么？"><a href="#1-2webview是什么？" class="headerlink" title="1.2webview是什么？"></a><strong>1.2webview是什么？</strong></h3><p>app中的一个组件，类似于小型浏览器内核。native提供的容器盒子，用于加载h5页面。</p><p><img src="/img/hybrid/912961-20180926194838986-385510462.png" alt=""></p><p>图中表示了两种h5页面资源运用的方式</p><p><strong>①以静态资源打包到app内的方式。</strong>    </p><p>前端将代码提供给native，native客户端拿到前端静态页面，以文件形式存储在 app 中。这种模式，如果前端静态页面需要更新，客户端就需要去server端下载静态资源压缩包，即客户端每次打开需要去线上检查有无更新包，如有就下载压缩包，解压更新静态资源。　</p><p>优点：因为资源在本地，通过file 协议读取，读取速度非常快，且可以做到断网模式下页面合理的展示。</p><ul><li>这样就涉及到了一个server端静态资源包管理系统。</li><li>同时H5的资源是静态的存储在native本地，以file的方式读取，那么H5向远端发起的请求就存在跨域，所以H5的请求需要经过native做一层代理转发。</li><li><p>静态资源越多native包就越大（所以这种模式更适用于，产品功能稳定，体验要求又高，且迭代频繁的场景）。</p><p><strong>②以线上url方式（更偏H5）</strong>　</p></li></ul><p>将资源部署在线上，native打开一个新的webview请求线上资源展示（同在浏览器中输入url,查看页面过程一致）</p><p>优点：按需加载，用户使用到的页面才会更新，发请求可以不经过native做代理。</p><ul><li>不可避免请求线上资源，需要时间，所以会出现瞬间白屏（弱网模式特别明显）。</li><li>断网模式下没有内容显示。</li></ul><p><strong>③两种模式资源加载</strong>　</p><p>本地读取：通过file协议</p><p><img src="/img/hybrid/download1.png" alt=""></p><p> 线上读取： 通过http或https协议</p><p><img src="/img/hybrid/download.png" alt=""></p><h3 id="1-3hybrid存在的意义？"><a href="#1-3hybrid存在的意义？" class="headerlink" title="1.3hybrid存在的意义？"></a>1.3hybrid存在的意义？</h3><p>可以快速迭代开发更新。（无需app审核，哈哈因为对手机的操作权限不高？，相对于app）</p><p>hybrid开发效率高，低成本，跨平台，ios和安卓共用一套h5代码。</p><p>hybrid从业务开发上讲，没有版本问题，有BUG能及时修复。</p><h2 id="2-前端和客户端的通讯"><a href="#2-前端和客户端的通讯" class="headerlink" title="2.前端和客户端的通讯"></a>2.前端和客户端的通讯</h2><p>native提供的容器盒子，用于加载h5页面，那么h5的页面要怎么跟native交互？</p><p>前端和客户端的交互大概描述：</p><ul><li>JS访问客户端的能力，传递参数和回调函数。</li><li>客户端通过回调函数返回内容。</li></ul><p><strong>前端</strong>的页面跟native交互，是通过<strong>schema</strong>协议。（事实上Native能捕捉webview发出的一切请求，这个协议的意义在于可以在浏览器中直接打开APP）</p><h3 id="2-1什么是schema协议？"><a href="#2-1什么是schema协议？" class="headerlink" title="2.1什么是schema协议？"></a><strong>2.1什么是schema协议？</strong></h3><p>大概描述 ：scheme是一种页面内跳转协议，是一种非常好的实现机制，通过定义自己的scheme协议，可以非常方便跳转app中的各个页面。<strong>H5页面通过协议可以跳转native页面等</strong>。 </p><p>通过执行以下操作支持自定义URL方案：</p><ul><li>定义应用程序<strong>schema</strong> URL的格式。</li><li>注册应用程序<strong>schema</strong> URL方案，以便系统将适当的URL定向到应用程序。</li><li>应用程序处理收到的网址URL。</li></ul><p><strong>一些URL Scheme</strong> <a href="https://www.zhihu.com/question/19907735" target="_blank" rel="noopener"><strong>https://www.zhihu.com/question/19907735</strong></a></p><p><img src="/img/hybrid/912961-20180926232207391-574084485.png" alt=""></p><p>截取一端代码，代码来源：<a href="https://github.com/tcoulter/jockeyJS/blob/master/JockeyJS/JS/jockey.JS" target="_blank" rel="noopener">https://github.com/tcoulter/jockeyJS/blob/master/JockeyJS/JS/jockey.JS</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这段代码主要功能是前端通过一个特殊的url给客户端发消息</span></span><br><span class="line">dispatchMessage: <span class="function"><span class="keyword">function</span>(<span class="params">type, envelope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// We send the message by navigating the browser to a special URL.</span></span><br><span class="line">    <span class="comment">// The iOS library will catch the navigation, prevent the UIWebView</span></span><br><span class="line">    <span class="comment">// from continuing, and use the data in the URL to execute code</span></span><br><span class="line">    <span class="comment">// within the iOS app.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> src = <span class="string">"jockey://"</span> + type + <span class="string">"/"</span> + envelope.id + <span class="string">"?"</span> + <span class="built_in">encodeURIComponent</span>(<span class="built_in">JSON</span>.stringify(envelope));</span><br><span class="line">    <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">"iframe"</span>);</span><br><span class="line">    iframe.setAttribute(<span class="string">"src"</span>, src);</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(iframe);</span><br><span class="line">    iframe.parentNode.removeChild(iframe);</span><br><span class="line">    iframe = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h3 id="2-2具体H5与Native通信，JS-to-native？"><a href="#2-2具体H5与Native通信，JS-to-native？" class="headerlink" title="2.2具体H5与Native通信，JS to native？"></a><strong>2.2具体H5与Native通信，JS to native？</strong></h3><p>JS与Native通信一般都是创建这类URL被Native捕获处理。</p><p><img src="/img/hybrid/912961-20180927232122179-104505938.png" alt=""></p><h3 id="2-3native到h5页面-native-to-JS？"><a href="#2-3native到h5页面-native-to-JS？" class="headerlink" title="2.3native到h5页面,native to JS？"></a>2.3native到h5页面,<strong>native to JS</strong>？</h3><p>native提供的容器盒子那么native，可否调用它提供的webview中window对象的方法了？</p><p><img src="/img/hybrid/912961-20180926235420738-345935435.jpg" alt=""></p><p>图片来源:<a href="https://blog.csdn.net/gongch0604/article/details/80510005" target="_blank" rel="noopener">https://blog.csdn.net/gongch0604/article/details/80510005</a></p><h2 id="3-前端和客户端的交互实现"><a href="#3-前端和客户端的交互实现" class="headerlink" title="3.前端和客户端的交互实现"></a>3.前端和客户端的交互实现</h2><p> 前端与Native两种交互形式：</p><ul><li>URL Schema（前端先定义对象，以及交互方法）</li><li>客户端定义对象，注入全局变量（Android本身就支持类似的实现,所以此处讨论ios的JavaScriptCore ）</li></ul><p>JavaScriptCore是一个C++实现的开源项目。使用Apple提供的JavaScriptCore框架，可以在Objective-C或者基于C的程序中执行Javascript代码，<strong>也可以向JavaScript环境中插入一些自定义的对象</strong>。JavaScriptCore从iOS 7.0之后可以直接使用，资料：<a href="https://developer.apple.com/documentation/javascriptcore" target="_blank" rel="noopener">https://developer.apple.com/documentation/javascriptcore</a></p><h3 id="3-1-URL-Schema（前端先定义对象，以及交互方法"><a href="#3-1-URL-Schema（前端先定义对象，以及交互方法" class="headerlink" title="3.1 URL Schema（前端先定义对象，以及交互方法)"></a><strong>3.1</strong> URL Schema（前端先定义对象，以及交互方法)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=&quot;btn1&quot;&gt;扫一扫&lt;/button&gt;</span><br><span class="line">    &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        function send(type, payload,callback) &#123;</span><br><span class="line">            var envelope = &#123;</span><br><span class="line">                id: id,</span><br><span class="line">                type: type,</span><br><span class="line">                host: host,</span><br><span class="line">                payload: payload</span><br><span class="line">            &#125;;</span><br><span class="line">            window.myapp.[envelop.id] = callback;</span><br><span class="line">            var src = &quot;myapp://&quot;+envelope.id + &quot;?&quot; + encodeURIComponent(JSON.stringify(envelop));</span><br><span class="line">            //告诉客户端此时调用的函数， 函数执行完成后，告诉h5执行window.myapp.[envelop.id]这个函数。</span><br><span class="line">　　　　　　　// host 加入使得客户端更容易控制是否响应和处理（毕竟app内可能有需求内嵌第三方页面）</span><br><span class="line"></span><br><span class="line">            var iframe = document.createElement(&quot;iframe&quot;);</span><br><span class="line">            iframe.setAttribute(&quot;src&quot;, src);</span><br><span class="line">            document.documentElement.appendChild(iframe);</span><br><span class="line">            iframe.parentNode.removeChild(iframe);</span><br><span class="line">            iframe = null;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        document.getElementById(&apos;btn1&apos;).addEventListener(&apos;click&apos;, function () &#123;</span><br><span class="line">            send(&quot;scan&quot;, &#123;&#125;, (payload) =&gt; &#123;</span><br><span class="line">                console.log(&quot;hi&quot;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html</span><br></pre></td></tr></table></figure><p> 通常代码实现会把send函数部分进行封装，前端只需要实现与native约定的功能函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getPort: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.send(<span class="string">"getPort"</span>, &#123;&#125;, (payload) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line">login: <span class="function"><span class="keyword">function</span>(<span class="params">args = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">window</span>.send(<span class="string">"login"</span>, args, (payload) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2客户端定义对象，注入全局变量"><a href="#3-2客户端定义对象，注入全局变量" class="headerlink" title="3.2客户端定义对象，注入全局变量"></a>3.2客户端定义对象，注入全局变量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面调用了未声明方法，事实上是Native注入给window对象的。（native在本地实现了js方法并注入h5）</span></span><br><span class="line"><span class="comment">// 在页面加载完成前注入全局变量myapp，myapp下面的方法，即app提供的API方法</span></span><br><span class="line">myapp.getPort(data, (payload) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line">myapp.login(data, (payload) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>两种方式的区别，由客户端还是由h5预先定义对象，以及交互方法 。</p><h2 id="4-前端交互实现关注点"><a href="#4-前端交互实现关注点" class="headerlink" title="4.前端交互实现关注点"></a>4.前端交互实现关注点</h2><p>代码来源：<a href="https://github.com/tcoulter/jockeyjs/blob/master/JockeyJS/js/jockey.js" target="_blank" rel="noopener">https://github.com/tcoulter/jockeyJS/blob/master/JockeyJS/JS/jockey.JS</a>（以下代码例子，以URL Schema方式为基础）</p><h3 id="4-1导航栏的设置"><a href="#4-1导航栏的设置" class="headerlink" title="4.1导航栏的设置"></a><strong>4.1导航栏的设置</strong></h3><p>导航栏通常是native实现，有回按钮退防止页面假死，即页面卡死可以回退。</p><p>同时native需要提供API给h5进行简单的定制（比如有的需要关闭按钮，分享按钮，收藏按钮等)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setBarBack() &#123;</span><br><span class="line">    Jockey.send(<span class="string">"setBarBack"</span>, &#123;</span><br><span class="line">        <span class="string">"bar"</span>: &#123;</span><br><span class="line">            <span class="string">"position"</span>: <span class="string">"left"</span>,</span><br><span class="line">            <span class="string">"cliekEvent"</span>: <span class="string">"onBack"</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);　</span><br><span class="line">    <span class="comment">// 取消监听onBack事件</span></span><br><span class="line">    Jockey.off(<span class="string">'onBack'</span>);</span><br><span class="line">    <span class="comment">// 监听onBack事件</span></span><br><span class="line">    Jockey.on(<span class="string">'onBack'</span>, () =&gt; &#123;</span><br><span class="line">        history.back()</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-跳转是Hybrid必用API"><a href="#4-2-跳转是Hybrid必用API" class="headerlink" title="4.2 跳转是Hybrid必用API"></a>4.2 <strong>跳转是Hybrid必用API</strong></h3><p>① H5跳转Native界面</p><p>② H5新开Webview跳转H5页面。</p><p>用native的方法来跳转，一般是为了做页面的动画切换。</p><p><img src="https://img2018.cnblogs.com/blog/912961/201809/912961-20180927020253702-781129217.png" alt=""></p><p>如图通常H5页面只会显示在导航栏下面，但H5关注页面的导航栏，H5端可以注册事件监听native的导航栏的事件（非必须）</p><h3 id="4-3获取基本信息"><a href="#4-3获取基本信息" class="headerlink" title="4.3获取基本信息"></a><strong>4.3获取基本信息</strong></h3><p>在具备用户体系的模式下，H5页面能从native拿到基本的登录信息。Native本身就保存了用户信息，提供接口给H5使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        Jockey.send(<span class="string">"getInfo"</span>, &#123;&#125;, (payload) =&gt; &#123;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4调用native原生具备的功能"><a href="#4-4调用native原生具备的功能" class="headerlink" title="4.4调用native原生具备的功能"></a><strong>4.4调用native原生具备的功能</strong></h3><p>相机，手机页面横屏显示或者竖屏显示等。</p><h3 id="4-5关于调试"><a href="#4-5关于调试" class="headerlink" title="4.5关于调试"></a><strong>4.5关于调试</strong></h3><p>Android：输入chrome://inspect/#devices即可（前提native打开了调试模式），当然Android也可以使用模拟器，但与Android的真机表现过于不一样，还是建议使用真机测试。</p><p><img src="https://img2018.cnblogs.com/blog/912961/201809/912961-20180927102007915-2139492472.png" alt=""></p><p>iOS:需一台Mac机，然后打开safari，在偏好设置中将开发模式打开，然后点击打开safari浏览器，查看菜单栏开发菜单（前提native打开了调试模式）…</p><p><img src="https://img2018.cnblogs.com/blog/912961/201809/912961-20180927103414994-1389630516.jpg" alt=""></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5.小结"></a>5.小结</h2><p>文章只是一个对hybrid的简单了解，文中例子比较粗糙，理解不准确之处，还请教正。对于有兴趣深入了解Hybrid技术的设计与实现前端部分细节的可以看看参考资料~~</p><p>参考资料：</p><p><a href="http://www.cnblogs.com/yexiaochai/p/4921635.html" target="_blank" rel="noopener">http://www.cnblogs.com/yexiaochai/p/4921635.html</a></p><p><a href="http://www.cnblogs.com/yexiaochai/p/5524783.html" target="_blank" rel="noopener">http://www.cnblogs.com/yexiaochai/p/5524783.html</a></p><p><a href="http://www.cnblogs.com/yexiaochai/p/5813248.html" target="_blank" rel="noopener">http://www.cnblogs.com/yexiaochai/p/5813248.html</a></p>]]></content>
      
      <categories>
          
          <category> Xiaobu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何在 JavaScript 中更好地使用数组</title>
      <link href="/how-to-use-JSArray/"/>
      <url>/how-to-use-JSArray/</url>
      <content type="html"><![CDATA[<p>数组原型方法有很多：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">join()</span><br><span class="line">push()和pop()</span><br><span class="line">shift() 和 unshift()</span><br><span class="line">sort()</span><br><span class="line">reverse()</span><br><span class="line">concat()</span><br><span class="line">slice()</span><br><span class="line">splice() </span><br><span class="line">isArray()  toString()</span><br><span class="line">indexOf()和 lastIndexOf() </span><br><span class="line">forEach() </span><br><span class="line">map() </span><br><span class="line">filter() </span><br><span class="line">every() </span><br><span class="line">some() </span><br><span class="line">reduce()和 reduceRight()</span><br><span class="line">from()</span><br><span class="line">of()</span><br><span class="line">copyWithin()</span><br><span class="line">entries()</span><br><span class="line">keys()</span><br><span class="line">values()</span><br><span class="line">inludes()</span><br></pre></td></tr></table></figure></p><h4 id="合并数组"><a href="#合并数组" class="headerlink" title="合并数组"></a>合并数组</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">arr1.concat(arr2)</span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br><span class="line"><span class="built_in">console</span>.log(arr1.concat(arr2))</span><br><span class="line"></span><br><span class="line">arr1.push(...arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arr1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的合并数组</span></span><br><span class="line">arr1.concat(arr2, arr3);</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的合并数组</span></span><br><span class="line">[...arr1, ...arr2, ...arr3]</span><br><span class="line"><span class="comment">// [ 'a', 'b', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log([...arr1, ...arr2, ...arr3])</span><br></pre></td></tr></table></figure><h4 id="复制数组-克隆数组，修改a2，a1不会改变"><a href="#复制数组-克隆数组，修改a2，a1不会改变" class="headerlink" title="复制数组(克隆数组，修改a2，a1不会改变)"></a>复制数组(克隆数组，修改a2，a1不会改变)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> a2 = a1;</span><br><span class="line">a2.push(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a3 = [...a1]</span><br><span class="line">a3.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a1)</span><br><span class="line"><span class="built_in">console</span>.log(a2)</span><br><span class="line"><span class="built_in">console</span>.log(a3)</span><br></pre></td></tr></table></figure><h4 id="includes-、indexOf-使用-Array-includes-替代-Array-indexOf"><a href="#includes-、indexOf-使用-Array-includes-替代-Array-indexOf" class="headerlink" title="includes()、indexOf() (使用 Array.includes 替代 Array.indexOf)"></a>includes()、indexOf() (使用 Array.includes 替代 Array.indexOf)</h4><p>includes() 数组实例的 方法返回一个布尔值，表示某个数组是否包含给定的值，与字符串的includes方法类似。该方法的第二个参数表示搜索的起始位置，默认为0。如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为-4，但数组长度为3），则会重置为从0开始</p><p> 在 MDN 文档中，对 Array.indexOf 的描述是：返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。因此，如果在之后的代码中需要用到（给给定元素的）索引，那么 Array.indexOf 是不二之选。</p><p> indexOf方法有两个缺点，一是不够语义化，它的含义是找到参数值的第一个出现位置，所以要去比较是否不等于-1，表达起来不够直观。<br>二是，它内部使用严格相等运算符（===）进行判断，这会导致对NaN的误判。</p><p>然而，如果我们仅需要知道数组中是否包含给定元素呢？这意味着只是是与否的区别，这是一个布尔问题（boolean question）。针对这种情况，我建议使用直接返回布尔值的 Array.includes。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>)     <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>)     <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].indexOf(<span class="number">2</span>)  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line">[<span class="literal">NaN</span>].includes(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="find-、findIndex-、filter-、every-、some"><a href="#find-、findIndex-、filter-、every-、some" class="headerlink" title="find()、findIndex()、filter()、every()、some()"></a>find()、findIndex()、filter()、every()、some()</h4><p>find() 数组实例的 用于找出第一个符合条件的数组成员。它的参数是一个回调函数，所有数组成员依次执行该回调函数，直到找出第一个返回值为true的成员，然后返回该成员。如果没有符合条件的成员，则返回undefined</p><p>findIndex() 数组实例的findIndex方法的用法与find方法非常类似，返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</p><p>filter()：“过滤”功能，数组中的每一项运行给定函数，返回满足过滤条件组成的数组。</p><p>every()：判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回true。</p><p>some()：判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回true。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>)) <span class="comment">// -5</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>].findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">9</span>;</span><br><span class="line">&#125;) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].indexOf(<span class="literal">NaN</span>)</span><br><span class="line"><span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">NaN</span>].findIndex(<span class="function"><span class="params">y</span> =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, y))</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">x, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> index % <span class="number">3</span> === <span class="number">0</span> || x &gt;= <span class="number">8</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 4, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">10</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> arr3 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">1</span>;</span><br><span class="line">&#125;); </span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="使用-Array-find-替代-Array-filter"><a href="#使用-Array-find-替代-Array-filter" class="headerlink" title="使用 Array.find 替代 Array.filter"></a>使用 Array.find 替代 Array.filter</h4><p>Array.filter 是一个十分有用的方法。它通过回调函数过滤原数组，并将过滤后的项作为新数组返回。正如它的名字所示，我们将这个方法用于过滤，（一般而言）会获得一个长度更短的新数组。</p><p>然而，如果知道经回调函数过滤后，只会剩余唯一的一项，那么我不建议使用 Array.filter。比如：使用等于某个唯一 ID 为过滤条件去过滤一个数组。在这个例子中，Array.filter 返回一个仅有一项的新数组。然而，我们仅仅是为了获取 ID 为特定 ID 的那一项，这个新数组显得毫无用处。</p><p>让我们讨论一下性能。为了获取所有符合回调函数过滤条件的项，Array.filter 必须遍历整个数组。如果原数组中有成千上万项，回调函数需要执行的次数是相当多的。</p><p>为避免这些情况，我建议使用 Array.find。它与 Array.filter 一样需要一个回调函数，（但只是返回）符合条件的第一项。当找到符合回调函数过滤条件的第一个元素时，它会立即停止往下的搜寻。不再遍历整个数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> characters = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'ironman'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'black_widow'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'captain_america'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'captain_america'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCharacter</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">character</span> =&gt;</span> character.name === name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(characters.filter(getCharacter(<span class="string">'captain_america'</span>)));</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; id: 3, name: 'captain_america' &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; id: 4, name: 'captain_america' &#125;,</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(characters.find(getCharacter(<span class="string">'captain_america'</span>)));</span><br><span class="line"><span class="comment">// &#123; id: 3, name: 'captain_america' &#125;</span></span><br></pre></td></tr></table></figure><h4 id="Array-some-替代-Array-find"><a href="#Array-some-替代-Array-find" class="headerlink" title="Array.some 替代 Array.find"></a>Array.some 替代 Array.find</h4><p>在上面的例子中，我们知道 Array.find 需要一个回调函数作为参数，并返回（符合条件的）第一个元素。然而，当我们需要知道数组中是否存在一个元素时，Array.find 是最好的选择吗？不一定是，因为它返回一个元素，而不是一个布尔值。</p><p>在下面的例子中，我建议使用 Array.some，它返回你需要的布尔值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> characters = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'ironman'</span>, <span class="attr">env</span>: <span class="string">'marvel'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'black_widow'</span>, <span class="attr">env</span>: <span class="string">'marvel'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'wonder_woman'</span>, <span class="attr">env</span>: <span class="string">'dc_comics'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasCharacterFrom</span>(<span class="params">env</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">character</span> =&gt;</span> character.env === env;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(characters.find(hasCharacterFrom(<span class="string">'marvel'</span>)));</span><br><span class="line"><span class="comment">// &#123; id: 1, name: 'ironman', env: 'marvel' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(characters.some(hasCharacterFrom(<span class="string">'marvel'</span>)));</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>译者注：补充一下 Array.some 与 Array.includes 使用上的区别。两者都返回一个布尔值，表示某项是否存在于数组之中，一旦找到对应的项，立即停止遍历数组。不同的是 Array.some 的参数是回调函数，而 Array.includes 的参数是一个值（均不考虑第二个可选参数）。</p><p>假设希望知道值为 value 的项是否存在于数组中，既可以编写代码：[].includes(value)， 也可以给 Array.some 传入 item =&gt; item === value 作为回调函数。Array.includes 使用更简单，Array.some 可操控性更强。</p></blockquote><h4 id="使用-Array-reduce-替代-Array-filter-与-Array-map-的组合"><a href="#使用-Array-reduce-替代-Array-filter-与-Array-map-的组合" class="headerlink" title="使用 Array.reduce 替代 Array.filter 与 Array.map 的组合"></a>使用 Array.reduce 替代 Array.filter 与 Array.map 的组合</h4><blockquote><p>reduce() 方法接收一个函数作为累加器，数组中的每个值（从左到右）开始缩减，最终计算为一个值。<br>事实上说，Array.reduce 不太容易理解。然而，如果我们先使用 Array.filter 过滤原数组，之后（对结果）再调用 Array.map （以获取一个新数组）。这看起似乎有点问题，是我们忽略了什么吗？<br>在上面的例子中，我们使用了 Array.map，（但更）建议使用累加器为待拼接数组的 Array.reduce 。在下面的例子中，根据变量 env 的值，我们会将它加进累加器中或保持累加器不变（即不作任何处理）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> characters = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'ironman'</span>, <span class="attr">env</span>: <span class="string">'marvel'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'black_widow'</span>, <span class="attr">env</span>: <span class="string">'marvel'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">'wonder_woman'</span>, <span class="attr">env</span>: <span class="string">'dc_comics'</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  characters.filter(<span class="function"><span class="params">character</span> =&gt;</span> character.env === <span class="string">'marvel'</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">character</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, character, &#123; <span class="attr">alsoSeenIn</span>: [<span class="string">'Avengers'</span>] &#125;))</span><br><span class="line">);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; name: 'ironman', env: 'marvel', alsoSeenIn: ['Avengers'] &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: 'black_widow', env: 'marvel', alsoSeenIn: ['Avengers'] &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br><span class="line"><span class="built_in">console</span>.log(</span><br><span class="line">  characters.reduce(<span class="function">(<span class="params">acc, character</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> character.env === <span class="string">'marvel'</span></span><br><span class="line">        ? acc.concat(<span class="built_in">Object</span>.assign(&#123;&#125;, character, &#123; <span class="attr">alsoSeenIn</span>: [<span class="string">'Avengers'</span>] &#125;))</span><br><span class="line">        : acc;</span><br><span class="line">    &#125;, [])</span><br><span class="line">)</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123; name: 'ironman', env: 'marvel', alsoSeenIn: ['Avengers'] &#125;,</span></span><br><span class="line"><span class="comment">//   &#123; name: 'black_widow', env: 'marvel', alsoSeenIn: ['Avengers'] &#125;</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></table></figure><p>这样做的问题是：我们遍历了两次数组。第一次是过滤原数组以获取一个长度稍短的新数组，第二次遍历（译者注：指 Array.map）是对 Array.filter 的返回的新数组进行加工，再次创造了一个新数组！为得到最终的结果，我们结合使用了两个数组方法。每个方法都有它自己的回调函数，而且供 Array.map 使用的临时数组是由 Array.filter 提供的，（一般而言）该数组无法复用。</p><p>为避免如此低效场景的出现，我的建议是使用 Array.reduce 。一样的结果，更好的代码！Array.reduce 允许你将过滤后切加工过的项放进累加器中。累加器可以是需要待递增的数字、待填充的对象、 待拼接的字符串或数组等。</p>]]></content>
      
      <categories>
          
          <category> Ring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Async</title>
      <link href="/async/"/>
      <url>/async/</url>
      <content type="html"><![CDATA[<h2 id="Async"><a href="#Async" class="headerlink" title="Async"></a>Async</h2><h4 id="1-什么是异步？"><a href="#1-什么是异步？" class="headerlink" title="1.什么是异步？"></a>1.什么是异步？</h4><p>异步是相对同步而言。</p><p>同步是一件事一件事的执行，只有前一个任务执行完成，才能执行后一个任务。</p><h4 id="2-为什么要使用异步？"><a href="#2-为什么要使用异步？" class="headerlink" title="2.为什么要使用异步？"></a>2.为什么要使用异步？</h4><p>javascript是单线程的。</p><h4 id="3-为什么js不设计成多线程？"><a href="#3-为什么js不设计成多线程？" class="headerlink" title="3.为什么js不设计成多线程？"></a>3.为什么js不设计成多线程？</h4><p>这主要跟javascript的历史有关，js最开始只是为了处理一些表单验证和DOM操作而被创造出来的，所以主要为了语言的轻量和简单采用了单线程的模式。多线程模型相比单线程要复杂很多，比如多线程需要处理线程间资源的共享问题，还要解决状态同步等问题。</p><p>如果JS是多线程的话，当你要执行往div中插入一个DOM的操作的同时，另一个线程执行了删除这个div的操作，这个时候就会出现很多问题，我们还需要为此增加锁机制等。</p><h4 id="4-如何实现异步？"><a href="#4-如何实现异步？" class="headerlink" title="4.如何实现异步？"></a>4.如何实现异步？</h4><p>JS的事件循环机制(Event Loop)。</p><h4 id="5-js的异步编程模式"><a href="#5-js的异步编程模式" class="headerlink" title="5.js的异步编程模式"></a>5.js的异步编程模式</h4><ol><li><p><strong>回调函数</strong></p></li><li><p><strong>事件监听</strong></p></li><li><p><strong>观察者模式</strong></p></li><li><p><strong>Promsie</strong></p></li><li><p><strong>Generator</strong></p></li><li><p><strong>async/await</strong></p></li></ol><p>例：三个异步函数a，b，c，每隔一秒依次输出a，b，c。</p><p>（1）回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span> (<span class="params">callback1, callback2</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">callback1(callback2)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">callback()</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a(b, c)</span><br></pre></td></tr></table></figure><p>（2）事件监听。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;c&quot;&gt;</span><br><span class="line">&lt;div id=&quot;b&quot;&gt;</span><br><span class="line">&lt;div id=&quot;a&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;c&quot;).addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;c&apos;)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;, false)</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;b&quot;).addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;b&apos;)</span><br><span class="line">        document.getElementById(&quot;c&quot;).click()</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;, false)</span><br><span class="line"></span><br><span class="line">document.getElementById(&quot;a&quot;).addEventListener(&quot;click&quot;, e =&gt; &#123;</span><br><span class="line">    e.stopPropagation()</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;a&apos;)</span><br><span class="line">        document.getElementById(&quot;b&quot;).click()</span><br><span class="line">    &#125;, 1000)</span><br><span class="line">&#125;, false)</span><br></pre></td></tr></table></figure><p>（3）观察者模式，也叫发布/订阅模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">function MessageCenter()&#123;</span><br><span class="line">    var _messages = &#123;&#125;;</span><br><span class="line"> </span><br><span class="line">    // 对于regist方法，它只负责注册消息，就只接收一个注册消息的类型(标识)参数就好了。</span><br><span class="line">    this.regist = function(msgType)&#123;</span><br><span class="line">        // 判断是否重复注册</span><br><span class="line">        if(typeof _messages[msgType] === &apos;undefined&apos;)&#123;</span><br><span class="line">            _messages[msgType] = [];    // 数组中会存放订阅者</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(&apos;这个消息已经注册过了&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 对于subscribe方法，需要订阅者和已经注册了的消息进行绑定</span><br><span class="line">    // 由于订阅者得到消息后需要处理消息，所以他是一个个的函数</span><br><span class="line">    this.subscribe = function(msgType, subFn)&#123;</span><br><span class="line">        // 判断是否有这个消息</span><br><span class="line">        if(typeof _messages[msgType] !== &apos;undefined&apos;)&#123;</span><br><span class="line">            _messages[msgType].push(subFn);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            console.log(&apos;这个消息还没注册过，无法订阅&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 最后我们实现下fire这个方法，就是去发布某条消息，并通知订阅这条消息的所有订阅者函数</span><br><span class="line">    this.fire = function(msgType, args)&#123;    </span><br><span class="line">        // msgType是消息类型或者说是消息标识，而args可以设置这条消息的附加信息</span><br><span class="line"> </span><br><span class="line">        // 还是发布消息时，判断下有没有这条消息</span><br><span class="line">        if(typeof _messages[msgType] === &apos;undefined&apos;) &#123;</span><br><span class="line">            console.log(&apos;没有这条消息，无法发布&apos;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        var events = &#123;</span><br><span class="line">            type: msgType,</span><br><span class="line">            args: args || &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        _messages[msgType].forEach(function(sub)&#123;</span><br><span class="line">            sub(events);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">const msgCenter = new MessageCenter()</span><br><span class="line"></span><br><span class="line">const a = function () &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(&apos;a&apos;)</span><br><span class="line">msgCenter.fire(&apos;a&apos;)</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line">const b = function () &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(&apos;b&apos;)</span><br><span class="line">msgCenter.fire(&apos;b&apos;)</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line">const c = function () &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(&apos;c&apos;)</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">msgCenter.regist(&apos;a&apos;)</span><br><span class="line">msgCenter.subscribe(&apos;a&apos;, b)</span><br><span class="line">msgCenter.regist(&apos;b&apos;)</span><br><span class="line">msgCenter.subscribe(&apos;b&apos;, c)</span><br><span class="line"> </span><br><span class="line">a()</span><br></pre></td></tr></table></figure><p>（4）Promise。</p><p>Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">const a = function () &#123;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(&apos;a&apos;)</span><br><span class="line">resolve()</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">const b = function () &#123;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(&apos;b&apos;)</span><br><span class="line">resolve()</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">const c = function () &#123;</span><br><span class="line">return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">console.log(&apos;c&apos;)</span><br><span class="line">resolve()</span><br><span class="line">&#125;, 1000)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a().then(() =&gt; &#123;</span><br><span class="line">return b()</span><br><span class="line">&#125;)</span><br><span class="line">.then(() =&gt; &#123;</span><br><span class="line">return c()</span><br><span class="line">&#125;)</span><br><span class="line">.catch(error =&gt; console.log(error))</span><br></pre></td></tr></table></figure><p>（5）Generator。</p><p>Generator 函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const gen = function* () &#123;</span><br><span class="line">yield a()</span><br><span class="line">yield b()</span><br><span class="line">yield c()</span><br><span class="line">&#125;</span><br><span class="line">const run = function (gen) &#123;</span><br><span class="line">const g = gen()</span><br><span class="line">function next(data) &#123;</span><br><span class="line">const result = g.next(data)</span><br><span class="line">if (result.done) return result.value</span><br><span class="line">result.value.then(data =&gt; &#123;</span><br><span class="line">next(data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">run(gen)</span><br></pre></td></tr></table></figure><p>（6）async/await。</p><p>async/await是是Generator 函数的语法糖，async函数就是将 Generator 函数的星号（*）替换成async，将yield替换成await，仅此而已。</p><p>与Generator区别：</p><p>（1）内置执行器。</p><p>（2）更好的语义。</p><p>（3）返回值是Promise。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const run = async function () &#123;</span><br><span class="line">await a()</span><br><span class="line">await b()</span><br><span class="line">await c()</span><br><span class="line">&#125;</span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node 中 mysql 应用 -- 连接池的优势</title>
      <link href="/node%20mysql%20pool/"/>
      <url>/node%20mysql%20pool/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>从事 Node 开发已有一段时间，数据库用的是 mysql，每次执行数据库操作流程如下：创建一个连接，执行 sql 语句，然后关闭连接。当用户量不大，并发执行数据库操作不多的时候，运转一切正常。当写一个爬虫功能时候，同时执行2000条数据入库操作时，系统报错，提示超时了。意识到问题的重要性后，努力学习了一番，使用连接池解决了这一并发执行数据库操作问题。在此，分享并记录 node 中使用数据库连接池，测试连接池优势等。</p><h3 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mysql</span><br></pre></td></tr></table></figure><h3 id="如何使用单次连接"><a href="#如何使用单次连接" class="headerlink" title="如何使用单次连接"></a>如何使用单次连接</h3><blockquote><p>所谓单次连接， 指的是最基本的连接方式， 每次执行数据库操作，都会打开一个连接， 执行完之后关闭连接。</p></blockquote><p>我们把它封装成一个 返回 promise 对象的函数， 便于使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">// 连接配置信息</span></span><br><span class="line"><span class="keyword">const</span> dbConfig = &#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'me'</span>,</span><br><span class="line">  password : <span class="string">'secret'</span>,</span><br><span class="line">  database : <span class="string">'my_db'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 导出对象</span></span><br><span class="line"><span class="keyword">const</span> imp = &#123;</span><br><span class="line"> <span class="comment">// 执行</span></span><br><span class="line"> <span class="keyword">do</span>: <span class="function">(<span class="params">sql, para</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> conn = mysql.createConnection(dbConfig);</span><br><span class="line">  conn .connect();</span><br><span class="line">  conn.query(sql, para, (err, rows) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line"> <span class="keyword">return</span> resolve(rows);</span><br><span class="line">  &#125;);</span><br><span class="line">  connection.end();</span><br><span class="line">&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = imp;</span><br></pre></td></tr></table></figure><p>其中连接配置还可以设置连接超时时间 connectTimeout，是否启用大数字 supportBigNumbers， 是否启用debug模式等，都是一些特殊场景需求，详情移步官网文档： <a href="https://www.npmjs.com/package/mysql" target="_blank" rel="noopener">https://www.npmjs.com/package/mysql</a></p><h3 id="如何使用连接池"><a href="#如何使用连接池" class="headerlink" title="如何使用连接池"></a>如何使用连接池</h3><blockquote><p>连接池的定义： 连接池是创建和管理一个连接的缓冲池的技术，这些连接准备好被任何需要它们的线程使用。</p></blockquote><p>为每个用户打开和维护数据库连接，特别是对动态数据库驱动的网站应用程序的请求，代价高昂，浪费资源。在连接池中，在创建连接之后，将它放置在池中，并再次使用它，这样就不必建立新的连接。如果正在使用所有连接，则将创建一个新连接并将其添加到池中。连接池还减少了用户必须等待建立到数据库连接的时间。</p><p>同样的， 我们把它封装成一个 返回 promise 对象的函数， 便于使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</span><br><span class="line"><span class="comment">// 连接池配置</span></span><br><span class="line"><span class="keyword">const</span> dbPoolConfig = &#123;</span><br><span class="line">  host     : <span class="string">'localhost'</span>,</span><br><span class="line">  user     : <span class="string">'me'</span>,</span><br><span class="line">  password : <span class="string">'secret'</span>,</span><br><span class="line">  database : <span class="string">'my_db'</span>,</span><br><span class="line">  acquireTimeout: <span class="number">15000</span>, <span class="comment">// 连接超时时间</span></span><br><span class="line">  connectionLimit: <span class="number">100</span>, <span class="comment">// 最大连接数</span></span><br><span class="line">  waitForConnections: <span class="literal">true</span>, <span class="comment">// 超过最大连接时排队</span></span><br><span class="line">  queueLimit: <span class="number">0</span>, <span class="comment">// 排队最大数量(0 代表不做限制)</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 创建连接池</span></span><br><span class="line"><span class="keyword">const</span> pool = mysql.createPool(dbPoolConfig);</span><br><span class="line"><span class="keyword">const</span> imp = &#123;</span><br><span class="line">  <span class="comment">// 执行</span></span><br><span class="line">  query: <span class="function">(<span class="params">sql, para</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">pool.getConnection(<span class="function">(<span class="params">err, conn</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">  conn.query(sql, para, (err, rows) =&gt; &#123;</span><br><span class="line">    conn.release();</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> reject(err);</span><br><span class="line">    <span class="keyword">return</span> resolve(rows);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = imp;</span><br></pre></td></tr></table></figure><p><strong>连接池配置参数详解</strong><br>（1）acquireTimeout: 表示连接超时时间， 默认是10000 ms； 最大连接数越大， 连接时间越长。建议设置 15000ms</p><p>（2）connectionLimit: 最大连接数， 默认是 10； 并发操作较大时，连接数越大， 执行速度较快。<br>经测试， 20000 并发执行数据库查询操作， 最大连接数为 10时， 响应时长 14508ms； 最大连接数设置50， 300等，响应时长接近 11000ms。所以，建议最大连接数设置100。</p><p>（3）waitforConnections： 超过最大连接数是否等待。 默认是等待， 若设置成false， 则超过最大连接数就报错。建议设置为true。</p><p>（4）queueLimit： 排队最大数量。 默认为无限制， 0 代表无限制。 建议设置为 0。</p><h3 id="对比两种连接方式性能"><a href="#对比两种连接方式性能" class="headerlink" title="对比两种连接方式性能"></a>对比两种连接方式性能</h3><p>现在， 我们以一个查询请求作为测试用例， 查询请求中增加参数count， 代表并发执行数据库操作次数， 代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start_time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 开始时间</span></span><br><span class="line"><span class="keyword">let</span> pAll = [];  <span class="comment">// promise 对象数组</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="built_in">Number</span>(ctx.query.count); <span class="comment">// 执行次数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">pAll.push(doSql()); <span class="comment">// 添加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 开始执行</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(pAll);</span><br><span class="line"><span class="keyword">let</span> end_tiem = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();   <span class="comment">// 结束时间</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`response time: <span class="subst">$&#123;end_time - start_time&#125;</span>`</span>);</span><br><span class="line">ctx.response.body = &#123; <span class="attr">code</span>: <span class="number">0</span>, <span class="attr">total</span>: result.length, <span class="attr">data</span>: result &#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>并发执行1次</strong></li></ul><table><thead><tr><th>连接方式</th><th>平均响应时长(ms)</th><th>是否报错</th><th>性能</th></tr></thead><tbody><tr><td>单次连接</td><td>5.2</td><td>否</td><td>快</td></tr><tr><td>连接池</td><td>3.5</td><td>否</td><td>快</td></tr></tbody></table><p>相差： 1.7 ms </p><ul><li><strong>并发执行5次</strong></li></ul><table><thead><tr><th>连接方式</th><th>平均响应时长(ms)</th><th>是否报错</th><th>性能</th></tr></thead><tbody><tr><td>单次连接</td><td>10</td><td>否</td><td>快</td></tr><tr><td>连接池</td><td>6.1</td><td>否</td><td>快</td></tr></tbody></table><p>相差： 3.9 ms  </p><ul><li><strong>并发执行100次</strong></li></ul><table><thead><tr><th>连接方式</th><th>平均响应时长(ms)</th><th>是否报错</th><th>性能</th></tr></thead><tbody><tr><td>单次连接</td><td>140</td><td>否</td><td>较快</td></tr><tr><td>连接池</td><td>69</td><td>否</td><td>快</td></tr></tbody></table><p>相差： 71 ms </p><ul><li><strong>并发执行1000次</strong></li></ul><table><thead><tr><th>连接方式</th><th>平均响应时长(ms)</th><th>是否报错</th><th>性能</th></tr></thead><tbody><tr><td>单次连接</td><td>9410</td><td>大概率报错</td><td>慢</td></tr><tr><td>连接池</td><td>635</td><td>否</td><td>快</td></tr></tbody></table><p>相差： 8775 ms<br>我们发现并发执行1000次， 单次连接方式已经不能胜任了， 而连接池方式表现依然卓越。</p><ul><li><strong>并发执行10000次</strong></li></ul><table><thead><tr><th>连接方式</th><th>平均响应时长(ms)</th><th>是否报错</th><th>性能</th></tr></thead><tbody><tr><td>单次连接</td><td>失败</td><td>是</td><td>不能使用</td></tr><tr><td>连接池</td><td>7567</td><td>否</td><td>较慢</td></tr></tbody></table><p>连接池这种方式可以响应到1w的并发执行数，而且响应时间与执行次数几乎成倍数增加。</p><ul><li><strong>并发执行20000次</strong></li></ul><table><thead><tr><th>连接方式</th><th>平均响应时长(ms)</th><th>是否报错</th><th>性能</th></tr></thead><tbody><tr><td>单次连接</td><td>失败</td><td>是</td><td>不能使用</td></tr><tr><td>连接池</td><td>10775</td><td>否</td><td>慢</td></tr></tbody></table><p>当并发执行2w时候，连接池依然可以使用，且响应时间没有达到预期的两倍。<br>接着又测试了 4w 并发执行， 响应时间约 23.2s；<br>6w 并发执行， 响应时间约 39.2s;<br>8w 并发执行， 响应时间约 52.0s;</p><p><strong>测试得出初步结论：</strong></p><ul><li>单次连接，最大并发执行约800次， 响应时长约 9.2s；</li><li>连接池， 最大并发执行约8w+次，  响应时长约52s；</li><li>并发执行数5次以内， 两者相差不大， 随着并发执行数越大， 连接池优势越大</li></ul><h3 id="查看-mysql-数据库连接数配置信息"><a href="#查看-mysql-数据库连接数配置信息" class="headerlink" title="查看 mysql 数据库连接数配置信息"></a>查看 mysql 数据库连接数配置信息</h3><p>有时，我们会遇到数据库连接，执行一些错误。以下是一些常用命令，帮助我们了解当前数据库的配置。</p><ol><li><p>查询最大连接数<br><code>show variables like &#39;%max_connections%&#39;;</code></p></li><li><p>设置最大连接数<br><code>set global max_connections=1000;</code></p></li><li><p>响应的最大连接数<br><code>show global status like &#39;Max_used_connections&#39;;</code></p></li><li><p>睡眠连接超时数<br><code>show global variables like &#39;wait_timeout&#39;;</code></p></li><li><p>杀死连接id （表： INFORMATION_SCHEMA.PROCESSLIST）<br><code>kill 21120003</code></p><p>更多资料：<br><a href="https://blog.csdn.net/caodongfang126/article/details/52764213/" target="_blank" rel="noopener">https://blog.csdn.net/caodongfang126/article/details/52764213/</a><br><a href="https://www.cnblogs.com/wajika/p/6763181.html" target="_blank" rel="noopener">https://www.cnblogs.com/wajika/p/6763181.html</a><br><a href="https://blog.csdn.net/wzb56_earl/article/details/51868584" target="_blank" rel="noopener">https://blog.csdn.net/wzb56_earl/article/details/51868584</a></p></li></ol><h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><ul><li>连接池在并发执行数越大时， 对比单次连接方式， 优势越明显；而且支持的最大并发执行数远大于单次连接。</li><li>连接池随着服务的运行而创建，每次在连接池中创建连接之后，使用完释放连接，就可以再次使用它，不必建立新的连接。</li><li>连接池配置建议使用前文选项， 经过测试最佳。</li><li>后续发现数据库中连接数一直增加， 虽然是sleep状态， 但是也需要8小时后，系统才会释放。 待了解清楚原因后，尽量减少资源浪费。</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>讲讲观察vue观察者，订阅者</title>
      <link href="/vue-observer-subscriber/"/>
      <url>/vue-observer-subscriber/</url>
      <content type="html"><![CDATA[<h3 id="1、什么叫做双向绑定"><a href="#1、什么叫做双向绑定" class="headerlink" title="1、什么叫做双向绑定"></a>1、什么叫做双向绑定</h3><ul><li><strong>定义讲解</strong>：<br><strong>宏观</strong>：视图（view）更新导致模型（model）的更新，模型的更新导致视图的更新。<br><strong>微观</strong>：如果我们有一个user对象和一个name属性,一旦我们赋了一个新值给user.name,在UI上就会显示新的姓名了。同样地，如果UI包含了一个输入用户姓名的输入框，输入一个新值就应该会使user对象的name属性做出相应的改变。</li></ul><h3 id="2、代码简单实现"><a href="#2、代码简单实现" class="headerlink" title="2、代码简单实现"></a>2、代码简单实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*js*/</span><br><span class="line">Object.defineProperty(obj, &quot;evel&quot;, &#123;</span><br><span class="line">    get: function() &#123;</span><br><span class="line">      console.log(&quot;get init&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function(val) &#123;</span><br><span class="line">      document.getElementById(&quot;uName&quot;).innerText = val;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  document</span><br><span class="line">    .getElementById(&quot;userName&quot;)</span><br><span class="line">    .addEventListener(&quot;keyup&quot;, function(event) &#123;</span><br><span class="line">      obj.evel = event.target.value;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line">/*html*/</span><br><span class="line">&lt;input type=&quot;text&quot; id =&quot;userName&quot; /&gt;</span><br></pre></td></tr></table></figure><h3 id="3、详细说说vue中的观察者，订阅者"><a href="#3、详细说说vue中的观察者，订阅者" class="headerlink" title="3、详细说说vue中的观察者，订阅者"></a>3、详细说说vue中的观察者，订阅者</h3><p>（1）<strong>循序渐进</strong></p><ul><li><p>常规js代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let a = 5</span><br><span class="line">let b =2</span><br><span class="line">let res = 0</span><br><span class="line">let target = null</span><br><span class="line">target = function () &#123;</span><br><span class="line">  res = a * b</span><br><span class="line">&#125;</span><br><span class="line">target()</span><br></pre></td></tr></table></figure></li><li><p>更进一步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">let a = 5</span><br><span class="line">let b =2</span><br><span class="line">let res = 0</span><br><span class="line">let target = null</span><br><span class="line">let subscribers = []</span><br><span class="line">target = function () &#123;</span><br><span class="line">  res = a * b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 存储</span><br><span class="line">function depend () &#123;</span><br><span class="line">  subscribers.push(target)</span><br><span class="line">&#125;</span><br><span class="line">// 执行</span><br><span class="line">function exet () &#123;</span><br><span class="line">  subscribers.forEach(run =&gt; run())</span><br><span class="line">&#125;</span><br><span class="line">console.log(res)</span><br><span class="line">depend()</span><br><span class="line">exet()</span><br></pre></td></tr></table></figure></li></ul><p>（2）<strong>进一步封装使用class</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Dep &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.subscribers =[]</span><br><span class="line">  &#125;</span><br><span class="line">  // 添加</span><br><span class="line">  depend (target) &#123;</span><br><span class="line">    if (target &amp;&amp; !this.subscribers.includes(target)) &#123;</span><br><span class="line">      this.subscribers.push(target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 执行</span><br><span class="line">  notify () &#123;</span><br><span class="line">    this.subscribers.forEach(sub =&gt; sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 让他运行起来</span><br><span class="line">const dep = new Dep()</span><br><span class="line">let a = 5</span><br><span class="line">let b = 5</span><br><span class="line">let res = 0</span><br><span class="line">let target = () =&gt; &#123;</span><br><span class="line">  res = a * b</span><br><span class="line">&#125;</span><br><span class="line">dep.depend(target)</span><br><span class="line">target()</span><br><span class="line">console.log(res)</span><br><span class="line">b = 500</span><br><span class="line">dep.notify()</span><br><span class="line">console.log(res)</span><br></pre></td></tr></table></figure></p><p>（3）<strong>截止目前封装了创建需要监视更新的匿名函数的行为，现在需要一个观察者，订阅者自动执行</strong></p><ul><li><p>Object.defineProperty（）的引入，它允许我们为属性定义getter和setter函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/*简单的理解getter,setter*/</span><br><span class="line">let data = &#123;price: 5, quantity: 2&#125;</span><br><span class="line">Object.defineProperty(data,&apos;price&apos;,&#123;</span><br><span class="line">  get () &#123;</span><br><span class="line">    console.log(&apos;get fun&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  set () &#123;</span><br><span class="line">    console.log(&apos;set fun&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">data.price      // 触发get</span><br><span class="line">data.price =20 // 触发set</span><br></pre></td></tr></table></figure></li><li><p>对象中的所有属性添加get、set</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">let data = &#123;price: 5, quantity: 2&#125;</span><br><span class="line">Object.keys(data).forEach(key =&gt; &#123;</span><br><span class="line">  let internalValue = data[key]</span><br><span class="line">  Object.defineProperty(data, key, &#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">      console.log(`Getting $&#123;key&#125;: $&#123;internalValue&#125;`)</span><br><span class="line">    &#125;,</span><br><span class="line">    set (newVal) &#123;</span><br><span class="line">      console.log(`setting $&#123;key&#125; to: $&#123;newVal&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">data.price</span><br><span class="line">data.price =20</span><br></pre></td></tr></table></figure></li></ul><p>（4）<strong>我们希望在每一次改变对象数据price,或者quantity的时候，能自动计算出总价，类似于vue的computed</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">let data = &#123;price: 5, quantity: 2&#125;</span><br><span class="line">let target = null</span><br><span class="line">class Dep &#123;</span><br><span class="line">  constructor () &#123;</span><br><span class="line">    this.subscribers =[]</span><br><span class="line">  &#125;</span><br><span class="line">  // 添加</span><br><span class="line">  depend (target) &#123;</span><br><span class="line">    if (target &amp;&amp; !this.subscribers.includes(target)) &#123;</span><br><span class="line">      this.subscribers.push(target)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 执行</span><br><span class="line">  notify () &#123;</span><br><span class="line">    this.subscribers.forEach(sub =&gt; sub())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Object.keys(data).forEach(key =&gt; &#123;</span><br><span class="line">  let internalValue = data[key]</span><br><span class="line">  const dep = new Dep()</span><br><span class="line">  Object.defineProperty(data, key, &#123;</span><br><span class="line">    get () &#123;</span><br><span class="line">      dep.depend(target)</span><br><span class="line">      return internalValue</span><br><span class="line">    &#125;,</span><br><span class="line">    set (newVal) &#123;</span><br><span class="line">       internalValue = newVal</span><br><span class="line">       dep.notify()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">target = () =&gt; &#123;</span><br><span class="line">  data.total = data.price * data.quantity</span><br><span class="line">&#125;</span><br><span class="line">target()</span><br><span class="line">data.price = 33</span><br><span class="line">data.total</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Evel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>移动端web页面适配小结</title>
      <link href="/mobile-adaptation/"/>
      <url>/mobile-adaptation/</url>
      <content type="html"><![CDATA[<blockquote><p><em>适配的目标：在不同尺寸的手机设备上，页面“相对性的达到合理的展示（自适应）”或者“保持统一效果的等比缩放（看起来差不多，但不是完全等比例，对于字体我们并不喜欢等比例的去放缩）”。</em></p></blockquote><p><strong>问题</strong>:手机设备的尺寸不同，让页面在不同的手机设备上显示的效果看起来大致相同或者展示效果比较合理就成了一个问题。 目前移动端比较通用的几个方案</p><ul><li>媒体查询和rem 适配</li><li>viewport 缩放,， rem 布局，js计算</li><li>vw适配方案（以后可能的方案）</li></ul><h2 id="⒈关于viewport"><a href="#⒈关于viewport" class="headerlink" title="⒈关于viewport"></a>⒈关于viewport</h2><p>​知道了通用方法进入代码的正题，写一个如图简单的HTML页面，在Chrome浏览器iPhone6模拟器下调试发现页面的可视区域宽为980px。</p><p><img src="/img/h5adaptat/2018-07-25_233254.png" alt=""></p><p>为啥是980px了？<strong>默认的</strong>。浏览器厂商为了让那些传统的为桌面浏览器设计的网站在小屏幕下也能够很好显示，所以把<strong>布局视口（layout viewport）</strong>宽度设置地很大，一般在768px ~ 1024px之间，最常见的宽度是980px。哪为啥980px布局宽，能在375px屏幕宽的设备下完好显示了？</p><p>因为缩小。</p><blockquote><p>Narrow screen devices (e.g. mobiles) render pages in a virtual window or viewport, which is usually wider than the screen, and then shrink the rendered result down so it can all be seen at once. Users can then pan and zoom to see different areas of the page. For example, if a mobile screen has a width of 640px, pages might be rendered with a virtual viewport of 980px, and then it will be shrunk down to fit into the 640px space. This is done because many pages are not mobile optimized, and break (or at least look bad) when rendered at a small viewport width. This <strong>virtual viewport</strong> is a way to make non-mobile-optimized sites in general look better on narrow screen devices. (<a href="https://developer.mozilla.org/en-US/docs/Mozilla/Mobile/Viewport_meta_tag" target="_blank" rel="noopener">Using the viewport meta tag to control layout on mobile browsers</a>)</p></blockquote><p>窄屏幕设备（例如移动设备）在<strong>虚拟窗口</strong>或视口中渲染页面，该窗口或视口通常比屏幕宽，然后缩小渲染结果，以便可以立即看到它们。例如，如果移动屏幕的宽度为640px，则可能使用980px的虚拟视口渲染页面，然后缩小页面以适应640px空间。 这样做是因为许多页面不是移动优化的，<strong>并且在以小视口宽度渲染时会中断（或者至少看起来很糟糕）</strong>。 此虚拟视口是一种使非移动优化网站在窄屏设备上看起来更好的方法。虽然已经很人性化的设计了，但如下图不通过用户缩放和横向滚动滚动条，还是很难看清楚页面内容的。</p><p><img src="/img/h5adaptat/2018-08-02_024849.png" alt=""></p><h3 id="1-1ppk的-关于三个viewport的理论"><a href="#1-1ppk的-关于三个viewport的理论" class="headerlink" title="1.1ppk的 关于三个viewport的理论"></a>1.1ppk的 关于三个viewport的理论</h3><p>除了上文中大概提到的 <strong>layout viewport</strong>， <strong>virtual viewport</strong>，还有<strong>ideal viewport。</strong></p><ul><li><strong>layout viewport</strong>：布局视口，在呈现页面之前，浏览器需要知道布局视口的宽度,<strong>如没有任何进一步的说明（如设置&lt;meta name=”viewport” content=”width=800”&gt;），浏览器自己选择宽度</strong>。浏览器选择了布局视口的尺寸，使其在完全缩小模式下完全覆盖屏幕。</li><li><strong>virtual viewport</strong>：可见视口，可视视口是当前在屏幕上显示的页面的部分。用户可以缩放以更改可视视口的大小。</li><li><strong>ideal viewport</strong>：理想的视口，它提供了设备上理想的网页大小。因此，理想视口的尺寸因设备而异。（ideal viewport 的意义在于，无论在何种分辨率的屏幕下，针对ideal viewport 而设计的网站，不需要手动缩放和横向滚动条都可以完美地呈现给用户）</li></ul><p><img src="/img/h5adaptat/viewport.jpg" alt="&#x56FE;&#x7247;&#x6765;&#x6E90;&#x4E8E;&#x7F51;&#x7EDC;Enter a caption for this image \(optional\)"></p><p><strong>layout viewport 和 virtual viewport</strong>的关系用下文的话来描述再好不过了</p><blockquote><p>想象一下，布局视口是一个不会改变大小或形状的大图像。现在你有一个较小的框架，通过它你可以看到大图像。小框架周围被不透明材料包围，这些材料遮挡了除大部分图像之外的所有部分的视图。您可以通过框架看到的大图像部分是可视视口。您可以在保持框架的同时远离大图像（缩小）以一次查看整个图像，或者您可以靠近（放大）以仅查看一部分。您也可以更改框架的方向，但大图像（布局视口）的大小和形状永远不会更改。</p></blockquote><p>这样看来layout viewport， virtual viewport，对移动端浏览器的显示帮助还是不够的(浏览器厂商设置的一个宽度，通过一定的“自由“放缩显示在手机设备上)。现在需要一个基础的宽度设定，然后放缩比例是可控的，然后页面刚好完全显示在屏幕上（是指宽度上）。ppk第三个视口<strong>ideal viewport</strong>,就出现了。</p><p>三篇值得一看的文章</p><p>①<a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">A tale of two viewports — part one</a>（Concept: device pixels and CSS pixels，这个例子灰常好）</p><p>②<a href="https://www.quirksmode.org/mobile/viewports2.html" target="_blank" rel="noopener">A tale of two viewports — part two</a>,</p><p>③<a href="https://www.quirksmode.org/mobile/metaviewport/" target="_blank" rel="noopener">Meta viewport</a></p><p><strong>ideal viewport 和 virtual viewport 的关系</strong></p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可视视口宽度=理想视口宽度/缩放系数</span><br><span class="line">缩放系数 =理想视口宽度/可视视口宽度</span><br><span class="line"></span><br><span class="line">简单理解一下，如果理想视口宽度=设备宽度=375px，然后后缩放系数为0.5,计算出可视视口宽度为750px;</span><br><span class="line">如果此时的布局视口刚好等于750px;页面的显示是不是非常完美了（页面再也不是“自由“放缩显示了）</span><br></pre></td></tr></table></figure><h3 id="1-2-viewport-meta-tag-的引入"><a href="#1-2-viewport-meta-tag-的引入" class="headerlink" title="1.2 viewport meta tag 的引入"></a>1.2 viewport meta tag 的引入</h3><p>为了更好的控制视口的大小比例，苹果公司在其safari浏览器中引入meta viewport（<a href="https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html" target="_blank" rel="noopener">UsingtheViewport</a>），安卓以及各大浏览器厂商也都纷纷引入。下面这个标签是很多人接触移动端页面都会看到的。那么这个标签做了什么了①将布局视口宽度设置为理想的视口宽度width=device-width，<strong>②根据初始缩放系数和理想视口宽度计算出可是视口，③将布局视口宽度设置为刚刚计算的可视视口宽度（布局视口宽度取②，③计算中值大的）</strong>。 （现在看来，页面的初始布局宽度，以及放缩系数是可控靠谱的了，不容易啊，虽然这个标记被流行的移动浏览器支持，但目前还是草案）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span><br></pre></td></tr></table></figure><h2 id="2-DPR-设备像素-备独立像素"><a href="#2-DPR-设备像素-备独立像素" class="headerlink" title="2.DPR,设备像素,备独立像素"></a>2.DPR,设备像素,备独立像素</h2><p>用如下的标签欢快的按着设计稿，以px为单位写着代码，然后设计师看了效果图就跑来了，这个边框怎么这么粗呀？图标，这个图标怎么看起来这么模糊啊？还有怎么这个图标在这个小屏幕手机上面这么大……</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="2-1一些需要的概念"><a href="#2-1一些需要的概念" class="headerlink" title="2.1一些需要的概念"></a>2.1一些需要的概念</h3><p><strong>物理像素(physical pixel)</strong> :一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个物理像素都有自己的颜色值和亮度值。从屏幕在工厂生产出的那天起，它上面物理像素点就固定不变了，单位 pt(同设备像素)。</p><p> <strong>设备独立像素:</strong>（又称设备无关像素 Device Independent Pixels 、密度独立性 Density Independent或设备独立像素，简称DIP或DP）是一种物理测量单位，基于计算机控制的坐标系统和抽象像素（虚拟像素），由底层系统的程序使用，转换为物理像素的应用。</p><p><strong>css像素</strong>：   CSS像素是一个抽像的单位 ，1个 CSS 像素的大小在不同物理设备上看上去大小总是差不多。（为了保证浏览的一致性）<a href="https://www.w3.org/TR/CSS2/syndata.html#length-units" target="_blank" rel="noopener">关于一些长度单位的介绍</a>（有关于css像素描，图片来源于此）</p><p>设备分辨率对像素单元的影响：1px乘1px的区域被低分辨率设备（例如典型的计算机显示器）中的单个点覆盖，而同一区域被16个点覆盖 在更高分辨率的设备（如打印机）中。<strong>在不同的设备之间，1个CSS像素所代表的物理像素是可以变化的。</strong></p><p><img src="/img/h5adaptat/pixel2.png" alt=""></p><p><strong>DPR:</strong>设备像素比简称为dpr，其定义了物理像素和设备独立像素的对应关系。它的值可以按下面的公式计算得到：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">设备像素比 ＝ 物理像素 / 设备独立像素</span><br><span class="line"></span><br><span class="line">问题：iphone5 的dpr 是 2 屏幕宽度320px 那么它的设备物理像素宽是多少？（640）</span><br></pre></td></tr></table></figure><p>来看看图儿（内容来源<a href="https://www.quirksmode.org/mobile/viewports.html" target="_blank" rel="noopener">A tale of two viewports — part one</a>）</p><p>①CSS像素与设备像素完全重叠。②CSS像素拉伸，现在一个CSS像素与几个设备像素重叠。③CSS像素开始缩小,一个设备像素现在与几个CSS像素重叠。</p><p><img src="/img/h5adaptat/csspixels_100.gif" alt=""></p><p><strong>在同样一个设备上，1个CSS像素所代表的物理像素是可以变化的;</strong> </p><h3 id="2-2图像模糊的由来，1px边框问题"><a href="#2-2图像模糊的由来，1px边框问题" class="headerlink" title="2.2图像模糊的由来，1px边框问题"></a>2.2图像模糊的由来，1px边框问题</h3><p><strong>位图</strong>：是由像素（Pixel）组成的，像素是位图最小的信息单元，存储在图像栅格中。</p><p><strong>图像问题</strong>：理论上，1个位图像素对应于1个物理像素，图片可以完美清晰的展示。一个位图像素是栅格图像(如：png, jpg, gif等)的最小数据单元。在Retina屏幕下（此时dpr假设为2）200 ×200大小的图片，样式大小也设置为width:200px;,heigth:200px;此时1px像素被4个物理像素点填充。1个位图像素对应了4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊。(<a href="http://html-js.com/article/MobileWeb" target="_blank" rel="noopener"> </a><a href="http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041" target="_blank" rel="noopener"> 移动端高清、多屏适配方案</a>,此段内容观点和图片来源于此)</p><p><img src="/img/h5adaptat/color.jpg" alt="&#x79FB;&#x52A8;&#x7AEF;&#x9AD8;&#x6E05;&#x3001;&#x591A;&#x5C4F;&#x9002;&#x914D;&#x65B9;&#x6848;"></p><p>同理反过来在普通屏幕下（此时dpr假设为1），400 ×400大小的图片，样式大小也设置为width:200px;,heigth:200px;（我们习惯说此时用的2倍图）_。_一个物理像素点对应4个位图像素点，所以它的取色也只能通过一定的算法得到，显示结果就是一张只有原图像素总数四分之一的图，（我们称这个过程叫做downsampling）肉眼看上去图片不会模糊，但是会觉得图片缺少一些锐利度，或者是有点色差。</p><p><strong>1px 物理像素边框问题：</strong>在页面不设置放缩的情况下是很难实现的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/h5adaptat/2018-08-03_013838.png" alt=""></p><p>如图1倍屏，2倍屏，3倍屏，需要实现1px 物理像素边框border: 1px;，border: 0.5px；border: 0.33px; 然而有的浏览器并不能识别0.5px，0.33px。</p><h2 id="3-移动端页面适配的简单解决"><a href="#3-移动端页面适配的简单解决" class="headerlink" title="3.移动端页面适配的简单解决"></a>3.移动端页面适配的简单解决</h2><p>一些Relative lengths，rem,em vw,vh……此处用到了 rem ，rem的官方定义来一下~~（<a href="https://www.w3.org/TR/css3-values/#rem" target="_blank" rel="noopener">https://www.w3.org/TR/css3-values/#rem</a>）<strong>相对于根元素(即html元素)font-size计算值的倍数</strong>。</p><p><img src="/img/h5adaptat/2018-08-03_153716.png" alt=""></p><p>举个例子，如果页面的html的<strong>font-size</strong> 设置 为 20px,那么 1rem= 20px;</p><p>再举个例子：以iPhone6的设计稿为为基础来计算（因为我家设计师喜欢出iPhone6的稿子）</p><table><thead><tr><th style="text-align:left">设 备</th><th style="text-align:left">设备宽度</th><th style="text-align:left">根元素font-size/px</th><th style="text-align:left">屏幕宽</th></tr></thead><tbody><tr><td style="text-align:left">iPhone5</td><td style="text-align:left">320</td><td style="text-align:left">17.066（约等于）</td><td style="text-align:left">18.75rem</td></tr><tr><td style="text-align:left">(baseWidth)iPhone6</td><td style="text-align:left">375</td><td style="text-align:left">20</td><td style="text-align:left">18.75rem</td></tr><tr><td style="text-align:left">iPhone6 Plus</td><td style="text-align:left">414</td><td style="text-align:left">22.080（约等于）</td><td style="text-align:left">18.75rem</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//假设屏幕屏幕宽度 等于布局宽度 等于可视窗口宽度。</span><br><span class="line">// iPhone6 (18.75份是随便取的)</span><br><span class="line">以iPhone6为基础，屏幕宽度为375px，将屏幕宽度分成18.75份，每一份宽度为20px;</span><br><span class="line">设置html的font-size 为20px; 1rem = 20px;</span><br><span class="line">// iPhone5</span><br><span class="line">iPhon5，屏幕宽度为320px，将屏幕宽度分成18.75份，每一份宽度为17.066;</span><br><span class="line">设置html的font-size 为17.066; 1rem 约等于 17.066;</span><br><span class="line"></span><br><span class="line">以iphonp6的设计稿某div的高为20xp 宽为20px 写了一个样式</span><br><span class="line">.haha &#123;</span><br><span class="line">    width: 1rem;  /* iphonp6 下显示为20px */;</span><br><span class="line">    height: 1rem; /* iphonp6 下显示为20px */</span><br><span class="line">&#125;</span><br><span class="line">//上述那段css在iPhone5下 表达的宽高是多少了</span><br><span class="line">.haha &#123;</span><br><span class="line">    width: 1rem;  /* (320/18.75)px*/;</span><br><span class="line">    height: 1rem; /* (320/18.75)px*/</span><br><span class="line">&#125;</span><br><span class="line">// 看一组数字 320/375 = (320/18.75)/20 屏幕宽度比，等于设计稿图片放缩比。</span><br><span class="line">// 这样设计稿就成比例在不同宽度手机屏幕上面显示了</span><br></pre></td></tr></table></figure><p><strong>根元素fontSize公式：width/fontSize = baseWidth/baseFontSize</strong> </p><h3 id="3-1媒体查询和rem-适配"><a href="#3-1媒体查询和rem-适配" class="headerlink" title="3.1媒体查询和rem 适配"></a><strong>3.1媒体查询和rem 适配</strong></h3><p>先参考一下 比如微博和京东，咦~~ 用的是媒体查询设置。</p><p><img src="/img/h5adaptat/2018-08-03_163731.png" alt=""></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">640px</span>) and (min-width: <span class="number">414px</span>) &#123; </span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">22.08px</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">414px</span>) and (min-width: <span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">18.75px</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">375px</span>) &#123;    </span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">17.066px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 这样不是完全的运用了width/fontSize = baseWidth/baseFontSize 这个公式，只是选了几个宽度区间</span><br><span class="line">// 来设置</span><br></pre></td></tr></table></figure><p>相对于根元素(即html元素)的font-size值设置好了，然后就是按照设计稿写代码了，问题来了px单位转换成rem人工计算头有点大（在iPhone6 下面每一个都要除以20 换算出rem单位）。</p><p>比推荐的方法有两种一种</p><ul><li><a href="https://www.npmjs.com/package/px2rem" target="_blank" rel="noopener">px2rem</a> （npm安装）</li><li>Sass函数、混合宏功能来实现</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// 方法一  例子从文档上面抄下来的</span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>; <span class="comment">/*no*/</span></span><br><span class="line">&#125;</span><br><span class="line">//转换过后</span><br><span class="line"><span class="selector-class">.selector</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">7.5rem</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line">//方法二</span><br><span class="line">$rem-base: 20px !default; // baseFontSize </span><br><span class="line">@<span class="keyword">function</span> rem($value, $base-value: $rem-base) &#123;</span><br><span class="line">  $value: strip-unit($value) / strip-unit($base-value) * 1rem;</span><br><span class="line">  @if ($value == 0rem) &#123; $value: 0; &#125; // Turn 0rem into 0</span><br><span class="line">  @<span class="keyword">return</span> $value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">function</span> strip-unit($num) &#123;</span><br><span class="line">  @<span class="keyword">return</span> $num / ($num * <span class="number">0</span> + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.haha</span> &#123;</span><br><span class="line">    width: rem(150); //通过 rem($value, $base-value: $rem-base) 计算出来 7.5rem。</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>个人更喜欢方法一，因为别人写的UI组件通常用的是px。然后就是字体，字体大小建议不要转rem。</p><p>用媒体查询查询的方法就比较要关注手机屏幕宽度了（如果做得细致，还是要针对每个屏幕宽划分区间），且对于图片的问题还是没有解决。</p><h3 id="3-2viewport-缩放-rem-布局，js计算"><a href="#3-2viewport-缩放-rem-布局，js计算" class="headerlink" title="3.2viewport 缩放,rem 布局，js计算"></a><strong>3.2viewport 缩放,rem 布局，js计算</strong></h3><p>动态的设置根元素(即html元素)font-size的值，也有两种方式(通常代码在head加载，避免页面重绘)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法一 （iPhone 6尺寸作为设计稿基准）</span></span><br><span class="line"><span class="comment">//document.documentElement.clientWidth /18.75</span></span><br><span class="line"><span class="keyword">var</span> e = (<span class="built_in">document</span>.documentElement.clientWidth / <span class="number">375</span>) *<span class="number">20</span> ;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = e + <span class="string">"px"</span></span><br><span class="line">添加标签到HTML</span><br><span class="line">&lt;meta name=<span class="string">"viewport"</span> content=<span class="string">"width=device-width,initial-scale=1"</span>&gt;</span><br><span class="line">这样做就使得所有屏幕都是基于iphone6的设计稿等比例显示了</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 （iPhone 6尺寸作为设计稿基准）动态写入 viewport 放缩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = (<span class="built_in">document</span>.documentElement.clientWidth / <span class="number">375</span>) *<span class="number">20</span> ;</span><br><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = e + <span class="string">"px"</span></span><br><span class="line"><span class="keyword">var</span> initScale = <span class="number">1</span> / <span class="built_in">window</span>.devicePixelRatio; <span class="comment">// initScale  = 1/2;</span></span><br><span class="line">viewPortMeta = <span class="built_in">window</span>.document.createElement(<span class="string">"meta"</span>);</span><br><span class="line">viewPortMeta.setAttribute(<span class="string">"name"</span>, <span class="string">"viewport"</span>);</span><br><span class="line">viewPortMeta.setAttribute(<span class="string">"content"</span>, <span class="string">"width=device-width, initial-scale="</span> +</span><br><span class="line">      initScale + <span class="string">", user-scalable=no"</span>);</span><br><span class="line"><span class="comment">//iphone6 的物理像素是 750pt*1334pt</span></span><br><span class="line"><span class="comment">// initScale  = 1/2</span></span><br><span class="line"><span class="comment">// device-width = 375</span></span><br><span class="line"><span class="comment">// 页面可是视口大小 = 750px; 布局视口大小也就等于750px</span></span><br><span class="line"><span class="comment">// 此时一个物理像素 对应 一个css像素  （此时图片模糊问题就解决了）</span></span><br></pre></td></tr></table></figure><p>方法一：有1px物理像素问题，和图片问题（网上有众多解决方法可以看看），</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JS判断是否支持0 .5 px的边框， 是的话， 则加上hairlines的类名。（以iphone6为例）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> testElem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">testElem.style.border = <span class="string">'.5px solid #000'</span>;</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(testElem);</span><br><span class="line"></span><br><span class="line"><span class="comment">//当div存在</span></span><br><span class="line"><span class="keyword">if</span> (testElem.offsetHeight == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).classList.add(<span class="string">'hairlines'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加完hairlines类名后，则删除div</span></span><br><span class="line"><span class="built_in">document</span>.body.removeChild(testElem);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 图片的可以考虑实际位置，加载不同倍数的图片（个人觉得没有必要都用2倍图）</span></span><br><span class="line"><span class="comment">// 很多网站 采用的都是这个方法</span></span><br></pre></td></tr></table></figure><p>方法二： <strong>安卓机的dpr神奇</strong>，且部分机型放缩情况怪异，所以通常会在iphone下考虑放缩，安卓选择放弃，安卓机的做法就跟方法一 一样了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//计算 initScale 的修改</span><br><span class="line">dpr = win.devicePixelRatio;</span><br><span class="line">dpr = isIphone ? (dpr &gt;= 3 ? 3 : (dpr &gt;= 2 ? 2 : 1)) : 1;</span><br><span class="line">initScale = 1 / dpr;</span><br></pre></td></tr></table></figure><p>方法二：需要注意字体的问题，不建议字体跟着屏幕大小变化。通常用js的方法还会给根元素多加一个类或属性来控制字体显示。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//给&lt;html&gt;元素添加data-dpr属性，并且动态改写data-dpr的值，或者动态写一个dpr的class到根元素上</span><br><span class="line">//eg. &lt;html data-dpr="1" class="dpr1"&gt;</span><br><span class="line">// 动态写dpr的class </span><br><span class="line">@<span class="keyword">mixin</span> font-dpr ($font-size) &#123;</span><br><span class="line">  font-size: $font-size;</span><br><span class="line">  <span class="selector-class">.dpr1</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: $font-size * <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.dpr2</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: $font-size * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.dpr3</span> &amp; &#123;</span><br><span class="line">    <span class="attribute">font-size</span>:  $font-size * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//动态改写data-dpr的值</span><br><span class="line">@<span class="keyword">mixin</span> font-dpr($font-size)&#123;</span><br><span class="line">  font-size: $font-size;</span><br><span class="line">  <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: $font-size * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-attr">[data-dpr="3"]</span> &amp; &#123;</span><br><span class="line">      <span class="attribute">font-size</span>: $font-size * <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3vw适配方案（以后可能的方案）"><a href="#3-3vw适配方案（以后可能的方案）" class="headerlink" title="3.3vw适配方案（以后可能的方案）"></a>3.3vw适配方案（以后可能的方案）</h3><blockquote><p>vw unit： Equal to 1% of the width of the initial containing block.</p><p>vh unit：Equal to 1% of the height of the initial containing block.</p></blockquote><p> 1vw = 1%视口宽度，看到这个表达是不是心里面一惊喜，3.2的方法就是将屏幕分成多少份，然后根元素(即html元素)的font-size值，每一份用rem来表示。现在vw的出现就更符合技术需要了因为它自动将视口宽度分成了100份。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//假设屏幕屏幕宽度 等于布局宽度 等于可视窗口宽度。</span><br><span class="line">//iPhone 6尺寸作为设计稿基准</span><br><span class="line">//&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1&quot;&gt;</span><br><span class="line">// 此时 1vw = 375/100 =3.75px;</span><br><span class="line">// 此时就差将px 转换为 vw了（此处Sass函数举个例子）</span><br><span class="line"></span><br><span class="line">$base_width: 375;</span><br><span class="line">@function pxToVW($px) &#123;</span><br><span class="line">    @return ($px / $base_width) * 100vw;</span><br><span class="line">&#125;</span><br><span class="line">// iPhone 6 设计稿中 某 div 宽度为 75 px 高度 75px 表达如下</span><br><span class="line">.haha &#123;</span><br><span class="line">    width： pxToVW(75); // 20vw</span><br><span class="line">    height: pxToVW(75); // 20vw</span><br><span class="line">&#125;</span><br><span class="line">//上述那段css在iPhone5下 表达的宽高是多少了</span><br><span class="line">.haha &#123;</span><br><span class="line">    width： pxToVW(75); // 20vw   320/100*20 = 64px</span><br><span class="line">    height: pxToVW(75); // 20vw   320/100*20 = 64px</span><br><span class="line">&#125;</span><br><span class="line">// 看下数字题 64/75 = 320/375  设计稿在屏幕上的显示等比放缩了</span><br></pre></td></tr></table></figure><p>vw好用,但它还存在兼容性问题，可以通过这个网站查阅 <a href="https://caniuse.com/#search=vw" target="_blank" rel="noopener">Can I use</a>。不过也有大神写了文章介绍怎么在实际项目去使用vw。</p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4.小结"></a>4.小结</h2><p>文中例子比较粗糙，理解不准确之处，还请教正。关于移动端适配部分方法，本文也是描述基础思想原理，还有很多细节，兼容问题没有提及，要真的去理解它，还需多看文档，代码实践。</p><p>终于写完了，没写之前和写了之后认知看法又不一样了。</p>]]></content>
      
      <categories>
          
          <category> Xiaobu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise</title>
      <link href="/promise/"/>
      <url>/promise/</url>
      <content type="html"><![CDATA[<h2 id="从callback和异步说起："><a href="#从callback和异步说起：" class="headerlink" title="从callback和异步说起："></a>从callback和异步说起：</h2><p>JS是一门单线程语言，通过回调函数来实现异步和并发。由于回调函数的多层嵌套而造成代码的阅读性差和逻辑调理混乱被称之为回调地狱。为了解决回调地狱的问题，相继出现了promise和 await/async.</p><a id="more"></a><h3 id="Promise-Callback-对比"><a href="#Promise-Callback-对比" class="headerlink" title="Promise   Callback 对比"></a>Promise   Callback 对比</h3><p>1 promise更好的解耦 </p><p>promise将发起异步请求放在传入Promise的函数体中，而在获得异步返回后的行为则放在了then中，通过resolve或者reject来触发then中的事件处理函数，很好的做到解耦。</p><p>callback方式，直接传递callback handler。这使得具体callback失去了对具体事件处理调用的次数和时机权利</p><p>2 callback回调地狱 </p><p>由于复杂的业务逻辑，常常需要嵌套的调用回调函数，使得代码逻辑混杂难以阅读和维护。</p><p>Promise通过链式调用，在很大程度上缓解了这一问题，在更新的async/await中，更好的解决了这一问题。async/await可以看成是promise的语法糖。</p><h3 id="什么是promise"><a href="#什么是promise" class="headerlink" title="什么是promise"></a>什么是promise</h3><p>承诺 承诺，一但定下立即生效，在未来的某个时间一定返回结果.</p><p>承诺，一但定下立即生效，在未来的某个时间一定返回结果.</p><p>分析promise</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Promise结构</span></span><br><span class="line"><span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// resolve(futureValue)</span></span><br><span class="line">    <span class="comment">// reject(futureValue)</span></span><br><span class="line">&#125;).then(fullfilledHandler, rejectedHandler)</span><br></pre></td></tr></table></figure><h4 id="future-value"><a href="#future-value" class="headerlink" title="future value"></a>future value</h4><p>结果产生在未来的某个时刻，结果是未知的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">xPromise,yPromise</span>) </span>&#123;</span><br><span class="line"><span class="comment">// `Promise.all([ .. ])` takes an array of promises,</span></span><br><span class="line"><span class="comment">// and returns a new promise that waits on them</span></span><br><span class="line"><span class="comment">// all to finish</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.all( [xPromise, yPromise] )</span><br><span class="line"></span><br><span class="line"><span class="comment">// when that promise is resolved, let's take the</span></span><br><span class="line"><span class="comment">// received `X` and `Y` values and add them together.</span></span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">values</span>)</span>&#123;</span><br><span class="line"><span class="comment">// `values` is an array of the messages from the</span></span><br><span class="line"><span class="comment">// previously resolved promises</span></span><br><span class="line"><span class="keyword">return</span> values[<span class="number">0</span>] + values[<span class="number">1</span>];</span><br><span class="line">&#125; );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// `fetchX()` and `fetchY()` return promises for</span></span><br><span class="line"><span class="comment">// their respective values, which may be ready</span></span><br><span class="line"><span class="comment">// *now* or *later*.</span></span><br><span class="line">add( fetchX(), fetchY() )</span><br><span class="line"></span><br><span class="line"><span class="comment">// we get a promise back for the sum of those</span></span><br><span class="line"><span class="comment">// two numbers.</span></span><br><span class="line"><span class="comment">// now we chain-call `then(..)` to wait for the</span></span><br><span class="line"><span class="comment">// resolution of that returned promise.</span></span><br><span class="line">.then( <span class="function"><span class="keyword">function</span>(<span class="params">sum</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( sum ); <span class="comment">// that was easier!</span></span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h4 id="completion-event-error-event"><a href="#completion-event-error-event" class="headerlink" title="completion event, error event"></a>completion event, error event</h4><pre><code>也可以把Promise看成两种不同的事件及其回调的整合。回调函数的异步实现机制是通过绑定事件来触发回调函数，从而进行异步控制和并发。Promise则通过resolve和reject来触发完成事件或者拒绝事件，成功转入到fullfilledHandler,失败转入到rejectedHandler</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//resolve(1) 触发 then的 第一个handler</span></span><br><span class="line">    <span class="comment">//reject (2) 触发 then的 第二个handler</span></span><br><span class="line">&#125;.then(fullfilledHander, rejectedHandler)</span><br></pre></td></tr></table></figure><p>promise的核心是then方法，then方法做的事情类似于回调函数做的事情。在完成promise函数体内部的任务后，通过resolve或者reject来触发。类似于绑定事件触发回调函数，promise总是异步的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    r(<span class="number">1</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>上面的例子表明：1. then中的代码块是异步运行的，即便没有等待异步事件。   2.Promise一旦被new出来会立即执行。</p><h3 id="Promise-3大状态"><a href="#Promise-3大状态" class="headerlink" title="Promise 3大状态"></a>Promise 3大状态</h3><p>Promise有pending， resolved, rejected三个状态 刚生成的promise处于pending状态，在resolve了之后转入到resolved状态，在reject之后转入到rejected状态。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">&#125;) <span class="comment">//pending</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">1</span>)</span><br><span class="line">&#125;) <span class="comment">//resolved</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    reject(<span class="number">1</span>)</span><br><span class="line">&#125;) <span class="comment">// rejected</span></span><br></pre></td></tr></table></figure><p>[[PromiseStatus]]: “rejected” // resolved, pending</p><p> [[PromiseValue]]: value // 通过 resolve, reject 函数传入</p><h3 id="Most-important-characteristic-trust"><a href="#Most-important-characteristic-trust" class="headerlink" title="Most important characteristic trust"></a>Most important characteristic trust</h3><ul><li>Call the callback too early</li><li>Call the callback too late (or never)</li><li>Call the callback too few or too many times</li><li>Fail to pass along any necessary environment/parameters</li><li>Swallow any errors/exceptions that may happen</li></ul><h4 id="call-the-callback-too-early"><a href="#call-the-callback-too-early" class="headerlink" title="call the callback  too early"></a>call the callback  too early</h4><p>Zalgo-like effects</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">result</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">ajax( <span class="string">"..pre-cached-url.."</span>, result );</span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><h4 id="Call-the-callback-too-late-or-never"><a href="#Call-the-callback-too-late-or-never" class="headerlink" title="Call the callback too late (or never)"></a>Call the callback too late (or never)</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">p.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"C"</span> );</span><br><span class="line">&#125; );</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"A"</span> );</span><br><span class="line">&#125; );</span><br><span class="line">p.then( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">"B"</span> );</span><br><span class="line">&#125; );</span><br><span class="line"><span class="comment">// A B C</span></span><br></pre></td></tr></table></figure><p>call the callback too earyly 和 call the callback too late 会导致竞态条件（race condition),而导致程序异常。(竞态条件是指程序推进顺序不同而造成结果不同）</p><p>promise 一旦 resolve或者reject，注册的所有的then会 imediately 触发（这里的imediately是异步的立即的），有序触发如上例。</p><h4 id="Call-the-callback-too-few-or-too-many-times"><a href="#Call-the-callback-too-few-or-too-many-times" class="headerlink" title="Call the callback too few or too many times"></a>Call the callback too few or too many times</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">1</span>), <span class="number">300</span>)</span><br><span class="line">    reject(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">result</span>=&gt;</span><span class="built_in">console</span>.log(result), error=&gt;<span class="built_in">console</span>.log(error))</span><br></pre></td></tr></table></figure><p>在一个promise中只能触发第一个resolve或者reject。resolve或者reject将会把value传递给then.resolve传递给第一个参数，reject传递个第二个参数.</p><h4 id="Fail-to-pass-along-any-necessary-environment-parameters"><a href="#Fail-to-pass-along-any-necessary-environment-parameters" class="headerlink" title="Fail to pass along any necessary environment/parameters"></a>Fail to pass along any necessary environment/parameters</h4><p>  promise通过resolve/reject来传递参数，通过闭包来储存环境。（注意: resolve/rejct只有第一个参数会被传递，其他参数会被忽略，所以如果要传递多个参数需要进行封装）</p><h4 id="Swallow-any-errors-exceptions-that-may-happen"><a href="#Swallow-any-errors-exceptions-that-may-happen" class="headerlink" title="Swallow any errors/exceptions that may happen"></a>Swallow any errors/exceptions that may happen</h4><p>当promise的函数体中出现run time exception时，会将runtime exception传递给then的第二个参数（或者catch)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    f()</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><p>catch函数可以直接获取reject传递的参数，可以把它当做then的一个特例。被catch或者then通过第二个参数捕获到的错误不会报出exception。同时，如果有没有被catch的reject的value，会以exception的方式来显示。杜绝错误被吞咽而不被发现。</p><h3 id="thenable-与-ducktype-is-a-is-like-a"><a href="#thenable-与-ducktype-is-a-is-like-a" class="headerlink" title="thenable 与 ducktype(is a, is like a)"></a>thenable 与 ducktype(is a, is like a)</h3><p>ducktype常用与弱类型语言的类型判断。强类型语言判断是否是一个种类，要判断他是否是这个类型。而对于弱类型语言只需要判断他像这个类型，又能做这个类型能做的事情。由此，引出了thenable对象。thenable是类型为Object或者function，其拥有then方法（包括其原型链上有then方法)。</p><p>thenable按照ducktype的说法是可以当做promise的，但实际上他并不能作为promise。</p><p>粗略判断promise的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (</span><br><span class="line">p !== <span class="literal">null</span> &amp;&amp;</span><br><span class="line">(</span><br><span class="line"><span class="keyword">typeof</span> p === <span class="string">"object"</span> ||</span><br><span class="line"><span class="keyword">typeof</span> p === <span class="string">"function"</span></span><br><span class="line">) &amp;&amp;</span><br><span class="line"><span class="keyword">typeof</span> p.then === <span class="string">"function"</span></span><br><span class="line">) &#123;</span><br><span class="line"><span class="comment">// assume it's a thenable!</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// not a thenable</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子(from You Don’t Know JS)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = &#123;</span><br><span class="line">    then: <span class="function"><span class="keyword">function</span>(<span class="params">cb,errcb</span>) </span>&#123;</span><br><span class="line">        cb( <span class="number">42</span> );</span><br><span class="line">        errcb( <span class="string">"evil laugh"</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">p</span><br><span class="line">.then(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fulfilled</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( val ); <span class="comment">// 42</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">rejected</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// oops, shouldn't have run</span></span><br><span class="line">        <span class="built_in">console</span>.log( err ); <span class="comment">// evil laugh</span></span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>可以作为resolve, reject的参数</p><ol><li>value</li><li>thenable</li><li>promise</li></ol><p>不同的处理，</p><ul><li>value会被直接传给then</li><li>thenable会被unwrap，并且会纠正thenable使之可以被当成promise接受</li><li>接受promise,并以promise resolve/reject的结果来填充 [[PromiseStatus]]  [[PromiseValue]]</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> thenable1 = &#123;</span><br><span class="line">    then: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(thenable1)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)   <span class="comment">// output 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thenable2 = &#123;</span><br><span class="line">    then:<span class="function">(<span class="params">cb, errcb</span>) =&gt;</span> &#123;</span><br><span class="line">        cb(<span class="string">'resolve'</span>);</span><br><span class="line">        errcb(<span class="string">'reject'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(thenable2);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> <span class="built_in">console</span>.log(res), err =&gt; <span class="built_in">console</span>.log(err))</span><br></pre></td></tr></table></figure><h3 id="then-chain"><a href="#then-chain" class="headerlink" title="then, chain"></a>then, chain</h3><p>then的返回一定是一个promise，如果不是那么就把他转换成。由于then的返回值是promise所以，可以形成Promise链。 对于多个Promise具有强依赖前驱后继关系的时候使用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="number">2</span>).then()</span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: 1&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">r</span>) =&gt;</span> &#123;r(<span class="number">3</span>)&#125;) &#125;) </span><br><span class="line"><span class="comment">// Promise &#123;&lt;resolved&gt;: undefined&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">1</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">then</span>: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'thenalbe'</span>) &#125;</span><br><span class="line">&#125;) <span class="comment">// thenable</span></span><br></pre></td></tr></table></figure><h3 id="Promise与闭包"><a href="#Promise与闭包" class="headerlink" title="Promise与闭包"></a>Promise与闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> service = <span class="function"><span class="keyword">function</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> baseUrl = getBaseURL()</span><br><span class="line">    <span class="keyword">const</span> url = baseURL + path</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(resolve, reject)&#123;</span><br><span class="line">        <span class="keyword">if</span>(code === <span class="number">0</span> &amp;&amp; res) resolve(res)</span><br><span class="line">        <span class="keyword">else</span> reject(errMsg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为Promise对象创建后立即执行，所以通常会把他封装在函数中。之前也提到过，通过闭包来保存enviroment</p><p>Promise.resolve Promise.reject</p><h3 id="Promise-all-Promise-race"><a href="#Promise-all-Promise-race" class="headerlink" title="Promise.all ,Promise.race,"></a>Promise.all ,Promise.race,</h3><p>对于多个promise，要求全部完成，而各个promise之间又没有强依赖的时候使用</p><p>Promise.all([promise1, promise2])</p><p>对于都个promise，只要有一个完成就可以执行下一步操作的情况</p><p>Promise.race([promise1, promise2])</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">getAccessPoint() &#123; </span><br><span class="line"> <span class="keyword">var</span> timeout;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Promise</span>.race([bridge.getCurrentAP(),<span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; </span><br><span class="line">       timeout = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">             reject(<span class="string">'Timeout'</span>); </span><br><span class="line">       &#125;, <span class="number">2000</span>);<span class="comment">//timeout of getting access point from app.</span></span><br><span class="line">       &#125;)]).then(<span class="function">(<span class="params">payload</span>) =&gt;</span> &#123;</span><br><span class="line">            clearTimeout(timeout); </span><br><span class="line">            <span class="keyword">if</span> (!payload) &#123; <span class="keyword">return</span>; &#125; </span><br><span class="line">            <span class="keyword">if</span> (payload.uc &amp;&amp; payload.uc.length &gt; <span class="number">0</span>) &#123; </span><br><span class="line">                GLOBAL_API.conf.apiBase = payload.uc[<span class="number">0</span>] + <span class="string">'/'</span></span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">if</span> (payload.oss &amp;&amp; payload.oss.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                GLOBAL_API.conf.ossBase = payload.oss[<span class="number">0</span>] + <span class="string">'/'</span> &#125; </span><br><span class="line">        &#125;).catch(<span class="function">(<span class="params">msg</span>) =&gt;</span> &#123; </span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'getAccessPoint'</span>, msg); </span><br><span class="line">        &#125;) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Dawn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器与Node环境下的EventLoop</title>
      <link href="/eventLoop/"/>
      <url>/eventLoop/</url>
      <content type="html"><![CDATA[<ul><li>什么是Event Loop？</li><li>Event Loop是遵循什么规则实现的？</li><li>Event Loop在浏览器与Node中的实现原理有什么区别？</li></ul><blockquote><p>基于JavaScript语言的单线程特点，所有的任务排列在JS的主线程中执行，即“任务队列”。<br>JS主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为Event Loop（事件循环）。</p></blockquote><hr><blockquote><p>浏览器中与node中事件循环与执行机制不同，不可混为一谈。<br>浏览器的Event loop是在HTML5中定义的规范，而node中则由libuv库实现。</p></blockquote><hr><h3 id="1、浏览器环境中的Event-Loop"><a href="#1、浏览器环境中的Event-Loop" class="headerlink" title="1、浏览器环境中的Event Loop"></a>1、浏览器环境中的Event Loop</h3><ul><li><p>任务队列：<br>宏任务(MacroTask)：script 中代码、setTimeout、setInterval、I/O、UI render；<br>微任务(MicroTask)： Promise、Object.observe（已废弃）、MutationObserver（H5新特性）。</p></li><li><p>执行顺序：<br>执行完主线程<code>&lt;script&gt;</code>中的同步任务；<br>取出 Microtask 队列中任务执行直到清空；<br>取出 Macrotask 队列中一个任务执行；<br>重复 第2步 和 第3步 。</p></li></ul><hr><h3 id="2、Node环境中的Event-Loop"><a href="#2、Node环境中的Event-Loop" class="headerlink" title="2、Node环境中的Event Loop"></a>2、Node环境中的Event Loop</h3><ul><li><p>任务队列：<br>microTask：微任务；<br>nextTick：process.nextTick；<br>timers：执行满足条件的 setTimeout 、setInterval 回调；<br>I/O callbacks：能否有已完成的 I/O 操作的回调函数，来自上一轮的 poll 残留；<br>idle/prepare ：闲置阶段；<br>poll：等待还没完成的 I/O 事件，会因 timers 和超时时间等结束等待；<br>check：执行 setImmediate 的回调；<br>close callbacks：关闭所有的 closing handles ，少量 onclose 事件。</p></li><li><p>执行顺序：<br><strong>注</strong>：从返回结果的表现状况来看，大致与浏览器环境下的结果相同。</p></li><li>首次进入循环：同步代码–&gt; 执行process.nextTick()–&gt; 进入poll(轮询阶段，执行Microtask Queue)–&gt; 开始循环。</li><li>循环中的操作：<br>清空当前循环内的 Timers Queue，清空 NextTick Queue，清空 Microtask Queue；<br>清空当前循环内的 I/O Queue，清空 NextTick Queue，清空 Microtask Queue；<br>idle/prepare(闲置阶段)；<br>poll(轮询阶段)；<br>清空当前循环内的 Check Queue，清空 NextTick Queue，清空 Microtask Queue；<br>清空当前循环内的 Close Queue，清空 NextTick Queue，清空 Microtask Queue；<br>进入下轮循环。</li></ul><h3 id="3、代码用例："><a href="#3、代码用例：" class="headerlink" title="3、代码用例："></a>3、代码用例：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;golb1&apos;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;timeout1&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;timeout1_nextTick&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;timeout1_promise&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;timeout1_then&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setImmediate(function() &#123;</span><br><span class="line">    console.log(&apos;immediate1&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;immediate1_nextTick&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;immediate1_promise&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;immediate1_then&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(function() &#123;</span><br><span class="line">    console.log(&apos;glob1_nextTick&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&apos;glob1_promise&apos;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&apos;glob1_then&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;timeout2&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;timeout2_nextTick&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;timeout2_promise&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;timeout2_then&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">process.nextTick(function() &#123;</span><br><span class="line">    console.log(&apos;glob2_nextTick&apos;);</span><br><span class="line">&#125;)</span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&apos;glob2_promise&apos;);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&apos;glob2_then&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">setImmediate(function() &#123;</span><br><span class="line">    console.log(&apos;immediate2&apos;);</span><br><span class="line">    process.nextTick(function() &#123;</span><br><span class="line">        console.log(&apos;immediate2_nextTick&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    new Promise(function(resolve) &#123;</span><br><span class="line">        console.log(&apos;immediate2_promise&apos;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(function() &#123;</span><br><span class="line">        console.log(&apos;immediate2_then&apos;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>文章部分理论参考自：<a href="https://yiweifen.com/v-1-332899.html" target="_blank" rel="noopener">https://yiweifen.com/v-1-332899.html</a></p>]]></content>
      
      <categories>
          
          <category> Emfan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript正则表达式--应用篇</title>
      <link href="/regExp-3/"/>
      <url>/regExp-3/</url>
      <content type="html"><![CDATA[<p>在学习了上一篇正则语法篇，是不是迫不及待想知道正则如何在工作中应用呢？<br><a id="more"></a></p><h3 id="应用1"><a href="#应用1" class="headerlink" title="应用1"></a>应用1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">难度：**</span><br><span class="line">题目描述</span><br><span class="line">判断输入是否是正确的邮箱格式</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailableEmail</span>(<span class="params">sEmail</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给自己5分钟，尝试一下…</p><hr><p><strong>解题思路：</strong></p><ol><li>把一个正常的邮箱格式拆成4部分，分别定义正则</li></ol><p><strong>难点：</strong></p><ol><li>如何拆分邮箱格式</li></ol><p><strong>答案:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAvailableEmail</span>(<span class="params">sEmail</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^[\w\.]+\@[\w\.]+[\w]+$/</span>.test(sEmail);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="应用2"><a href="#应用2" class="headerlink" title="应用2"></a>应用2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">难度：***</span><br><span class="line">题目描述</span><br><span class="line">css 中经常有类似 background-image 这种通过 - 连接的字符，</span><br><span class="line">通过 javascript 设置样式的时候需要将这种样式转换成 backgroundImage 驼峰格式，</span><br><span class="line">请完成此转换功能</span><br><span class="line">1. 以 - 为分隔符，将第二个起的非空单词首字母转为大写</span><br><span class="line">2. -webkit-border-image 转换后的结果为 webkitBorderImage</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css2Dom</span>(<span class="params">sName</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给自己5分钟，尝试一下…</p><hr><p><strong>解题思路：</strong></p><ol><li>处理第一个字母为分隔符</li><li>分隔符后，第二个起的非空字母转为大写</li></ol><p><strong>难点：</strong></p><ol><li>如何用正则定义，第二个起的非空字母</li></ol><p><strong>答案:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不分组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css2Dom</span>(<span class="params">sName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> sName.replace(<span class="regexp">/\-[a-z]/g</span> , <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> b == <span class="number">0</span> ? a.replace(<span class="string">'-'</span>,<span class="string">''</span>) : a.replace(<span class="string">'-'</span>,<span class="string">''</span>).toUpperCase();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">css2Dom</span>(<span class="params">sName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> sName.replace(<span class="regexp">/^\-/</span>, <span class="string">''</span>)</span><br><span class="line">      .replace(<span class="regexp">/(\-\w)/g</span>, <span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a[<span class="number">1</span>].toUpperCase();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用3"><a href="#应用3" class="headerlink" title="应用3"></a>应用3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">难度：***</span><br><span class="line">题目描述</span><br><span class="line">按所给的时间格式输出指定的时间</span><br><span class="line">yyyy: 年份，2014</span><br><span class="line">yy: 年份，14</span><br><span class="line">MM: 月份，09</span><br><span class="line">M: 月份, 9</span><br><span class="line">dd: 日期，05</span><br><span class="line">d: 日期, 5</span><br><span class="line"></span><br><span class="line">输入</span><br><span class="line">formatDate(new Date(), &apos;yyyy-M-dd&apos;)</span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">2018-7-30</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">t, f</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给自己5分钟，尝试一下…</p><hr><p><strong>解题思路：</strong></p><ol><li>解析日期格式种类</li><li>调用日期函数，返回对应的日期格式</li></ol><p><strong>难点：</strong></p><ol><li>如何解析日期格式</li></ol><p><strong>答案:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatDate</span>(<span class="params">t, f</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        yyyy: t.getFullYear(),</span><br><span class="line">        yy: (<span class="string">""</span>+ t.getFullYear()).slice(<span class="number">-2</span>),</span><br><span class="line">        M: t.getMonth()+<span class="number">1</span>,</span><br><span class="line">        MM: (<span class="string">"0"</span>+ (t.getMonth()+<span class="number">1</span>)).slice(<span class="number">-2</span>),</span><br><span class="line">        d: t.getDate(),</span><br><span class="line">        dd: (<span class="string">"0"</span> + t.getDate()).slice(<span class="number">-2</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> f.replace(<span class="regexp">/([a-z]+)/ig</span>, <span class="function"><span class="keyword">function</span>(<span class="params">r</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj[r];</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="应用4"><a href="#应用4" class="headerlink" title="应用4"></a>应用4</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">难度：****</span><br><span class="line">题目描述</span><br><span class="line">将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff</span><br><span class="line">1. rgb 中每个,后面的空格数量不固定</span><br><span class="line">2. 十六进制表达式使用六位小写字母</span><br><span class="line">3. 如果输入不符合 rgb 格式，返回原始输入</span><br><span class="line"></span><br><span class="line">示例1</span><br><span class="line">输入： &apos;rgb(255, 255, 255)&apos;</span><br><span class="line">输出： #ffffff</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rgb转十六进制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hex</span>(<span class="params">sRGB</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>给自己5分钟，尝试一下…</p><hr><p><strong>解题思路：</strong></p><ol><li>定义正则：rgb颜色字符串格式</li><li>取出rgb对应的10进制数字</li><li>10进制转16进制小写字符并返回</li></ol><p><strong>难点：</strong></p><ol><li>用正则定义rgb格式，考验基本功了</li><li>rgb中每个逗号后面的空格数量不固定，提升了取rgb 10 进制数字难度</li></ol><p><strong>答案:</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 rgb 颜色字符串转换为十六进制的形式，如 rgb(255, 255, 255) 转为 #ffffff</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hex</span>(<span class="params">sRGB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^rgb\((\d&#123;1,3&#125;),\s*(\d&#123;1,3&#125;),\s*(\d&#123;1,3&#125;)\)$/</span>;</span><br><span class="line">    <span class="keyword">return</span> sRGB.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">a, r, g, b</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 10进制转16进制</span></span><br><span class="line">        r = <span class="built_in">parseInt</span>(r).toString(<span class="number">16</span>);</span><br><span class="line">        g = <span class="built_in">parseInt</span>(g).toString(<span class="number">16</span>);</span><br><span class="line">        b = <span class="built_in">parseInt</span>(b).toString(<span class="number">16</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 16进制不足两位补0</span></span><br><span class="line">        r = r.length &gt; <span class="number">1</span> ? r : <span class="string">'0'</span> + r;</span><br><span class="line">        g = g.length &gt; <span class="number">1</span> ? g : <span class="string">'0'</span> + g;</span><br><span class="line">        b = b.length &gt; <span class="number">1</span> ? b : <span class="string">'0'</span> + b;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">'#'</span> + r + g +b;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 精简版</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgb2hex</span>(<span class="params">sRGB</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^rgb\((\d&#123;1,3&#125;),\s*(\d&#123;1,3&#125;),\s*(\d&#123;1,3&#125;)\)$/</span>;</span><br><span class="line">    <span class="keyword">return</span> sRGB.replace(reg, <span class="function"><span class="keyword">function</span>(<span class="params">a, r, g, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'#'</span> + (<span class="string">'0'</span>+(+r).toString(<span class="number">16</span>)).slice(<span class="number">-2</span>) + (<span class="string">'0'</span>+(+g).toString(<span class="number">16</span>)).slice(<span class="number">-2</span>) + (<span class="string">'0'</span>+(+b).toString(<span class="number">16</span>)).slice(<span class="number">-2</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><ul><li>正则可以精简代码，锻炼基础逻辑</li><li>便于阅读优秀框架源码，理解核心正则语句</li><li>对正则了解的越多，使用场景就越多</li></ul><h3 id="在线工具"><a href="#在线工具" class="headerlink" title="在线工具"></a>在线工具</h3><ul><li><a href="https://regexr.com/" target="_blank" rel="noopener">国外 - 正则在线测试</a></li><li><a href="http://tool.chinaz.com/regex/" target="_blank" rel="noopener">国内 - 站长在线测试</a></li><li><a href="https://www.baidufe.com/fehelper" target="_blank" rel="noopener">插件 - FeHelper</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="noopener">JavaScript RegExp 对象</a></li><li><a href="https://www.baidufe.com/item/eb10deb92f2c05ca32cf.html" target="_blank" rel="noopener">javascript正则表达式</a></li><li><a href="https://www.cnblogs.com/myzhibie/p/4365142.html" target="_blank" rel="noopener">js正则及常用方法函数总结</a></li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript正则表达式--语法篇</title>
      <link href="/regExp-2/"/>
      <url>/regExp-2/</url>
      <content type="html"><![CDATA[<p>使用正则的过程中可能对Js正则的语法记得不太牢，顺便也整理了一下，列在这里。<br><a id="more"></a></p><h2 id="正则对象"><a href="#正则对象" class="headerlink" title="正则对象"></a>正则对象</h2><p>（1）构造函数方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = new RegExp(&apos;abc&apos;, &apos;gi&apos;);</span><br></pre></td></tr></table></figure></p><p>第一个参数是正则的内容，第二个参数是修饰符，修饰符通常有三种，i,g,m，i表示的含义是忽略大小写进行匹配，g表示全局匹配即匹配到第一个之后不停止继续匹配，m表示多行匹配，更改^和$的含义，匹配任意一行的行首和行尾。</p><p>（2）字面量方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var reg = /abc/gi;</span><br></pre></td></tr></table></figure></p><p>两个斜杠之间的是定义的正则内容，最后一个斜杠之后的是修饰符，这种方式比第一种简单高效，所以通常使用第二种方式来定义正则。</p><p>（3）方法</p><table><thead><tr><th>方法名</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_test_regexp.asp" target="_blank" rel="noopener">test</a></td><td>RegExpObject.test(string)</td><td>检测字符串是否与正则匹配</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_exec_regexp.asp" target="_blank" rel="noopener">exec</a></td><td>RegExpObject.exec(string)</td><td>检索字符串中的正则表达式的匹配</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_regexp_compile.asp" target="_blank" rel="noopener">compile</a></td><td>RegExpObject.compile(regexp,modifier)</td><td>对正则表达式进行编译</td></tr></tbody></table><p>（4） 支持正则表达式的String对象的方法</p><table><thead><tr><th>方法名</th><th>语法</th><th>描述</th></tr></thead><tbody><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_search.asp" target="_blank" rel="noopener">search</a></td><td>str.search(regexp)</td><td>检索与正则表达式相匹配的值</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_match.asp" target="_blank" rel="noopener">match</a></td><td>str.match(regexp)</td><td>找到一个或多个正则表达式的匹配</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace</a></td><td>str.replace(regexp,replacement)</td><td>替换与正则表达式匹配的子串</td></tr><tr><td><a href="http://www.w3school.com.cn/jsref/jsref_split.asp" target="_blank" rel="noopener">split</a></td><td>str.split(regexp, howmany)</td><td>把字符串分割为字符串数组</td></tr></tbody></table><h2 id="正则的字符"><a href="#正则的字符" class="headerlink" title="正则的字符"></a>正则的字符</h2><h3 id="一、元字符"><a href="#一、元字符" class="headerlink" title="一、元字符"></a>一、元字符</h3><table><thead><tr><th>元字符</th><th>对应说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符之外的任意字符</td></tr><tr><td>\w</td><td>匹配字母数字下划线，等同于:[a-zA-Z0-9]</td></tr><tr><td>\s</td><td>匹配任意空白字符</td></tr><tr><td>\d</td><td>匹配数字，等同于[0-9]</td></tr><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>&#124;</td><td>或匹配，如 /x&#124;y/ 匹配x或y两个字符</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><h3 id="二、重复匹配"><a href="#二、重复匹配" class="headerlink" title="二、重复匹配"></a>二、重复匹配</h3><table><thead><tr><th>匹配字符</th><th>对应说明</th></tr></thead><tbody><tr><td>*</td><td>重复出现零次或多次</td></tr><tr><td>+</td><td>重复出现一次或多次</td></tr><tr><td>?</td><td>重复出现零次或一次</td></tr><tr><td>{n}</td><td>重复出现n次</td></tr><tr><td>{n,}</td><td>至少重复出现n次</td></tr><tr><td>{m,n}</td><td>重复重现m到n次，其中，m&lt;n</td></tr></tbody></table><h3 id="三、修饰符"><a href="#三、修饰符" class="headerlink" title="三、修饰符"></a>三、修饰符</h3><table><thead><tr><th>修饰符</th><th>对应说明</th></tr></thead><tbody><tr><td>i</td><td>ignoreCase的缩写，表示忽略字母的大小写</td></tr><tr><td>g</td><td>global的缩写，表示全局匹配</td></tr><tr><td>m</td><td>multiline的缩写, 更改^和$的含义，匹配任意一行的行首和行尾</td></tr></tbody></table><h3 id="四、反义字符"><a href="#四、反义字符" class="headerlink" title="四、反义字符"></a>四、反义字符</h3><table><thead><tr><th>反义字符</th><th>对应说明</th></tr></thead><tbody><tr><td>[^x]</td><td>匹配除<code>x</code>之外的所有字符， 其中<code>x</code>可以为任意字符</td></tr><tr><td>[^xyz]</td><td>同上，匹配除<code>xyz</code>之外的任意字符</td></tr><tr><td>\W</td><td>匹配除了字母、数字、下划线之外的任意字符，等同于: <code>[^\w]</code></td></tr><tr><td>\S</td><td>匹配除了空白符之外的任意字符，等同于：<code>[^\s]</code></td></tr><tr><td>\D</td><td>匹配不是数字的所有字符，等同于：<code>[^\d]</code></td></tr><tr><td>\B</td><td>匹配不是单词边界的字符，等同于： <code>[^\b]</code></td></tr></tbody></table><h3 id="五、转义字符"><a href="#五、转义字符" class="headerlink" title="五、转义字符"></a>五、转义字符</h3><table><thead><tr><th>转义字符</th><th>对应说明</th></tr></thead><tbody><tr><td>\xnn</td><td>匹配十六进制数</td></tr><tr><td>\f</td><td>匹配换页符，等同于： <code>\x0c</code></td></tr><tr><td>\n</td><td>匹配换行符，等同于: <code>\x0a</code></td></tr><tr><td>\r</td><td>匹配回车符，等同于：<code>\x0d</code></td></tr><tr><td>\t</td><td>匹配水平制表符，等同于：<code>\x09</code></td></tr><tr><td>\v</td><td>匹配垂直制表符，等同于：<code>\x0b</code></td></tr><tr><td>\unnnn</td><td>匹配Unicode字符，如：<code>\u00A0</code></td></tr></tbody></table><h3 id="六、分组-捕获"><a href="#六、分组-捕获" class="headerlink" title="六、分组/捕获"></a>六、分组/捕获</h3><table><thead><tr><th>分组字符</th><th>对应说明</th></tr></thead><tbody><tr><td>(exp)</td><td>用小圆括号进行分组</td></tr><tr><td>(?:exp)</td><td>匹配exp正则，但不产生分组号</td></tr><tr><td>exp1(?=exp2)</td><td>前瞻断言，匹配exp1，但后面必须是exp2</td></tr><tr><td>exp1(?!=exp2)</td><td>后瞻断言，匹配exp1，但后面不能是exp2</td></tr></tbody></table><h3 id="七、贪婪与惰性"><a href="#七、贪婪与惰性" class="headerlink" title="七、贪婪与惰性"></a>七、贪婪与惰性</h3><table><thead><tr><th>匹配字符</th><th>对应说明</th></tr></thead><tbody><tr><td>*?</td><td>重复出现零次或多次，但尽可能少的重复</td></tr><tr><td>+?</td><td>重复出现一次或多次，但尽可能少的重复</td></tr><tr><td>??</td><td>重复出现零次或一次，但尽可能少的重复</td></tr><tr><td>{n}?</td><td>重复出现n次，但尽可能少的重复</td></tr><tr><td>{n,}?</td><td>至少重复出现n次，但尽可能少的重复</td></tr><tr><td>{m,n}?</td><td>重复重现m到n次，其中，m&lt;n，但尽可能少的重复</td></tr></tbody></table><h3 id="八、常用正则表达式"><a href="#八、常用正则表达式" class="headerlink" title="八、常用正则表达式"></a>八、常用正则表达式</h3><table><thead><tr><th>描述</th><th>正则</th></tr></thead><tbody><tr><td>电话号码</td><td>/[0-9-()（）]{7,18}/</td></tr><tr><td>邮编</td><td>/^[1-9]\d{5}(?!\d)$/</td></tr><tr><td>中文字符</td><td>/[\u4e00-\u9fa5]/g</td></tr><tr><td>Email地址</td><td>/\w[-\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+.)+[A-Za-z]{2,14}/</td></tr><tr><td>手机号码</td><td>/0?(13&#124;14&#124;15&#124;17&#124;18&#124;19)[0-9]{9}/</td></tr><tr><td>身份证号</td><td>/\d{17}[\d&#124;x]&#124;\d{15}/</td></tr></tbody></table><h3 id="九、在线工具"><a href="#九、在线工具" class="headerlink" title="九、在线工具"></a>九、在线工具</h3><ul><li><a href="https://regexr.com/" target="_blank" rel="noopener">国外 - 正则在线测试</a></li><li><a href="http://tool.chinaz.com/regex/" target="_blank" rel="noopener">国内 - 站长在线测试</a></li><li><a href="https://www.baidufe.com/fehelper" target="_blank" rel="noopener">插件 - FeHelper</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="noopener">JavaScript RegExp 对象</a></li><li><a href="https://www.baidufe.com/item/eb10deb92f2c05ca32cf.html" target="_blank" rel="noopener">javascript正则表达式</a></li><li><a href="https://www.cnblogs.com/myzhibie/p/4365142.html" target="_blank" rel="noopener">js正则及常用方法函数总结</a></li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown 常用命令</title>
      <link href="/markdown/"/>
      <url>/markdown/</url>
      <content type="html"><![CDATA[<blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。具体请参考[Github][2].</p></blockquote><a id="more"></a><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>加粗    <code>Ctrl + B</code> </li><li>斜体    <code>Ctrl + I</code> </li><li>引用    <code>Ctrl + Q</code></li><li>插入链接    <code>Ctrl + L</code></li><li>插入代码    <code>Ctrl + K</code></li><li>插入图片    <code>Ctrl + G</code></li><li>提升标题    <code>Ctrl + H</code></li><li>有序列表    <code>Ctrl + O</code></li><li>无序列表    <code>Ctrl + U</code></li><li>横线    <code>Ctrl + R</code></li><li>撤销    <code>Ctrl + Z</code></li><li>重做    <code>Ctrl + Y</code></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 元</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 元</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 元</td><td style="text-align:center">234</td></tr></tbody></table><p>###定义列表</p><p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p><p>项目３<br>:   定义 C</p><p>:   定义 D</p><pre><code>&gt; 定义D内容</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure></p><p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p><p>[TOC]</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见[math.stackexchange.com][1].</p><ul><li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li><li>块级公式：</li></ul><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>更多LaTex语法请参考 [这儿][3].</p><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><p>或者流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>序列图</strong> 语法，参考 [这儿][4],</li><li>关于 <strong>流程图</strong> 语法，参考 [这儿][5].</li></ul><p>##浏览器兼容</p><ol><li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li><li>IE９以下不支持</li><li>IE９，１０，１１存在以下问题<ol><li>不支持离线功能</li><li>IE9不支持文件导入导出</li><li>IE10不支持拖拽文件导入</li></ol></li></ol><hr>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯2018面试题解析</title>
      <link href="/scope-questions/"/>
      <url>/scope-questions/</url>
      <content type="html"><![CDATA[<h3 id="腾讯2018年的一道笔试题（涉及到作用域）"><a href="#腾讯2018年的一道笔试题（涉及到作用域）" class="headerlink" title="腾讯2018年的一道笔试题（涉及到作用域）"></a>腾讯2018年的一道笔试题（涉及到作用域）</h3><a id="more"></a><hr><p> 一：请问下面输出什么值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    a();</span><br></pre></td></tr></table></figure></p><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域?"></a>什么是作用域?</h3><blockquote><p>通常来说一段程序代码中使用的变量和函数并不总是可用的，限定其可用性的范围即作用域，作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突   - - 百度百科</p></blockquote><p>我自己的理解：浏览器执行js代码的过程<br>两大问题：</p><h4 id="（1）浏览器什么时候会进入作用域链？"><a href="#（1）浏览器什么时候会进入作用域链？" class="headerlink" title="（1）浏览器什么时候会进入作用域链？"></a>（1）浏览器什么时候会进入作用域链？</h4><ul><li>当看到script标签的时候</li><li>当调用一个方法的时候</li></ul><h4 id="（2）进入作用域之后，发生了什么事情？"><a href="#（2）进入作用域之后，发生了什么事情？" class="headerlink" title="（2）进入作用域之后，发生了什么事情？"></a>（2）进入作用域之后，发生了什么事情？</h4><ul><li><p>JS预解析（为执行做准备）</p><ol><li>开辟一个空间</li><li>找代码里面有没有var，有没有方法参数，有没有方法的声明，如果有var，有方法参数，就会把var和方法参数声明的变量，赋值成undefined存到空间里面，如果有function，就会把function所有的内容存到空间里面</li></ol></li><li><p>JS逐行执行</p><p>  找有没有表达式， +-*/=….</p></li></ul><p><img src="/img/ring1.jpg" alt=""></p><hr><p> 通过上面的理论，请做下面三道题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><h3 id="作用域链？"><a href="#作用域链？" class="headerlink" title="作用域链？"></a>作用域链？</h3><blockquote><p>作用域链决定了哪些数据能被函数访问。当一个函数创建后，它的作用域链会被创建此函数的作用域中可访问的数据对象填充。   - - 百度百科</p></blockquote><p><em>tip:里面的修改，外面改，外面改，里面也改</em></p><h3 id="以上代码结果"><a href="#以上代码结果" class="headerlink" title="以上代码结果"></a>以上代码结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Ring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node开发脚手架工具</title>
      <link href="/Node%20cli/"/>
      <url>/Node%20cli/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>曾经接触过vue-cli脚手架，发现真的很神奇，能够短短几分钟，构建出一个vue框架的初始项目。今天， 就来揭开脚手架神秘的面纱， 自己也可以编写脚手架，提高工作效率。</p><h3 id="脚手架使用流程"><a href="#脚手架使用流程" class="headerlink" title="脚手架使用流程"></a>脚手架使用流程</h3><p>回忆一下vue-cli脚手架， 我们使用的流程：</p><ul><li>全局安装vue-cli： <code>npm install -g vue-cli</code></li><li>初始化项目： <code>vue create my-project</code></li><li>根据提示选择： 一般都是选择默认配置</li><li>终端不同颜色提示，图标</li><li>给出运行样例，即可运行</li></ul><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>清楚了脚手架的功能之后， 就可以一步一步分析如何实现它。<br>解析一个demo： <a href="https://github.com/comeonbob/h5-cli" target="_blank" rel="noopener">h5-clis</a><br>（1）<strong>全局安装， 简单命令创建项目功能</strong><br>实现原理： package.json 中有bin 选项配置，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"h5-cli"</span>: <span class="string">"./index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>全局安装后，在终端运行命令： <code>h5-cli init</code>， 相当于运行了全局依赖包中的index文件， index文件中标明是node运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">require(&apos;./lib/init&apos;);</span><br></pre></td></tr></table></figure></p><p>（2） <strong>初始化项目功能</strong><br>实现原理： 终端接收用户输入的指令， 执行特定初始化操作，包括获取框架模板template, 在本地生成初始项目。<br>依赖包如下：</p><ul><li>commander.js，可以自动的解析命令和参数，用于处理用户输入的命令。</li><li>download-git-repo，下载并提取 git 仓库，用于下载项目模板。</li><li>fs-extra，文件系统fs扩展, 支持promise异步</li></ul><p>主要实现代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve commands and params</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> file = <span class="built_in">require</span>(<span class="string">'./file'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Usage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  program</span><br><span class="line">  .usage(<span class="string">'init [h5-template]'</span>)</span><br><span class="line">  .version(<span class="string">'1.6.0'</span>, <span class="string">'-v, --version'</span>)</span><br><span class="line">  .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">  .action(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    main(name);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * main</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  file.generate(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/comeonbob/h5-cli" target="_blank" rel="noopener">详见源码</a><br>lib<br>: download.js  //下载模板<br>: file.js  //拷贝模板<br>: init.js //初始化项目</p><p>（3） <strong>终端提示，用户交互</strong><br>若是比较灵活的脚手架，在终端与用户有交互，根据不同选择，生成不同模板。<br>实现原理：</p><ul><li>Inquirer.js，通用的命令行用户界面集合，用于和用户进行交互。</li><li>handlebars.js，模板引擎，将用户提交的信息动态填充到文件中。<br>h5-clis 脚手尽量精简，使用了默认值。</li></ul><p>（4） <strong>终端不同颜色提示，图标</strong><br>实现原理：</p><ul><li>ora，下载过程久的话，可以用于显示下载中的动画效果。</li><li>chalk，可以给终端的字体加上颜色<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'generate project start'</span>);</span><br><span class="line">spinner.start(<span class="string">'download ...'</span>);</span><br><span class="line"><span class="keyword">await</span> download.download(projectName);</span><br><span class="line">spinner.succeed(<span class="string">'download template success'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>为了给用户更好的体验，建议加上下载中动画，字体颜色提示，图标等。</p><p>（5）<strong>给出运行样例，即可运行</strong><br>实现原理：<br>运行示例， 帮助信息，版本信息等。都可以通过log打出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Help.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'  Examples:'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.green(<span class="string">'    # create a new project with an local template: init &lt;h5-tempalte&gt;'</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'    $ h5-cli init koa2'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.green(<span class="string">'    # create a new project from a github template: init &lt;username/repo&gt;'</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.white(<span class="string">'    $ h5-cli init comeonbob/h5-template-koa2'</span>))</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="运行脚手架"><a href="#运行脚手架" class="headerlink" title="运行脚手架"></a>运行脚手架</h3><ul><li><p>全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g h5-clis</span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h5-cli init koa2</span><br></pre></td></tr></table></figure></li></ul><p>效果图：<br><img src="/img/cli_npm.png" alt="初始化项目"></p><ul><li>koa2-project 项目生成，切换目录，安装依赖包，即可查看demo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd koa2-project</span><br><span class="line">npm install</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure></li></ul><p>效果图：<br><img src="/img/cli_api.png" alt="运行demo"></p><h3 id="脚手架利弊"><a href="#脚手架利弊" class="headerlink" title="脚手架利弊"></a>脚手架利弊</h3><blockquote><p>脚手架可以减少重复性的工作，开启一个新项目时候，不必重头开始，也不需要再旧的项目上删减，减少不必要的文件拷贝，可以大大提高工作效率；然而便利的同时，也容易忽略项目的本来面貌，技术的实现原理。 建议使用脚手架前，耐心了解生成模板框架 源码， 阅读其官网文档，从而知其然，也能知其所以然。</p></blockquote><p>安利两个脚手架, 支持npm直接安装：</p><ul><li><a href="https://github.com/comeonbob/simple-koa2-cli" target="_blank" rel="noopener">simple-koa2-cli</a> node层简单的koa2模板脚手架</li><li><a href="https://github.com/comeonbob/h5-cli" target="_blank" rel="noopener">h5-clis</a> h5脚手架，一键生成流行的框架模板. 如 vue2, koa2等。</li></ul><hr><ul><li>Date :   2018-06-27</li><li>Author : Bob</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>D3.js</title>
      <link href="/d3/"/>
      <url>/d3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>D3 的全称是（Data-Driven Documents），顾名思义可以知道是一个被数据驱动的文档。</p><p>本质就是一个javascript函数库，使用它的目的就是实现数据可视化。</p><p>使用：<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script></p><h3 id="1-比例尺-将某一区域的值映射到另一区域，其大小关系不变。"><a href="#1-比例尺-将某一区域的值映射到另一区域，其大小关系不变。" class="headerlink" title="1.比例尺:将某一区域的值映射到另一区域，其大小关系不变。"></a>1.比例尺:<em>将某一区域的值映射到另一区域，其大小关系不变。</em></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 线性比例尺</span><br><span class="line">var dataset = [1.2, 2.3, 0.9, 1.5, 3.3];</span><br><span class="line">var min = d3.min(dataset);</span><br><span class="line">var max = d3.max(dataset);</span><br><span class="line"></span><br><span class="line">var linear = d3.scale.linear()</span><br><span class="line">        .domain([min, max])</span><br><span class="line">        .range([0, 300]);</span><br><span class="line"></span><br><span class="line">linear(0.9);    //返回 0</span><br><span class="line">linear(2.3);    //返回 175</span><br><span class="line">linear(3.3);    //返回 300</span><br><span class="line">// 序数比例尺</span><br><span class="line">var index = [0, 1, 2, 3, 4];</span><br><span class="line">var color = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;];</span><br><span class="line">var ordinal = d3.scale.ordinal()</span><br><span class="line">        .domain(index)</span><br><span class="line">        .range(color);</span><br><span class="line"></span><br><span class="line">ordinal(0); //返回 red</span><br><span class="line">ordinal(2); //返回 green</span><br><span class="line">ordinal(4); //返回 black</span><br></pre></td></tr></table></figure><h3 id="2-柱状图"><a href="#2-柱状图" class="headerlink" title="2.柱状图"></a>2.柱状图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;  </span><br><span class="line">&lt;title&gt;完整的柱形图&lt;/title&gt;  </span><br><span class="line">&lt;/head&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.axis path,</span><br><span class="line">.axis line&#123;</span><br><span class="line">fill: none;</span><br><span class="line">stroke: black;</span><br><span class="line">shape-rendering: crispEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.axis text &#123;</span><br><span class="line">font-family: sans-serif;</span><br><span class="line">font-size: 11px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MyRect &#123;</span><br><span class="line">fill: steelblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MyText &#123;</span><br><span class="line">fill: white;</span><br><span class="line">text-anchor: middle;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">//画布大小</span><br><span class="line">var width = 400;</span><br><span class="line">var height = 400;</span><br><span class="line"></span><br><span class="line">//在 body 里添加一个 SVG 画布</span><br><span class="line">var svg = d3.select(&quot;body&quot;)</span><br><span class="line">.append(&quot;svg&quot;)</span><br><span class="line">.attr(&quot;width&quot;, width)</span><br><span class="line">.attr(&quot;height&quot;, height);</span><br><span class="line"></span><br><span class="line">//画布周边的空白</span><br><span class="line">var padding = &#123;left:30, right:30, top:20, bottom:20&#125;;</span><br><span class="line"></span><br><span class="line">//定义一个数组</span><br><span class="line">var dataset = [10, 20, 30, 40, 33, 24, 12, 5];</span><br><span class="line"></span><br><span class="line">//x轴的比例尺</span><br><span class="line">var xScale = d3.scale.ordinal()</span><br><span class="line">.domain(d3.range(dataset.length))</span><br><span class="line">.rangeRoundBands([0, width - padding.left - padding.right]);</span><br><span class="line"></span><br><span class="line">//y轴的比例尺</span><br><span class="line">var yScale = d3.scale.linear()</span><br><span class="line">.domain([0,d3.max(dataset)])</span><br><span class="line">.range([height - padding.top - padding.bottom, 0]);</span><br><span class="line"></span><br><span class="line">//定义x轴</span><br><span class="line">var xAxis = d3.svg.axis()</span><br><span class="line">.scale(xScale)</span><br><span class="line">.orient(&quot;bottom&quot;);</span><br><span class="line"></span><br><span class="line">//定义y轴</span><br><span class="line">var yAxis = d3.svg.axis()</span><br><span class="line">.scale(yScale)</span><br><span class="line">.orient(&quot;left&quot;);</span><br><span class="line"></span><br><span class="line">//矩形之间的空白</span><br><span class="line">var rectPadding = 4;</span><br><span class="line"></span><br><span class="line">//添加矩形元素</span><br><span class="line">var rects = svg.selectAll(&quot;.MyRect&quot;)</span><br><span class="line">.data(dataset)</span><br><span class="line">.enter()</span><br><span class="line">.append(&quot;rect&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;MyRect&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)</span><br><span class="line">.attr(&quot;x&quot;, function(d,i)&#123;</span><br><span class="line">return xScale(i) + rectPadding/2;</span><br><span class="line">&#125; )</span><br><span class="line">.attr(&quot;y&quot;,function(d)&#123;</span><br><span class="line">return yScale(d);</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;width&quot;, xScale.rangeBand() - rectPadding )</span><br><span class="line">.attr(&quot;height&quot;, function(d)&#123;</span><br><span class="line">return height - padding.top - padding.bottom - yScale(d);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加文字元素</span><br><span class="line">var texts = svg.selectAll(&quot;.MyText&quot;)</span><br><span class="line">.data(dataset)</span><br><span class="line">.enter()</span><br><span class="line">.append(&quot;text&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;MyText&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)</span><br><span class="line">.attr(&quot;x&quot;, function(d,i)&#123;</span><br><span class="line">return xScale(i) + rectPadding/2;</span><br><span class="line">&#125; )</span><br><span class="line">.attr(&quot;y&quot;,function(d)&#123;</span><br><span class="line">return yScale(d);</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;dx&quot;,function()&#123;</span><br><span class="line">return (xScale.rangeBand() - rectPadding)/2;</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;dy&quot;,function(d)&#123;</span><br><span class="line">return 20;</span><br><span class="line">&#125;)</span><br><span class="line">.text(function(d)&#123;</span><br><span class="line">return d;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加x轴</span><br><span class="line">svg.append(&quot;g&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;axis&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + (height - padding.bottom) + &quot;)&quot;)</span><br><span class="line">.call(xAxis); </span><br><span class="line"></span><br><span class="line">//添加y轴</span><br><span class="line">svg.append(&quot;g&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;axis&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)</span><br><span class="line">.call(yAxis);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/rect.png" alt=""></p><h3 id="3-饼状图"><a href="#3-饼状图" class="headerlink" title="3.饼状图"></a>3.饼状图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">  &lt;head&gt;  </span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;  </span><br><span class="line">        &lt;title&gt;饼状图&lt;/title&gt;  </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;  </span><br><span class="line">        &lt;script&gt;</span><br><span class="line"></span><br><span class="line">var width = 400;</span><br><span class="line">var height = 400;</span><br><span class="line">var dataset = [ 30 , 10 , 43 , 55 , 13 ];</span><br><span class="line"></span><br><span class="line">var svg = d3.select(&quot;body&quot;)</span><br><span class="line">.append(&quot;svg&quot;)</span><br><span class="line">.attr(&quot;width&quot;, width)</span><br><span class="line">.attr(&quot;height&quot;, height);</span><br><span class="line"></span><br><span class="line">var pie = d3.layout.pie();</span><br><span class="line"></span><br><span class="line">var piedata = pie(dataset);</span><br><span class="line"></span><br><span class="line">var outerRadius = 150;//外半径</span><br><span class="line">var innerRadius = 0;//内半径，为0则中间没有空白</span><br><span class="line"></span><br><span class="line">var arc = d3.svg.arc()//弧生成器</span><br><span class="line">.innerRadius(innerRadius)//设置内半径</span><br><span class="line">.outerRadius(outerRadius);//设置外半径</span><br><span class="line"></span><br><span class="line">var color = d3.scale.category10();</span><br><span class="line"></span><br><span class="line">var arcs = svg.selectAll(&quot;g&quot;)</span><br><span class="line">  .data(piedata)</span><br><span class="line">  .enter()</span><br><span class="line">  .append(&quot;g&quot;)</span><br><span class="line">  .attr(&quot;transform&quot;,&quot;translate(&quot;+ (width/2) +&quot;,&quot;+ (height/2) +&quot;)&quot;);</span><br><span class="line">  </span><br><span class="line">arcs.append(&quot;path&quot;)</span><br><span class="line">.attr(&quot;fill&quot;,function(d,i)&#123;</span><br><span class="line">return color(i);</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;d&quot;,function(d)&#123;</span><br><span class="line">return arc(d);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">arcs.append(&quot;text&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,function(d)&#123;</span><br><span class="line">return &quot;translate(&quot; + arc.centroid(d) + &quot;)&quot;;</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;text-anchor&quot;,&quot;middle&quot;)</span><br><span class="line">.text(function(d)&#123;</span><br><span class="line">return d.data;</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line">        &lt;/script&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/pie.png" alt=""></p><hr><ul><li>Date :   2018-06-19</li><li>Author : Little</li></ul>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>事件代理与冒泡.js</title>
      <link href="/event-agent-and-bubbling/"/>
      <url>/event-agent-and-bubbling/</url>
      <content type="html"><![CDATA[<h2 id="前景介绍"><a href="#前景介绍" class="headerlink" title="前景介绍"></a>前景介绍</h2><p>html元素可以进行嵌套，通俗讲就是父子元素的关系。父子元素绑定事件也是项目中不可避免的，接下来就讲讲事件代理与冒泡，以及对他们的使用。<br><a id="more"></a></p><h3 id="1-现场还原-写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的"><a href="#1-现场还原-写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的" class="headerlink" title="1.现场还原:写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的"></a>1.现场还原:<em>写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的</em></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/*js:*/</span><br><span class="line">arr = [</span><br><span class="line">  &#123;&apos;name&apos;:&apos;阿根廷&apos;,code:&apos;a&apos;&#125;,</span><br><span class="line">  &#123;&apos;name&apos;:&apos;墨西哥&apos;,code:&apos;m&apos;&#125;,</span><br><span class="line">  &#123;&apos;name&apos;:&apos;法国&apos;,code:&apos;f&apos;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">/*html:*/</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item,index) in arr&quot; @click=&quot;willWin&quot; v-text=&quot;item.name&quot; :key=&quot;item.code&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">最终大约生成：</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li @click=&quot;willWin&quot;&gt;阿根廷&lt;/li&gt;</span><br><span class="line">  &lt;li @click=&quot;willWin&quot;&gt;墨西哥&lt;/li&gt;</span><br><span class="line">  &lt;li @click=&quot;willWin&quot;&gt;法国&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>这段代码本身是没有问题的，但是一个问题就是我们会给每个子元素li绑定一个willWin()函数，这是十分没有必要的。</p><h3 id="2-那该怎么做？？"><a href="#2-那该怎么做？？" class="headerlink" title="2.那该怎么做？？"></a>2.那该怎么做？？</h3><p>其实我们可以合理利用事件冒泡，使用事件代理（父元素代替子元素进行事件绑定，需要做的就是区分是那个子元素触发的事件），进行简单优化。<br>修改之后的代码是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul @click=&quot;willWin&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item,index) in arr&quot;  v-text=&quot;item.name&quot; :key=&quot;item.code&quot; :data-key=&apos;index&apos;&gt; </span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>这样就可以在willWin方法中获得event事件对象，它记录了事件触发元素event.target，根据它我们就可以进行区分被点击的元素，这就是事件代理的机制。</p><h3 id="3-拓展介绍"><a href="#3-拓展介绍" class="headerlink" title="3.拓展介绍"></a>3.拓展介绍</h3><p>currentTarget：事件注册对象（event.currentTarget）,指向事件注册的元素。</p><hr><ul><li>Date :   2018-06-28</li><li>Author : evel</li></ul>]]></content>
      
      <categories>
          
          <category> Evel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6 类class入门</title>
      <link href="/es6-class/"/>
      <url>/es6-class/</url>
      <content type="html"><![CDATA[<h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类?"></a>什么是类?</h3><blockquote><p>类是面向对象程序设计中的概念，是面向对象编程的基础。   - - 百度百科</p></blockquote><p>简单介绍下，面向对象编程中几个基本概念：</p><h4 id="（1）对象"><a href="#（1）对象" class="headerlink" title="（1）对象"></a>（1）对象</h4><p>一切事物皆为对象，生活中看到的，听到的，闻到的等东西都是对象。准确的说， 对象是一个自包含的实体，用一组可识别的特性和行为来标识。</p><h4 id="（2）类"><a href="#（2）类" class="headerlink" title="（2）类"></a>（2）类</h4><p><strong>定义：</strong><br>类是对现实生活中一类具有共同特征的事物的抽象， 换句话说，类就是具有相同属性和功能的对象的抽象的集合；<br>类的构成包括数据成员和成员函数。<br><strong>三大特性：</strong></p><ul><li><p>封装性<br>将数据和操作封装为一个有机的整体，由于类中私有成员都是隐藏的，只向外部提供有限的接口，所以能够保证内部的高内聚性和与外部的低耦合性。</p></li><li><p>继承性<br>继承定义了类如何相互关联，共享特性；更符合认知规律，使程序更易于理解，同时节省不必要的重复代码。</p></li><li><p>多态性<br>多态表示不同的对象可以执行相同的动作，但要通过自己的实现代码来执行。</p></li></ul><h4 id="（3）构造方法"><a href="#（3）构造方法" class="headerlink" title="（3）构造方法"></a>（3）构造方法</h4><p>构造方法，又叫构造函数，其实就是对类的初始化， 在 new 的时候调用。</p><h3 id="如何使用es6新特性class"><a href="#如何使用es6新特性class" class="headerlink" title="如何使用es6新特性class"></a>如何使用es6新特性class</h3><p><strong>demo:</strong><br>(1) es6 面向对象的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 基类: 人 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">// 默认构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, gender) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取个人信息</span></span><br><span class="line">  getInfo() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`姓名：<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, 性别：<span class="subst">$&#123;<span class="keyword">this</span>.gender&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> someOne = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="comment">// 输出个人信息</span></span><br><span class="line"><span class="built_in">console</span>.log(someOne.getInfo());</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/** 派生类：超人 */</span><br><span class="line">class Superman extends Person &#123;</span><br><span class="line">   // 构造函数</span><br><span class="line">   constructor(name, gender, ability) &#123;</span><br><span class="line">     super(name, gender);</span><br><span class="line">     this.ability = ability;</span><br><span class="line">   &#125;</span><br><span class="line">  // 获取个人信息</span><br><span class="line">  getInfo() &#123;</span><br><span class="line">return `姓名：$&#123;this.name&#125;, 性别：$&#123;this.gender&#125;, 能力：$&#123;this.ability&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 实例化</span><br><span class="line">let someSuperman = new Superman(&apos;enfan&apos;, &apos;male&apos;, &apos;会飞&apos;);</span><br><span class="line">// 输出超人信息</span><br><span class="line">console.log(someSuperman.getInfo());</span><br></pre></td></tr></table></figure><p>(2) es5语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + <span class="keyword">this</span>.gender);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someOne = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="string">"male"</span>);</span><br><span class="line">someOne.getInfo();</span><br></pre></td></tr></table></figure></p><p>思考： es5 继承如何实现？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperMan</span>(<span class="params">name, gender, ability</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, gender);</span><br><span class="line">  <span class="keyword">this</span>.ability = ability;</span><br><span class="line">&#125;</span><br><span class="line">SuperMan.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">SuperMan.prototype.constructor = SuperMan;</span><br><span class="line"><span class="keyword">var</span> someSuperman = <span class="keyword">new</span> SuperMan(<span class="string">'enfan'</span>, <span class="string">'male'</span>, <span class="string">'fly'</span>);</span><br><span class="line">someSuperman.getInfo();</span><br></pre></td></tr></table></figure><p>（3）对比es6 与 es5</p><ul><li>类的调用必须通过new 一个实例,且类的内部默认使用严格模式</li><li>类的继承使用关键字extends,继承机制与es5完全不同</li><li>类的继承可以继承原生的构造函数，es5不可以</li><li>不存在变量提升，必须先声明，再调用</li></ul><h3 id="为什么要用es6-class？"><a href="#为什么要用es6-class？" class="headerlink" title="为什么要用es6 class？"></a>为什么要用es6 class？</h3><ul><li>更接近传统语言（比如c++, java）的面向对象编程写法，引入了 class（类）这个概念</li><li>使用更多设计模式</li><li>越来越多的库使用class， 如koa2</li><li>more…</li></ul><hr><ul><li>Date :   2018-05-31</li><li>Author : Bob</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式（基础篇）</title>
      <link href="/regExp/"/>
      <url>/regExp/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建正则的两种方法</span><br><span class="line">// /正则表达式/</span><br><span class="line">const re = /ABC\-abc/igmy</span><br><span class="line">// new RegExp(&apos;正则表达式&apos;) 注：特殊字符需转义</span><br><span class="line">const ex = new RegExp(&apos;ABC\\-abc&apos;, &apos;igmy&apos;) </span><br><span class="line"></span><br><span class="line">// 常见匹配字符</span><br><span class="line">// \d任意数字，\s空格,\w任意数字或字母,.任意字符,*任意个字符,+至少一个字符,?一个或多个字符,&#123;n&#125;n个字符,&#123;n,m&#125;n到m个字符,[]精确匹配,()分组,^行的开头,$行的结束</span><br><span class="line">// i表示忽略大小写,g表示全局匹配,m表示多行匹配，y表示粘连修饰符</span><br><span class="line">// \1表示的是匹配到第一个()的引用,\2表示匹配到的第二个()的引用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 正则的常见方法</span><br><span class="line">// test()测试</span><br><span class="line">var re = /^\d&#123;3&#125;\-\d&#123;3,8&#125;$/</span><br><span class="line">re.test(&apos;010-12345&apos;) // true </span><br><span class="line">re.test(&apos;010-1234x&apos;) // false</span><br><span class="line">re.test(&apos;010 12345&apos;) // false</span><br><span class="line"></span><br><span class="line">// exec()分组</span><br><span class="line">var s = &apos;JavaScript, VBScript, JScript and ECMAScript&apos;;</span><br><span class="line">var re=/[a-zA-Z]+Script/g;</span><br><span class="line"></span><br><span class="line">// 使用全局匹配:</span><br><span class="line">re.exec(s); // [&apos;JavaScript&apos;]</span><br><span class="line">re.lastIndex; // 10</span><br><span class="line">re.exec(s); // [&apos;VBScript&apos;]</span><br><span class="line">re.lastIndex; // 20</span><br><span class="line">re.exec(s); // [&apos;JScript&apos;]</span><br><span class="line">re.lastIndex; // 29</span><br><span class="line">re.exec(s); // [&apos;ECMAScript&apos;]</span><br><span class="line">re.lastIndex; // 44</span><br><span class="line">re.exec(s); // null，直到结束仍没有匹配到</span><br><span class="line"></span><br><span class="line">// 字符串的正则方法</span><br><span class="line"></span><br><span class="line">// search()返回字符串的索引</span><br><span class="line"></span><br><span class="line">// match()返回匹配数组,返回匹配的第一个。加上全局匹配则全部返回</span><br><span class="line">const str = &quot;独坐常忽忽，情怀何悠悠。山腰云缦缦，谷口风飕飕。猿来树袅袅，鸟入林啾啾。时催鬓飒飒，岁尽老惆惆。&quot;</span><br><span class="line">const exc = /(.)\1/g</span><br><span class="line">const result = str.match(exc)</span><br><span class="line">// [&quot;忽忽&quot;, &quot;悠悠&quot;, &quot;缦缦&quot;, &quot;飕飕&quot;, &quot;袅袅&quot;, &quot;啾啾&quot;, &quot;飒飒&quot;, &quot;惆惆&quot;]</span><br><span class="line"></span><br><span class="line">// split()字符串切分，返回数组</span><br><span class="line"></span><br><span class="line">// replace()将匹配到的字符串替换</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序--入门篇</title>
      <link href="/wechat-program/"/>
      <url>/wechat-program/</url>
      <content type="html"><![CDATA[<blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3></blockquote><ul><li><p>申请小程序账号 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">@申请网址</a></p></li><li><p>下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=2018424" target="_blank" rel="noopener">开发者工具</a> ， 根据自己的操作系统下载对应的安装包进行安装，有关开发者工具更 详细的介绍可以查看<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html?t=2018424" target="_blank" rel="noopener">《开发者工具介绍》</a></p></li><li><p>新建一个小程序项目，填入申请后得到的小程序AppID、项目名称，选择”普通快速开发模式”，点击确定，而后展示如下(包含左侧编译预览、右侧项目结构)：</p><p><img src="/img/init.png" alt="初始页面"></p></li></ul><blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3></blockquote><ul><li>初始化的项目结构中，包含了一些简单的代码文件，其中app.js、app.json、app.wxss这三个文件是必不可少，小程序会读取这些文件初始化实例。（<strong>注意：这三个文件名称不可任意修改</strong>）</li><li>在小程序中，wxml/wxss/js/json对应着我们平时写的html/css/js/json文件。</li><li>app.js是小程序的初始化脚本，可以在这个文件中监听小程序的生命周期，申请全局变量和调用API等等。</li><li>app.json是对小程序的全局配置，其中的pages是设置所有的页面路径（<strong>默认第一条为首页，即启动页</strong>）， window是设置页面的窗口表现等。</li><li>app.wxss是整个小程序的公共样式表。</li><li>在pages的目录下，每个文件夹目录里面由四种不同类型的文件组成，其中包含.js,.json,wxss,wxml，其中的.json,.wxss文件为非必须，因为不写代码可以默认继承app的全局app.json,app.wxss文件的设置。</li></ul><blockquote><h3 id="具体文件分析"><a href="#具体文件分析" class="headerlink" title="具体文件分析"></a>具体文件分析</h3></blockquote><ul><li><p>全局配置文件：<code>app.json</code>主要分为五个部分：pages：页面路径组，window：框架样式（状态栏、导航条、标题、窗口背景色），tabBar：底部菜单，networkTimeout：网络超时设置，debug：开启debug模式。</p><p><strong>注</strong>：page.json(page目录下，每个页面文件夹中的logs.json/index.json…..的统称)可以对页面进行单独的配置，覆盖app.json的全局配置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// app.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>:&#123;</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#000"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"white"</span>,</span><br><span class="line">    <span class="attr">"enablePullDownRefresh"</span>:<span class="string">"true"</span>    //导航栏能够下拉刷新</span><br><span class="line">  &#125;,</span><br><span class="line">  "tabBar":&#123;       //在“tabBar”中配置底端的标题栏信息</span><br><span class="line">    "color":"#666",     //图片颜色为灰色</span><br><span class="line">    "selectedColor":"#268dcd",  //图片被选中颜色为蓝色</span><br><span class="line">    "borderStyle":"black",   //边框颜色为黑色</span><br><span class="line">    "backgroundColor":"#fafafa",  //子标题栏背景色为白色</span><br><span class="line">    "list":[     //"list"中存放底端的几个子导航栏信息，数量范围2~5</span><br><span class="line">      &#123;</span><br><span class="line">        "pagePath":"pages/index/index",  //该子导航点击后要跳转的页面</span><br><span class="line">        "iconPath":"images/icons/homeD.png",  //该子导航设置的图片，这里用的是图片的相对路径</span><br><span class="line">        "selectedIconPath":"images/icons/homeS.png",  //该子导航被点击后显示的图片</span><br><span class="line">        "text":"首页"   //该子导航显示的文字</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>:<span class="string">"pages/news/news"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>:<span class="string">"images/icons/newsD.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>:<span class="string">"images/icons/newsS.png"</span>,</span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"新闻中心"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "networkTimeout":&#123; //网络请求超时设置</span><br><span class="line">    "request": 10000,</span><br><span class="line">    "downloadFile": 10000</span><br><span class="line">  &#125;,</span><br><span class="line">  "debug":"true"   //设置是否开启debug模式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用App()来全局注册一个小程序，必须是在<code>app.js</code>文件中注册，并且不能注册多个 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">App(&#123; <span class="comment">//如下为小程序的生命周期</span></span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听初始化</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听显示（进入前台）</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听隐藏（进入后台：按home离开微信）</span></span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;&#125;,<span class="comment">//监听错误</span></span><br><span class="line">  <span class="comment">//如下为自定义的全局方法和全局变量  </span></span><br><span class="line">  globalFun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  globalData: <span class="string">'Hello World'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用 Page()注册一个页面，在每个页面的<code>.js</code>文件中注册。</p><p><strong>注</strong>： 在小程序的<code>.js</code>文件中，若想对data中的变量进行赋值操作，必须通过<code>this.setData({变量名:值})</code>， 类似于<code>React</code>中的变量状态修改，<code>this.data.变量名 = 值</code>或<code>this.变量名=值</code>都不支持，获取data中的变量值也需要使用<code>this.data.变量名</code>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;<span class="attr">text</span>: <span class="string">"This is page data."</span>&#125;,<span class="comment">//页面数据，用来维护视图，json格式</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;,<span class="comment">//监听加载</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听初次渲染完成</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听显示</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听隐藏</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听卸载</span></span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听下拉</span></span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听上拉触底</span></span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听右上角分享</span></span><br><span class="line">  <span class="comment">//如下为自定义的事件处理函数（视图中绑定的）</span></span><br><span class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//setData设置data值，同时将更新视图</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;<span class="attr">text</span>: <span class="string">'Set some data for updating view.'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>小程序的视图与事件绑定：在每个页面的<code>.wxml</code>文件中，对页面<code>js</code>中的<code>data</code>进行 数据绑定 ，以及自定义事件绑定。</p><ul><li>从下边的例子可以看到，小程序的 <code>wxml</code>用到一些标签是 view, button, text,template 等等，这些标签就是小程序给开发者包装好的基本能力，就是可以直接使用的组件，更多详细组件功能可以参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">小程序<strong>·</strong> 组件</a> </li><li>还有一些<code>wx:for</code>,<code>wx:if</code>之类的条件绑定，因为小程序采用的也是<code>MVVM</code>的开发模式(例如 React, Vue)，就是把渲染和逻辑分离。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&#123;&#123;&#125;&#125;绑定data中的指定数据并渲染到视图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--wx:for获取数组数据进行循环渲染，item为数组的每项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--wx:if条件渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view == 'WEBVIEW'&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;view == 'MINA'&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"staffName"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>FirstName: &#123;&#123;firstName&#125;&#125;, LastName: &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"staffName"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...template.staffA&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"staffName"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...template.staffB&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--bindtap指定tap事件处理函数为ViewTap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"ViewTap"</span>&gt;</span> 点击此按钮 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;<span class="comment">//data数据主要用于视图绑定</span></span><br><span class="line">    text:<span class="string">"我是一条测试"</span>,</span><br><span class="line">    array:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    view:<span class="string">"APP"</span>,</span><br><span class="line">    template:&#123;</span><br><span class="line">        staffA: &#123;<span class="attr">firstName</span>: <span class="string">'Bob'</span>, <span class="attr">lastName</span>: <span class="string">'Gao'</span>&#125;,</span><br><span class="line">        staffB: &#123;<span class="attr">firstName</span>: <span class="string">'Bitch'</span>, <span class="attr">lastName</span>: <span class="string">'Little'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ViewTap:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'成功被点击'</span>)&#125;<span class="comment">//自定义事件，主要用于事件绑定</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>每个页面文件夹中的<code>.wxss</code> ，顾名思义就是用来编写每个页面各自的样式，不写则默认呈现<code>app.wxss</code>文件的全局样式， 此外 <code>.wxss</code> 仅支持部分 <code>CSS 选择器</code>， 比如类名选择器(.)等..</p><p><strong>注</strong>： 在小程序中，扩展了<code>rpx</code>单位，用来代替<code>px</code>单位，编译时小程序底层会自动进行浮点数运算，平时怎么用<code>px</code>，就怎么用<code>rpx</code>。</p></li></ul><blockquote><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3></blockquote><ul><li><p>在各个页面的<code>.js</code>中调用<code>app.js</code> 的全局属性和方法，需要获取全局app实例，在<code>.js</code>顶部定义<code>const app = getApp()</code>, 使用时用<code>app.[方法名/属性名]</code> , 在<code>app.js</code>不需要再次获取实例，可以直接使用<code>this.[方法名/属性名]</code>。</p></li><li><p>公用的<code>js</code>方法可以放在utils文件夹中，可通过require引入，或者在pages同级目录新建文件夹及文件，个人建议pages目录最好只存放每个页面的<code>配置/DOM渲染/逻辑/样式</code>， 这样项目结构比较简单分明。</p></li><li><p>新建页面目录和文件，可以直接在<code>app.json</code>中的<code>pages</code>参数中，直接输入你需要创建相关目录名和文件名，点击保存，则小程序会自动为你生成对应的目录和文件(<strong>注</strong>：<code>.js/.json/.wxml/wxss</code>都会根据设置的文件名自动生成，无需在文件名后加后缀)。 当然，也可以在项目结构中点击右键去新建，<code>app.json</code>的<code>page参数</code>也会相应同步你新增的文件夹路径。个人推荐用第一种方法，因为第二种方法，经测试使用，感觉目前还存在一些bug，有时候创建文件，全局的<code>app.json</code>没有自动生成相对于的路径，导致编译的时候，还是需要手动去写入路径，否则控制台会报错，找不到你新建的文件。</p></li><li><p>跳转并刷新页面：需使用onshow来代替onload执行逻辑，onload只在首次打开页面时执行一次。如：B页面操作全局数据并跳转A页面，A页面onshow中获取全局数据更新视图。</p><p>​</p></li></ul>]]></content>
      
      <categories>
          
          <category> Emfan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 遍历中异步操作</title>
      <link href="/js-for-async/"/>
      <url>/js-for-async/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  JS遍历中异步操作，指的是JS执行循环遍历中，每一次循环里,都有异步操作。 如经典的闭包应用，每次循环异步操作中输出索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 3</span></span><br><span class="line"><span class="comment">// i 3</span></span><br><span class="line"><span class="comment">// i 3</span></span><br></pre></td></tr></table></figure><p>  结果发现，每次输出的都是3，并不是我们预期的结果。<br>  不同遍历方法中异步操作，如何正确得到循环索引，这就是今天的主题。 当然，闭包就是其中一种解决方法。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>for循环 + var + 索引传参<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>： </p><blockquote><p>每次循环， 都会执行一个匿名函数，这个匿名函数是立即执行函数(IIFE)。 每一次循环创建一个私有词法环境，执行时把当前的循环的i传入，保存在这个词法环境中。遍历完成后，js不会释放这块内存，所以能够正确的输出索引。</p></blockquote><hr><ul><li>for循环 + var + 闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = i;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'i'</span>, j);</span><br><span class="line">      &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  func()();</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = i;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'i'</span>, j);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>： </p><blockquote><p>每次遍历操作中，定时器中函数都会用到父级的作用域的变量j，每次遍历都会形成一个闭包，不会释放变量j，所以每次能正确输出索引号。</p></blockquote><hr><ul><li>for循环 + let<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> j = i;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, j);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>：</p><blockquote><p>let 是es6的一种新的变量声明方式，拥有块级作用域。上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以输出的是正确的索引。</p></blockquote><hr><ul><li>for…of 和 for…in<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>：</p><blockquote><p>for…of 是es6中的一种遍历数组方式，for…in 大多数是遍历对象；在循环遍历中异步操作效果同for循环。</p></blockquote><hr><h3 id="特殊遍历方式"><a href="#特殊遍历方式" class="headerlink" title="特殊遍历方式"></a>特殊遍历方式</h3><ul><li>forEach、map、filter</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- forEach遍历 --&gt;</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- map遍历 --&gt;</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [undefined, undefined, undefined]  -- 每次遍历都返回</span></span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- filter遍历 --&gt;</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].filter(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// []  -- 每次遍历为真时返回</span></span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure><p><strong>解析</strong>：</p><blockquote><p>这三个特殊遍历方式, 变量i的作用类似于let i。每次循环都有自己作用域，所以能够输出正确的索引。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Version</title>
      <link href="/version/"/>
      <url>/version/</url>
      <content type="html"><![CDATA[<h3 id="v0-0-3"><a href="#v0-0-3" class="headerlink" title="v0.0.3"></a>v0.0.3</h3><p>2018-04-17</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol><li>支持图片优雅弹框 fancybox</li><li>增加文章 <a href="/2018/04/17/version/">Version</a></li><li>支持百度搜索，已添加站点收录</li></ol><h3 id="Bugfixes"><a href="#Bugfixes" class="headerlink" title="Bugfixes"></a>Bugfixes</h3><ul><li>修复外部图片403错误</li></ul><h3 id="Backers"><a href="#Backers" class="headerlink" title="Backers"></a>Backers</h3><p>Bob</p><hr><h3 id="v0-0-2"><a href="#v0-0-2" class="headerlink" title="v0.0.2"></a>v0.0.2</h3><p>2018-04-13</p><h3 id="Features-1"><a href="#Features-1" class="headerlink" title="Features"></a>Features</h3><ol><li>增加Bob文章1篇</li><li>增加emfant文章1篇 </li><li>增加little文章1篇</li><li>增加评论功能 valine</li><li>增加站内搜索 self_search</li><li>阅读数 busuanzi</li><li>增加后台统计 baidu_analytics</li><li>增加网站图标 favicon.icon</li></ol><h3 id="Bugfixes-1"><a href="#Bugfixes-1" class="headerlink" title="Bugfixes"></a>Bugfixes</h3><ul><li>暂时移除about, rss链接</li><li>支持简体中文</li></ul><h3 id="Backers-1"><a href="#Backers-1" class="headerlink" title="Backers"></a>Backers</h3><p>Bob<br>Emfan<br>Little<br>感谢 sandy 同学提出增加评论、阅读数等功能。</p><hr><h3 id="v0-0-1"><a href="#v0-0-1" class="headerlink" title="v0.0.1"></a>v0.0.1</h3><p>2018-04-06</p><h3 id="Features-2"><a href="#Features-2" class="headerlink" title="Features"></a>Features</h3><ol><li>部署ESOP团队博客 WeShare 第一版, 域名: <a href="http://blog.bobgao.cn">blog.bobgao.cn</a></li><li>选用 maupassant 主题</li><li>增加Bob文章2篇</li><li>支持文章一键分享</li></ol><h3 id="Backers-2"><a href="#Backers-2" class="headerlink" title="Backers"></a>Backers</h3><p>Bob</p><h3 id="Core-Team"><a href="#Core-Team" class="headerlink" title="Core Team"></a>Core Team</h3><p>Bob<br>Emfan<br>Little<br>Evel<br>Ring<br>Sandy</p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to use Hexo.</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack优化实战</title>
      <link href="/webpack-optimize/"/>
      <url>/webpack-optimize/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着项目的推移， 第三库使用数量增加，业务代码更是成倍增加，不知不觉发现webpack构建速度却越来越慢，从当初的30s，变成5分钟以上。 与此同时，一个同学的项目也遇到了打包慢的问题。 于是下定决心，花两周潜心研究下如何提升webpack构建性能。</p><h2 id="初步成果"><a href="#初步成果" class="headerlink" title="初步成果"></a>初步成果</h2><p>两周后，收获满满的。初步战果如下：<br>（1） 自己的项目： vue2(全家桶)+element-ui+axios+echarts+lodash+…  约120个页面<br> dev：从90s+ 优化到  41s<br> product: 从9分钟+ 优化到 43s<br>（2） 同学的项目： react + redux + antd + moment+ rc-table + …  约40个页面<br>dev:  从2分钟+ 优化到 12s<br>product: 从9分钟+优化到 13s</p><h2 id="总结优化方法"><a href="#总结优化方法" class="headerlink" title="总结优化方法"></a>总结优化方法</h2><p>首先，优化思路是从webpack构建过程去分析，主要是解析和压缩优化。</p><h4 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h4><p>(1)  <strong>webpack-bundle-analyzer</strong><br>可视化查看打包后的文件，以及文件包含的内容。<br>主要注意两点： </p><ol><li>每个打包后文件的大小，其实业务代码chunk包一般在20k以内。如果大了，就可能是把第三方库打包进去了。</li><li>打包后的文件是否有重复引用的库，应该提出来。<br><strong>举个栗子</strong>：<br><em>优化前</em><br><img src="/img/webpack_before.png" alt="优化前打包文件"><br>从图中我们发现，打包后的文件中， 很多包含了node_modulles/echarts, zrender两个库。 此时，我们就可以用DllPlugin插件，把这两个第三方库提出来， 减少单个业务代码页面打包后的文件大小， 避免重复编译。</li></ol><p><em>优化后</em><br><img src="/img/webpack_after.png" alt="优化后打包文件"><br>提取第三方库后，我们发现页面小了很多。 这时候又发现很多个文件都包含了公共代码src/utils/_serivce.js , 这种公共的业务代码也是常见的问题， 通常有以下几种办法</p><ul><li>按需加载  import { a } from xxx, 每个页面只引用需要的。需要配合export使用，修改源文件导出方式。</li><li>公用方法挂载到根实例, 如vue中， Vue.prototype._utils = _utils 。 也需要修改源文件，且不宜过大。</li><li>Tree Shaking  打包后，抖落掉不需要的代码， 不用修改源码。</li></ul><p>（2）<strong>webpack  - -profile</strong><br>可以查看打包过程中，每个步骤的速度。如果某个步骤卡了很长时间，就把对应关键字放到github上搜索， 可以发现一些很好的解决方法。<br>其中，同学的那个项目，打包过程中卡住在91% additional asset processing， 而且卡住了几分钟。 后来在github的webpack项目的issue中找到解决办法， 升级webpack版本至2.7, 以及把extract-text-webpack-plugin库升级至2.1.2。 居然一下快了几分钟~</p><hr><p>另外， 把优化方法分成通用，开发，生产三类。<br>优先级从高到低，如下：</p><h4 id="通用优化"><a href="#通用优化" class="headerlink" title="通用优化"></a>通用优化</h4><ol><li><p><strong>使用 DllPlugin</strong><br>原理是把第三方库文件分离出来单独编译，并且缓存; 极大的减少业务页面的编译时间， 以及编译后的文件大小。<br>优化时间： 3分钟+<br>详细：<br><a href="https://webpack.js.org/plugins/dll-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/dll-plugin/</a> （官网）<br><a href="https://www.cnblogs.com/ghost-xyx/p/6472578.html" target="_blank" rel="noopener">https://www.cnblogs.com/ghost-xyx/p/6472578.html</a></p></li><li><p><strong>升级webpack和node</strong><br>(1) webpack最新版本为v4+， 官方称对比v3, 性能提升了60%。这次优化时，还是用v2.7， 因为升级v4失败了。<br>优化时间：待实践。<br>详细: <a href="https://blog.csdn.net/qq_26733915/article/details/79446460" target="_blank" rel="noopener">https://blog.csdn.net/…</a><br>(2) 升级node， node目前稳定版本为v8.9.4。保持最新版本能够保证编译性能，npm保持最新也能建立更高效的模块树以及提高解析速度。<br>优化时间：30s+<br>详细：<a href="https://www.cnblogs.com/xinjie-just/p/7061619.html" target="_blank" rel="noopener">www.cnblogs.com/xinjie</a></p></li><li><p><strong>多线程解析</strong><br>(1) happypack, 多线程解析文件，如babel-loader等耗时较长的。<br>还可以配合cache-loader使用。<br>优化时间： 15s左右<br>详细： <a href="https://github.com/amireh/happypack" target="_blank" rel="noopener">https://github.com/amireh/happypack</a><br>要求： webpack 2+<br>(2) thread-loader: 还没实践过，原理也是多线程解析。<br>优化时间： 待实践<br>详细： <a href="https://webpack.js.org/loaders/thread-loader/" target="_blank" rel="noopener">https://webpack.js.org/loaders/thread-loader/</a></p></li><li><p><strong>缓存</strong><br>cache-loader<br>优化时间： 约5s<br>详细： <a href="https://webpack.js.org/loaders/cache-loader/" target="_blank" rel="noopener">https://webpack.js.org/loaders/cache-loader/</a></p></li><li><p><strong>提取公共代码</strong><br>CommonsChunkPlugin<br>这次实践中使用了CommonsChunkPlugin，并没有什么明显效果， 然后就换成了DllPlugin。<br>也许，这两个项目都是单页应用，多页应用可能效果比较好。还是个疑惑的地方~<br>优化时间： 待实践<br>详细： <a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/commons-chunk-plugin/</a></p></li><li><p><strong>其它</strong><br>（1） loaders应尽可能配置解析路径include参数，排除路径exclude参数， 减少解析时查询范围。<br>（2） Tree Shaking. 按需加载思想差不多，去掉多余的代码。<br>优化时间： 待实践。<br>详细： <a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener">https://webpack.js.org/guides/tree-shaking/</a><br>（3） 第三库的选择， 尽量少用，或用精简的库替代；一些工具函数，最好用原生替代。</p></li></ol><h4 id="开发环境优化"><a href="#开发环境优化" class="headerlink" title="开发环境优化"></a>开发环境优化</h4><ol><li>在内存中编译 webpack-dev-middleware等</li><li>devtool 设置成cheap-module-eval-source-map， 已经能满足调试需求， 编译能更快。<br>优化时间： 10s 左右</li></ol><h4 id="生产环境优化"><a href="#生产环境优化" class="headerlink" title="生产环境优化"></a>生产环境优化</h4><ol><li><strong>多线程压缩</strong><br>库： webpack-parallel-uglify-plugin<br>顾名思义， 多线程压缩，配合缓存大大减少了压缩时间，替代了自带的UglifyJsPlugin<br>优化时间： 40s+<br>详细： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 多线程压缩插件</span><br><span class="line">const ParallelUglifyPlugin = require(&apos;webpack-parallel-uglify-plugin&apos;);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    new ParallelUglifyPlugin(&#123;</span><br><span class="line">      cacheDir: &apos;.cache/&apos;,</span><br><span class="line">      uglifyJS:&#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">          comments: false</span><br><span class="line">        &#125;,</span><br><span class="line">        compress: &#123;</span><br><span class="line">          dead_code: true,</span><br><span class="line">          warnings: false,</span><br><span class="line">          drop_debugger: true,</span><br><span class="line">          drop_console: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: false</span><br><span class="line">    &#125;)</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure></li></ol><p>2.<strong>多线程编译</strong><br>库： parallel-webpack<br>优化时间： 待实践<br>详细： <a href="https://github.com/trivago/parallel-webpack" target="_blank" rel="noopener">https://github.com/trivago/parallel-webpack</a></p><p>3.<strong>去掉source-map</strong><br>大多数情况，生产环境不需要详细源码。<br>优化时间： 10s+</p><h2 id="分享优化过程"><a href="#分享优化过程" class="headerlink" title="分享优化过程"></a>分享优化过程</h2><p>解决问题的思路有时候更重要</p><ol><li>很多技术官网是解决问题最快的方式， 如webpack构建优化<a href="https://webpack.js.org/guides/build-performance/" target="_blank" rel="noopener">官网文章</a></li><li>针对大部分第三方库的疑难杂症，在github上对应该库的issue，是最快解决问题的地方</li><li>一时没有找到解决办法， 休息一下，下次也许就会有不一样的理解。</li></ol><h2 id="立个flag"><a href="#立个flag" class="headerlink" title="立个flag"></a>立个flag</h2><ul><li>尽快完成待实践的技术部分，出下一篇优化文章。</li><li>研究优化首页加载。</li></ul><hr><ul><li>Date :   2018-04-03</li><li>Author : Bob</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AngularJS directive详解</title>
      <link href="/angularJs-directive/"/>
      <url>/angularJs-directive/</url>
      <content type="html"><![CDATA[<p>最近，维护一个Angular 1项目，在用过vue中element-ui后， 想自己也写一些类似组件；同时对比下angular的指令，与vue的单文件组件的用法。<br>今天的主题就是编写一个消息框 messageBox.<br><a id="more"></a></p><p><img src="/img/angular_msgbox.png" alt="消息框"></p><h2 id="如何开始构思组件"><a href="#如何开始构思组件" class="headerlink" title="如何开始构思组件"></a>如何开始构思组件</h2><p>(1) 组件的结构（html）</p><p>分析消息框组件的结构，首先想到的是，头部（标题+关闭按钮）， 主体（提示内容），底部（取消，确认按钮）;<br>后来考虑到遮罩问题， 所以还需要增加一个遮罩层。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmp-message-box-wrap"</span> <span class="attr">ng-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmp-message-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-title"</span> <span class="attr">ng-bind</span>=<span class="string">"mbtitle"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mb-close-icon"</span> <span class="attr">ng-click</span>=<span class="string">"closeClick()"</span>&gt;</span>&amp;#8855<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-content"</span> <span class="attr">ng-bind</span>=<span class="string">"mbcontent"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-btn-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mb-cancel"</span> <span class="attr">ng-bind</span>=<span class="string">"cancelBtnText"</span> <span class="attr">ng-click</span>=<span class="string">"cancelClick()"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mb-confirm"</span> <span class="attr">ng-bind</span>=<span class="string">"confirmBtnText"</span> <span class="attr">ng-click</span>=<span class="string">"confirmClick()"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-mask"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 组件的样式</p><p>可能遇到难点，遮罩样式层级问题。整个外层是fixed，层级最低； 遮罩也是fixed， 层级高一点；消息框居中，层级最高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MessageBox 消息框 */</span></span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> &#123;<span class="attribute">position</span>: fixed; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">z-index</span>: <span class="number">9997</span>; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">text-align</span>: center; <span class="attribute">overflow</span>: hidden; <span class="attribute">font-weight</span>: normal; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.mb-mask</span>&#123; <span class="attribute">position</span>: fixed; <span class="attribute">z-index</span>: <span class="number">9998</span>; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">opacity</span>: <span class="number">0.7</span>; <span class="attribute">background-color</span>: <span class="number">#303133</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span>&#123; <span class="attribute">position</span>: fixed; <span class="attribute">z-index</span>: <span class="number">9999</span>; <span class="attribute">width</span>: <span class="number">420px</span>; <span class="attribute">top</span>: <span class="number">40%</span>; <span class="attribute">background-color</span>: <span class="number">#fff</span>; <span class="attribute">display</span>: inline-block; <span class="attribute">margin-left</span>: -<span class="number">210px</span>; <span class="attribute">text-align</span>: left; <span class="attribute">border-radius</span>: <span class="number">4px</span>; <span class="attribute">padding</span>: <span class="number">15px</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">color</span>: <span class="number">#303133</span>; <span class="attribute">position</span>: relative; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span> <span class="selector-class">.mb-close-title</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">color</span>: <span class="number">#303133</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span> <span class="selector-class">.mb-close-icon</span>&#123; <span class="attribute">position</span>: absolute; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">top</span>: -<span class="number">1px</span>; <span class="attribute">color</span>: <span class="number">#abadb2</span>; <span class="attribute">cursor</span>: pointer;&#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span> <span class="selector-class">.mb-close-icon</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">color</span>: <span class="number">#909399</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-content</span>&#123; <span class="attribute">margin-top</span>: <span class="number">15px</span>; <span class="attribute">color</span>: <span class="number">#606266</span>; <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">line-height</span>: <span class="number">24px</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span>&#123; <span class="attribute">margin-top</span>: <span class="number">15px</span>; <span class="attribute">color</span>: <span class="number">#606266</span>; <span class="attribute">text-align</span>: right; <span class="attribute">user-select</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-tag">span</span>&#123; <span class="attribute">padding</span>: <span class="number">9px</span> <span class="number">15px</span>; <span class="attribute">font-size</span>: <span class="number">12px</span>; <span class="attribute">border-radius</span>: <span class="number">3px</span>; <span class="attribute">cursor</span>: pointer; <span class="attribute">text-align</span>: center; <span class="attribute">color</span>: <span class="number">#606266</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dcdfe6</span>; <span class="attribute">display</span>: inline-block; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-cancel</span>&#123; <span class="attribute">margin-right</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-cancel</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background</span>: <span class="number">#e9e9e9</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-cancel</span><span class="selector-pseudo">:active</span>&#123; <span class="attribute">background</span>: <span class="number">#d6d3d3</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-confirm</span>&#123; <span class="attribute">background</span>: <span class="number">#7a7777</span>; <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-confirm</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background</span>: <span class="number">#8f8c8c</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-confirm</span><span class="selector-pseudo">:active</span>&#123; <span class="attribute">background</span>: <span class="number">#6b6868</span>; &#125;</span><br></pre></td></tr></table></figure><p>(3) 组件的功能</p><p>组件功能包括</p><ol><li>取消，关闭按钮， 消息框消失；</li><li>确认按钮，执行一件待定事情后， 消息框消失;</li><li>点击遮罩层，可以配置是否消失消息框</li></ol><p>(4) 逻辑编码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">.directive(<span class="string">'messageBox'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 声明形式</span></span><br><span class="line">        restrict: <span class="string">'AE'</span>,</span><br><span class="line">        <span class="comment">// 参数传递</span></span><br><span class="line">        scope: &#123;</span><br><span class="line">            <span class="comment">// 标题</span></span><br><span class="line">            mbtitle: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 内容</span></span><br><span class="line">            mbcontent: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 取消按钮文字</span></span><br><span class="line">            cancelBtnText: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 确认按钮文字</span></span><br><span class="line">            confirmBtnText: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 是否显示消息框</span></span><br><span class="line">            isShow: <span class="string">'='</span>,</span><br><span class="line">            <span class="comment">// 关闭回调</span></span><br><span class="line">            close: <span class="string">'&amp;'</span>,</span><br><span class="line">            <span class="comment">// 取消回调</span></span><br><span class="line">            cancel: <span class="string">'&amp;'</span>,</span><br><span class="line">            <span class="comment">// 确认回调</span></span><br><span class="line">            confirm: <span class="string">'&amp;'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 嵌入</span></span><br><span class="line">        transclude: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 模板</span></span><br><span class="line">        templateUrl:<span class="string">'/templates/messageBox.html'</span>,</span><br><span class="line">        <span class="comment">// 是否替换原有元素</span></span><br><span class="line">        replace: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 指令优先级</span></span><br><span class="line">        priority: <span class="number">100</span>,</span><br><span class="line">        <span class="comment">// 指令优先级终止</span></span><br><span class="line">        terminal: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 编译前执行，外部交互的api，指令间复用，数据初始化</span></span><br><span class="line">        controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $element, $attrs, $transclude</span>) </span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 引用</span></span><br><span class="line">        <span class="built_in">require</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 作用域与dom进行链接</span></span><br><span class="line">        link: <span class="function"><span class="keyword">function</span> (<span class="params">$scope, ele, attr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 点击关闭</span></span><br><span class="line">            $scope.closeClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $scope.close();</span><br><span class="line">                $scope.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 点击取消</span></span><br><span class="line">            $scope.cancelClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $scope.cancel();</span><br><span class="line">                $scope.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 点击确认</span></span><br><span class="line">            $scope.confirmClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $scope.confirm();</span><br><span class="line">                $scope.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="消息框注册成全局"><a href="#消息框注册成全局" class="headerlink" title="消息框注册成全局"></a>消息框注册成全局</h2><p>Vue 中可以引入element-ui中的消息框， 然后挂载在vue的根实例上；<br>Angular 1中可以挂载到根作用域上$rootScope，html放在index.html中， 在.run()方法中初始化；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.run(<span class="function"><span class="keyword">function</span> (<span class="params">$rootScope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化全局变量 */</span></span><br><span class="line">    <span class="comment">// 消息框</span></span><br><span class="line">    $rootScope.$messageBoxData = &#123;&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbTitle 标题</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbContent 内容</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbCancelBtnText 取消按钮文字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbConfirmBtnText 确认按钮文字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; closeCb 关闭图标事件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; cancelCb 取消按钮事件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; confirmCb 确认按钮事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $rootScope.$messageBox = <span class="function"><span class="keyword">function</span> (<span class="params">mbTitle, mbContent, mbCancelBtnText, mbConfirmBtnText, closeCb, cancelCb, confirmCb</span>) </span>&#123;</span><br><span class="line">        $rootScope.$messageBoxData.isMessageBoxShow = <span class="literal">true</span>;</span><br><span class="line">        $rootScope.$messageBoxData.mbTitle = mbTitle;</span><br><span class="line">        $rootScope.$messageBoxData.mbContent = mbContent;</span><br><span class="line">        $rootScope.$messageBoxData.mbCancelBtnText = mbCancelBtnText;</span><br><span class="line">        $rootScope.$messageBoxData.mbConfirmBtnText = mbConfirmBtnText;</span><br><span class="line">        $rootScope.$messageBoxData.closeCb = closeCb;</span><br><span class="line">        $rootScope.$messageBoxData.cancelCb = cancelCb;</span><br><span class="line">        $rootScope.$messageBoxData.confirmCb = confirmCb;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在任何controller中简单调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除对话框</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDelDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $rootScope.$messageBox(<span class="string">'删除'</span>, <span class="string">'确定删除吗？'</span>, <span class="string">'取消'</span>, <span class="string">'确定'</span>, <span class="literal">null</span>, <span class="literal">null</span>, delConfirm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Angular-指令学习"><a href="#Angular-指令学习" class="headerlink" title="Angular 指令学习"></a>Angular 指令学习</h2><p>参考：</p><p><a href="https://segmentfault.com/a/1190000005851663" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005851663</a></p><p><a href="https://www.cnblogs.com/ermu-learn/p/5913760.html" target="_blank" rel="noopener">https://www.cnblogs.com/ermu-learn/p/5913760.html</a></p><hr><p><em>Bob</em></p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Angular </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas 的使用</title>
      <link href="/canvas/"/>
      <url>/canvas/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Canvas<br>获取绘图上下文<br>var gd = oC.getContext(‘2d’);</p><p>重新开始路径<br>gd.beginPath();</p><p>开始<br>gd.moveTo(x,y)<br>结束<br>gd.lineTo(x,y)</p><p>闭合路径<br>gd.closePath();</p><p>描边<br>gd.stroke()</p><p>描边颜色<br>gd.strokeStyle</p><p>线宽<br>gd.lineWidth</p><p>填充<br>gd.fill()</p><p>填充颜色<br>gd.fillStyle</p><p>清屏<br>gd.clearRect(x,y,w,h);</p><p>画矩形<br>    a)<br>        gd.rect(x,y,w,h);<br>        stroke()/fill()<br>    b)<br>        gd.fillRect(x,y,w,h)<br>    c)<br>        gd.strokeRect(x,y,w,h)</p><p>运动<br>先清屏，再画图</p><p>画弧<br>    gd.arc(cx,cy,r,s,e,b);<br>        cx,cy         圆心坐标<br>        r             半径<br>        s             开始弧度<br>        e             结束弧度<br>        b             是否逆时针<br>    gd.stroke()/fill();</p><p>饼图<br>    先求和<br>    求出每个数字的比例<br>    通过比例求出角度</p><p>改变线条端点样式<br>    gd.lineCap = round             圆<br>    gd.lineCap = butt             平</p><p>文字<br>    gd.font = ‘大小 字体类型’;<br>        必须一起设置，否则不生效<br>    gd.textAlign            水平对齐方式<br>    gd.textBaseline         基线对齐方式<br>        middle        中间对齐<br>    gd.fillText(str,x,y);         填充文字<br>    gd.strokeText(str,x,y);     描边文字<br>            位置是<br>                x         左侧<br>                y         基线</p><p>事件<br>    1.算位置<br>    2.gd.isPointInPath(pageX,pageY)<br>        总结：<br>            gd.isPointInPath只能给最后一个图形加</p><p>拖拽</p><p>渐变<br>    创建线性渐变<br>    var lg = gd.createLinearGradient(x1,y1,x2,y2);<br>    设置颜色<br>    lg.addColorStop(系数,颜色);</p><p>变形<br>    旋转         rotate<br>    平移         translate<br>    缩放         scale</p><pre><code>旋转    gd.rotate(弧度);平移    gd.translate(x,y);缩放    gd.scale(x,y);    画布左上角是原心,原心是不可以改变的。    操作的是整个画布    变形会叠加    操作完，画图，画完图之后，把画布还原回去还原画布    gd.save();             保存画布当前状态    gd.restore();         还原回保存的状态    如果要用变形        1.gd.save();    保存        2.操作        3.画图        4.gd.restore();    还原矩形左上角旋转    先保存    把画布偏移到左上角位置    旋转    画图     要画在0,0的位置    还原矩形中心旋转</code></pre><p>设置图片背景<br>    gd.createPattern(oImg,’平铺方式’);<br>                            no-repeat<br>                            repeat-x<br>                            repeat-y<br>                            repeat<br>    背景是从画布左上角走的</p><pre><code>导出图片    oC.toDataURL([mime-type]);    可以指定图片类型    oC.toDataURL(&apos;image/png&apos;);    oC.toDataURL(&apos;image/jpeg&apos;);</code></pre><p>引入图片<br>    gd.drawImage(oImg,dx,dy);</p><pre><code>gd.drawImage(    oImg,    dx,dy,[dw],[dh]);gd.drawImage(    oImg,    [sx],[sy],[sw],[sh],    dx,dy,[dw],[dh]);</code></pre><p>总结：<br>    canvas一切操作都在画图之前</p><p>像素级操作<br>    比较耗费性能，必须配合服务器环境<br>    var result = gd.getImageData(x,y,w,h);<br>    var d = result.data;<br>    d所有像素点<br>        四个为一组     r,g,b,a,r,g,b,a…</p><pre><code>操作完成，要还回去gd.putImageData(result,x,y);</code></pre><p>效果<br>    复古效果：<br>        d[i]=(r<em>0.393)+(g</em>0.769)+(b<em>0.189);     // red<br>        d[i+1]=(r</em>0.349)+(g<em>0.686)+(b</em>0.168);     // green<br>        d[i+2]=(r<em>0.272)+(g</em>0.534)+(b*0.131);     // blue<br>    红色蒙版效果：<br>        d[i]=(r+g+b)/3;        // 红色通道取平均值<br>        d[i+1]=d[i+2]=0;          // 绿色通道和蓝色通道都设为0</p><pre><code>图片曝光(高亮效果)：    d[i]+=200;    d[i+1]+=200;    d[i+2]+=200;颜色反转：    d[i]=255-d[i];    d[i+1]=255-d[i+1];    d[i+2]=255-d[i+2];    </code></pre><p>计算机图形学<br>像素级操作非常耗费性能，尽量少用。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        html,body&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        body&#123;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        canvas&#123;</span></span><br><span class="line"><span class="undefined">            background:#000;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">rnd</span>(<span class="params">n,m</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(m-n)+n);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oC=<span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="javascript">            oC.width=<span class="built_in">document</span>.documentElement.clientWidth;</span></span><br><span class="line"><span class="javascript">            oC.height=<span class="built_in">document</span>.documentElement.clientHeight;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> gd=oC.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> N=<span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> Len=<span class="number">40</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aPoint=[];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aOldPoint=[];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="undefined">                aPoint[i]=&#123;</span></span><br><span class="line"><span class="undefined">                    x:rnd(0,oC.width),</span></span><br><span class="line"><span class="undefined">                    y:rnd(0,oC.height),</span></span><br><span class="line"><span class="undefined">                    iSpeedX:rnd(-10,10),</span></span><br><span class="line"><span class="undefined">                    iSpeedY:rnd(-10,10)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                gd.clearRect(0,0,oC.width,oC.height);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(aPoint[i].x&lt;<span class="number">0</span>||aPoint[i].x&gt;=<span class="built_in">document</span>.documentElement.clientWidth<span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        aPoint[i].iSpeedX*=-1;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(aPoint[i].y&lt;<span class="number">0</span>||aPoint[i].y&gt;=<span class="built_in">document</span>.documentElement.clientHeight<span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        aPoint[i].iSpeedY*=-1;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    aPoint[i].x+=aPoint[i].iSpeedX;</span></span><br><span class="line"><span class="undefined">                    aPoint[i].y+=aPoint[i].iSpeedY;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">                    createPoint(aPoint[i]);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                gd.beginPath();<span class="comment">//一组矩形连接</span></span></span><br><span class="line"><span class="undefined">                gd.moveTo(aPoint[0].x,aPoint[0].y);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">                    gd.lineTo(aPoint[i].x,aPoint[i].y);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                gd.closePath();</span></span><br><span class="line"><span class="javascript">                gd.strokeStyle=<span class="string">'rgb(225,225,225)'</span>;</span></span><br><span class="line"><span class="undefined">                gd.stroke();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> arr=[];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">                    arr[i]=&#123;</span></span><br><span class="line"><span class="undefined">                        x:aPoint[i].x,</span></span><br><span class="line"><span class="undefined">                        y:aPoint[i].y,</span></span><br><span class="line"><span class="undefined">                        iSpeedX:aPoint[i].iSpeedX,</span></span><br><span class="line"><span class="undefined">                        iSpeedY:aPoint[i].iSpeedY</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                aOldPoint.push(arr);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(aOldPoint.length&gt;Len)&#123;</span></span><br><span class="line"><span class="undefined">                    aOldPoint.shift();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aOldPoint.length;i++)&#123;<span class="comment">//多组矩形连接</span></span></span><br><span class="line"><span class="undefined">                    gd.beginPath();</span></span><br><span class="line"><span class="undefined">                    gd.moveTo(aOldPoint[i][0].x,aOldPoint[i][0].y);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;aOldPoint[i].length;j++)&#123;</span></span><br><span class="line"><span class="undefined">                        gd.lineTo(aOldPoint[i][j].x,aOldPoint[i][j].y);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    gd.closePath();</span></span><br><span class="line"><span class="javascript">                    gd.strokeStyle=<span class="string">'rgba(225,225,225,'</span>+i/Len+<span class="string">')'</span>;</span></span><br><span class="line"><span class="undefined">                    gd.stroke();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,30);</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">createPoint</span>(<span class="params">point</span>)</span>&#123;<span class="comment">//创建矩形</span></span></span><br><span class="line"><span class="undefined">                gd.beginPath();</span></span><br><span class="line"><span class="undefined">                gd.rect(point.x,point.y,1,1);</span></span><br><span class="line"><span class="javascript">                gd.fillStyle=<span class="string">'#fff'</span>;</span></span><br><span class="line"><span class="undefined">                gd.fill();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Emfan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flex</title>
      <link href="/flex/"/>
      <url>/flex/</url>
      <content type="html"><![CDATA[<p><strong>目前常见的布局方式有固定布局，流动布局，css3增加了弹性布局。</strong></p><p>所谓固定布局，就是网站的内容宽度是一定的，即容器的宽度是固定的，容器内的块宽度是像素</p><p>或者百分百，无论怎样缩放网页，容器的宽度始终不变。</p><p>所谓流动布局，也叫流体布局，即容器的宽度一般设为百分百的形式，根据屏幕的分辨率网页适应</p><p>不同的宽度。</p><a id="more"></a><p>以前网站设计大多采用这两种，但随着移动端的发展，各种各样的屏幕分辨率需要适应时，这两种</p><p>布局也出现了明显的缺点，首先，固定布局若屏幕宽度小于容器宽度时，会出现滚动条，甚至直接</p><p>无法展示，而流动布局若在屏幕分辨率很小时，会给用户很不好的体验，因此，弹性布局应运而生。</p><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>所谓弹性布局，即可根据屏幕大小调节容器大小，开发者无需固定容器内块的宽度，只需声明其布局</p><p>行为，比如，横向排列，纵向排列，元素间隔，对齐方式，空间分配等。</p><p>例1：</p><p><img src="./flexbox.png" alt=""></p><p>上面是一个导航菜单，有三个选项，若此时产品经理要求我们去除第二个选项，只保留另外两个，我们</p><p>分别从三种布局分析：</p><h4 id="固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。"><a href="#固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。" class="headerlink" title="固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。"></a>固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。</h4><h4 id="流动布局：去除第二个，宽度需由原先的33-33-改为50-左右，改动大。"><a href="#流动布局：去除第二个，宽度需由原先的33-33-改为50-左右，改动大。" class="headerlink" title="流动布局：去除第二个，宽度需由原先的33.33%改为50%左右，改动大。"></a>流动布局：去除第二个，宽度需由原先的33.33%改为50%左右，改动大。</h4><p>以上两种布局，改动HTML的同时，还得改动css，麻烦，让我们看看弹性布局的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flexbox&quot;&gt; </span><br><span class="line">    &lt;div&gt;游戏列表&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;个人中心&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;申请服务&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.flexbox &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    margin-top: 100px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">    align-items: center;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.flexbox div &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-right: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.flexbox &gt; div:last-child &#123;</span><br><span class="line">border-right: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在flex布局中，我们可以为子元素指定flex: 1定义所占空间大小，若子元素为3，则分成3份，若去除第二个选项，</p><p>则另外两个各占1/2，使用方便。</p><p><img src="./flexbox2.png" alt=""></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法:"></a><strong>语法:</strong></h2><font color="red">采用Flex布局的元素称为Flex容器，以下简称容器。容器内的子元素称为Flex项目，以下简称项目。</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.flexbox &#123;</span><br><span class="line">  display：flex;</span><br><span class="line">  display: -weblit-flex;//WebKit内核</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面讲元素设为Flex容器,容器内有水平的主轴和垂直的纵轴。</p><p>另外，Flex容器内的项目的float,vertical-align,clear属性都会失效。</p><h4 id="容器的属性："><a href="#容器的属性：" class="headerlink" title="容器的属性："></a>容器的属性：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 设置主轴方向</span><br><span class="line">flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">// 轴线上的项目是否换行</span><br><span class="line">flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">// 简写flex-direction和flex-wrap</span><br><span class="line">flex-flow: flex-direction || flex-wrap;</span><br><span class="line">// 项目在主轴的对齐方式</span><br><span class="line">justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">// 项目在纵轴的对齐方式</span><br><span class="line">align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">// 项目在交叉轴的对齐方式</span><br><span class="line">align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br></pre></td></tr></table></figure><h4 id="项目的属性："><a href="#项目的属性：" class="headerlink" title="项目的属性："></a>项目的属性：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 项目的排列顺序。数值越小，排列越靠前，默认为0。</span><br><span class="line">order: &lt;integer&gt;;</span><br><span class="line">// 项目的放大比例，默认为0。</span><br><span class="line">flex-grow: &lt;number&gt;;</span><br><span class="line">// 项目的缩小比例，默认为。</span><br><span class="line">flex-shrink: &lt;number&gt;;</span><br><span class="line">// 项目占据的主轴空间。</span><br><span class="line">flex-basis: &lt;length&gt; | auto;</span><br><span class="line">// flex-grow, flex-shrink 和 flex-basis的简写。</span><br><span class="line">flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ];</span><br><span class="line">// 单个项目有与其他项目不一样的对齐方式。</span><br><span class="line">align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure><p>经典案例：骰子的实现:</p><p><img src="./dice.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">HTML:</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;first-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;second-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;third-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fourth-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fifth-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;sixth-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">CSS:</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">width: 800px;</span><br><span class="line">flex-direction: row;</span><br><span class="line">justify-content: space-around;</span><br><span class="line">background-color: #000;</span><br><span class="line">&#125;</span><br><span class="line">[class$=&quot;dice&quot;] &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: #e7e7e7;</span><br><span class="line">border-radius: 10%;</span><br><span class="line">margin: 10px 0;</span><br><span class="line">padding: 3px;</span><br><span class="line">box-shadow:</span><br><span class="line">    inset 0 5px white, </span><br><span class="line">    inset 0 -5px #bbb,</span><br><span class="line">    inset 5px 0 #d7d7d7, </span><br><span class="line">    inset -5px 0 #d7d7d7;</span><br><span class="line">&#125;</span><br><span class="line">.dot &#123;</span><br><span class="line">display: block;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    margin: 4px;</span><br><span class="line">    background-color: #333;</span><br><span class="line">    box-shadow: inset 0 3px #111, inset 0 -3px #555;</span><br><span class="line">&#125;</span><br><span class="line">.first-dice &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.second-dice &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.second-dice .dot:nth-of-type(2) &#123;</span><br><span class="line">align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">.third-dice &#123;</span><br><span class="line">display: flex;;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.third-dice .dot:nth-of-type(3) &#123;</span><br><span class="line">align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">.third-dice .dot:nth-of-type(2) &#123;</span><br><span class="line">align-self: center;</span><br><span class="line">&#125;</span><br><span class="line">.fourth-dice,.fifth-dice, .sixth-dice &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.fourth-dice .column, .fifth-dice .column, .sixth-dice .column &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.fifth-dice .column:nth-of-type(2) &#123;</span><br><span class="line">align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细用法可查看<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰Flex 布局教程</a></p>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令入门</title>
      <link href="/git/"/>
      <url>/git/</url>
      <content type="html"><![CDATA[<h3 id="基础命令介绍"><a href="#基础命令介绍" class="headerlink" title="基础命令介绍"></a>基础命令介绍</h3><ul><li><p>从服务器上拉取代码<br>git clone <a href="https://github.com/comeonbob/weShare.git" target="_blank" rel="noopener">https://github.com/comeonbob/weShare.git</a></p></li><li><p>创建本地分支并且关联远程分支develop<br>git checkout develop</p></li><li><p>更新本地分支develop<br>git pull –ff</p></li></ul><ul><li><p>创建本地分支，并切换到feature<br>git checkout -b feature</p></li><li><p>提交代码<br>git commit -a -m “xxx”</p></li><li><p>切换开发分支拉取最新代码, 并返回feature分支(避免在develop分支上冲突)<br>git checkout develop<br>git pull –ff<br>git checkout feature</p></li><li><p>合并分支 rebase （可能产生冲突）<br>git rebase develop</p></li><li><p>切换至develop分支, 并合并分支<br>git checkout develop<br>git merge –no-ff feature</p></li><li><p>提交代码<br>git push</p></li></ul><hr><h3 id="其他参考学习"><a href="#其他参考学习" class="headerlink" title="其他参考学习"></a>其他参考学习</h3><ul><li><p>配置git, 保存户名、密码等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) git config --list                    //查看当前git配置</span><br><span class="line">(2) git config credential.helper=store   //配置存储模式</span><br><span class="line">(3) git config user.name=<span class="string">'xxx.xx'</span>        //设置用户名</span><br><span class="line">(4) git config user.email=<span class="string">'xxx.xx'</span>       //设置email</span><br></pre></td></tr></table></figure></li><li><p>分支管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) git branch -a                        //查看所有分支</span><br><span class="line">(2) git branch dev                       //创建本地分支</span><br><span class="line">(3) git branch -d dev                    //删除本地分支</span><br><span class="line">(3) git push origin dev                  //创建远程分支</span><br><span class="line">(4) git push origin --delete dev         //删除远程分支</span><br><span class="line">(5) git checkout -b dev origin/dev       //创建并切换本地dev分支，并关联远程dev分支</span><br><span class="line">(6) git branch --<span class="built_in">set</span>-upstream-to=origin dev       //本地分支关联远程dev分支</span><br></pre></td></tr></table></figure></li><li><p>提交分支、冲突解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(1) git status                           //查看当前代码状态</span><br><span class="line">(2) git checkout a.js                    //复原a.js文件</span><br><span class="line">(3) git add .                            //添加所有文件</span><br><span class="line">(4) git clean -df                        //清除未添加文件</span><br><span class="line">(5) git commit -a -m <span class="string">"xx"</span>                //提交所有文件</span><br><span class="line">(6) git rebase develop                   //合并develop分支到当前分支</span><br><span class="line">(7) git rebase develop --<span class="built_in">continue</span>        //解决冲突后继续合并</span><br><span class="line">(8) git rebase develop --skip            //跳过冲突</span><br><span class="line">(9) git merge --no-ff feature -m <span class="string">""</span>      //合并feature分支到当前主分支</span><br><span class="line">(10) git pull --ff                       //更新最新代码</span><br><span class="line">(11) git push                            //推送本地代码</span><br><span class="line">(12) git <span class="built_in">clone</span> xxx                       //克隆远程分支到本地</span><br></pre></td></tr></table></figure></li></ul><hr><p><em>Bob</em></p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
