<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>markdown 常用命令</title>
      <link href="/2018/07/25/markdown/"/>
      <url>/2018/07/25/markdown/</url>
      <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。具体请参考[Github][2].</p></blockquote><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>加粗    <code>Ctrl + B</code> </li><li>斜体    <code>Ctrl + I</code> </li><li>引用    <code>Ctrl + Q</code></li><li>插入链接    <code>Ctrl + L</code></li><li>插入代码    <code>Ctrl + K</code></li><li>插入图片    <code>Ctrl + G</code></li><li>提升标题    <code>Ctrl + H</code></li><li>有序列表    <code>Ctrl + O</code></li><li>无序列表    <code>Ctrl + U</code></li><li>横线    <code>Ctrl + R</code></li><li>撤销    <code>Ctrl + Z</code></li><li>重做    <code>Ctrl + Y</code></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th style="text-align:left">项目</th><th style="text-align:right">价格</th><th style="text-align:center">数量</th></tr></thead><tbody><tr><td style="text-align:left">Computer</td><td style="text-align:right">1600 元</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Phone</td><td style="text-align:right">12 元</td><td style="text-align:center">12</td></tr><tr><td style="text-align:left">Pipe</td><td style="text-align:right">1 元</td><td style="text-align:center">234</td></tr></tbody></table><p>###定义列表</p><p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p><p>项目３<br>:   定义 C</p><p>:   定义 D</p><pre><code>&gt; 定义D内容</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></span><br><span class="line">    <span class="string">'''A docstring'''</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt'''</span></span><br></pre></td></tr></table></figure></p><p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p><p>[TOC]</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见[math.stackexchange.com][1].</p><ul><li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li><li>块级公式：</li></ul><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>更多LaTex语法请参考 [这儿][3].</p><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><p>或者流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: 开始</span><br><span class="line">e=&gt;end: 结束</span><br><span class="line">op=&gt;operation: 我的操作</span><br><span class="line">cond=&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>序列图</strong> 语法，参考 [这儿][4],</li><li>关于 <strong>流程图</strong> 语法，参考 [这儿][5].</li></ul><p>##浏览器兼容</p><ol><li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li><li>IE９以下不支持</li><li>IE９，１０，１１存在以下问题<ol><li>不支持离线功能</li><li>IE9不支持文件导入导出</li><li>IE10不支持拖拽文件导入</li></ol></li></ol><hr>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript正则表达式--语法篇</title>
      <link href="/2018/07/25/RegExp_2/"/>
      <url>/2018/07/25/RegExp_2/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  使用正则的过程中可能对Js正则的语法记得不太牢，顺便也整理了一下，列在这里。</p><h2 id="正则对象"><a href="#正则对象" class="headerlink" title="正则对象"></a>正则对象</h2><p>（1）构造函数方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'abc'</span>, <span class="string">'gi'</span>);</span><br></pre></td></tr></table></figure></p><p>这里，第一个参数是正则的内容，第二个参数是修饰符，修饰符通常有三种，i,g,m，i表示的含义是忽略大小写进行匹配，g表示全局匹配即匹配到第一个之后不停止继续匹配，m表示多行匹配，更改^和$的含义，匹配任意一行的行首和行尾。</p><p>（2）字面量方式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/gi</span>;</span><br></pre></td></tr></table></figure></p><p>两个斜杠之间的是定义的正则内容，最后一个斜杠之后的是修饰符，这种方式比第一种简单高效，所以通常使用第二种方式来定义正则。</p><p>（3）方法</p><p><strong><code>regObj.test(str)</code></strong></p><blockquote><p>测试字符串str是否与正则regObj匹配，匹配就返回true，否则返回false</p></blockquote><p>demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/g</span></span><br><span class="line">reg.test(<span class="string">'abc'</span>);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p><strong><code>regObj.exec(str)</code></strong></p><blockquote><p>检索字符串str中的正则表达式的匹配;返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p></blockquote><p>demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/g</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcabc'</span></span><br><span class="line"><span class="keyword">var</span> result = reg.exec(str); </span><br><span class="line"><span class="comment">// ["a", index: 0, input: "abcabc", groups: undefined]</span></span><br><span class="line">result = reg.exec(str);</span><br><span class="line"><span class="comment">// ["a", index: 3, input: "abcabc", groups: undefined]</span></span><br><span class="line">result = reg.exec(str);</span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></table></figure></p><p><strong><code>regObj.compile(reg)</code></strong></p><blockquote><p>对正则表达式进行编译，被编译过的正则在使用的时候效率会更高，适合于对一个正则多次调用的情况下</p></blockquote><p>demo:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d/g</span></span><br><span class="line">reg.test(<span class="string">'abc'</span>);  <span class="comment">// false</span></span><br><span class="line">reg.compile(reg);  <span class="comment">// 编译</span></span><br><span class="line">reg.test(<span class="string">'abc'</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></p><p>(4) 支持正则表达式的String对象的方法<br>方法名   | 语法 |  描述<br>——- | — | ———–<br><a href="http://www.w3school.com.cn/jsref/jsref_search.asp" target="_blank" rel="noopener">search</a>  | str.search(regexp) | 检索与正则表达式相匹配的值<br><a href="http://www.w3school.com.cn/jsref/jsref_match.asp" target="_blank" rel="noopener">match</a>      | str.match(regexp) | 找到一个或多个正则表达式的匹配<br><a href="http://www.w3school.com.cn/jsref/jsref_replace.asp" target="_blank" rel="noopener">replace</a>      | str.replace(regexp,replacement) | 替换与正则表达式匹配的子串<br><a href="http://www.w3school.com.cn/jsref/jsref_split.asp" target="_blank" rel="noopener">split</a>  | str.split(regexp, howmany) | 把字符串分割为字符串数组</p><h2 id="正则的字符"><a href="#正则的字符" class="headerlink" title="正则的字符"></a>正则的字符</h2><h3 id="一、元字符"><a href="#一、元字符" class="headerlink" title="一、元字符"></a>一、元字符</h3><table><thead><tr><th>元字符</th><th>对应说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符之外的任意字符</td></tr><tr><td>\w</td><td>匹配字母数字下划线，等同于:[a-zA-Z0-9]</td></tr><tr><td>\s</td><td>匹配任意空白字符</td></tr><tr><td>\d</td><td>匹配数字，等同于[0-9]</td></tr><tr><td>\b</td><td>匹配单词边界</td></tr><tr><td>\</td><td></td><td>或匹配，如`/x</td><td>y/`匹配x或y两个字符</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><h3 id="二、重复匹配"><a href="#二、重复匹配" class="headerlink" title="二、重复匹配"></a>二、重复匹配</h3><table><thead><tr><th>匹配字符</th><th>对应说明</th></tr></thead><tbody><tr><td>*</td><td>重复出现零次或多次</td></tr><tr><td>+</td><td>重复出现一次或多次</td></tr><tr><td>?</td><td>重复出现零次或一次</td></tr><tr><td>{n}</td><td>重复出现n次</td></tr><tr><td>{n,}</td><td>至少重复出现n次</td></tr><tr><td>{m,n}</td><td>重复重现m到n次，其中，m&lt;n</td></tr></tbody></table><h3 id="三、修饰符"><a href="#三、修饰符" class="headerlink" title="三、修饰符"></a>三、修饰符</h3><table><thead><tr><th>修饰符</th><th>对应说明</th></tr></thead><tbody><tr><td>i</td><td>ignoreCase的缩写，表示忽略字母的大小写</td></tr><tr><td>g</td><td>global的缩写，表示全局匹配</td></tr><tr><td>m</td><td>multiline的缩写, 更改^和$的含义，匹配任意一行的行首和行尾</td></tr></tbody></table><h3 id="四、反义字符"><a href="#四、反义字符" class="headerlink" title="四、反义字符"></a>四、反义字符</h3><table><thead><tr><th>反义字符</th><th>对应说明</th></tr></thead><tbody><tr><td>[^x]</td><td>匹配除<code>x</code>之外的所有字符， 其中<code>x</code>可以为任意字符</td></tr><tr><td>[^xyz]</td><td>同上，匹配除<code>xyz</code>之外的任意字符</td></tr><tr><td>\W</td><td>匹配除了字母、数字、下划线之外的任意字符，等同于: <code>[^\w]</code></td></tr><tr><td>\S</td><td>匹配除了空白符之外的任意字符，等同于：<code>[^\s]</code></td></tr><tr><td>\D</td><td>匹配不是数字的所有字符，等同于：<code>[^\d]</code></td></tr><tr><td>\B</td><td>匹配不是单词边界的字符，等同于： <code>[^\b]</code></td></tr></tbody></table><h3 id="五、转义字符"><a href="#五、转义字符" class="headerlink" title="五、转义字符"></a>五、转义字符</h3><table><thead><tr><th>转义字符</th><th>对应说明</th></tr></thead><tbody><tr><td>\xnn</td><td>匹配十六进制数</td></tr><tr><td>\f</td><td>匹配换页符，等同于： <code>\x0c</code></td></tr><tr><td>\n</td><td>匹配换行符，等同于: <code>\x0a</code></td></tr><tr><td>\r</td><td>匹配回车符，等同于：<code>\x0d</code></td></tr><tr><td>\t</td><td>匹配水平制表符，等同于：<code>\x09</code></td></tr><tr><td>\v</td><td>匹配垂直制表符，等同于：<code>\x0b</code></td></tr><tr><td>\unnnn</td><td>匹配Unicode字符，如：<code>\u00A0</code></td></tr></tbody></table><h3 id="六、分组-捕获"><a href="#六、分组-捕获" class="headerlink" title="六、分组/捕获"></a>六、分组/捕获</h3><table><thead><tr><th>分组字符</th><th>对应说明</th></tr></thead><tbody><tr><td>(exp)</td><td>用小圆括号进行分组</td></tr><tr><td>(?:exp)</td><td>匹配exp正则，但不产生分组号</td></tr><tr><td>exp1(?=exp2)</td><td>前瞻断言，匹配exp1，但后面必须是exp2</td></tr></tbody></table><p>exp1(?!=exp2)    后瞻断言，匹配exp1，但后面不能是exp2</p><h3 id="七、贪婪与惰性"><a href="#七、贪婪与惰性" class="headerlink" title="七、贪婪与惰性"></a>七、贪婪与惰性</h3><table><thead><tr><th>匹配字符</th><th>对应说明</th></tr></thead><tbody><tr><td>*?</td><td>重复出现零次或多次，但尽可能少的重复</td></tr><tr><td>+?</td><td>重复出现一次或多次，但尽可能少的重复</td></tr><tr><td>??</td><td>重复出现零次或一次，但尽可能少的重复</td></tr><tr><td>{n}?</td><td>重复出现n次，但尽可能少的重复</td></tr><tr><td>{n,}?</td><td>至少重复出现n次，但尽可能少的重复</td></tr><tr><td>{m,n}?</td><td>重复重现m到n次，其中，m&lt;n，但尽可能少的重复</td></tr></tbody></table><h3 id="八、常用正则表达式"><a href="#八、常用正则表达式" class="headerlink" title="八、常用正则表达式"></a>八、常用正则表达式</h3><table><thead><tr><th>示例</th><th>正则</th></tr></thead><tbody><tr><td>*?</td><td>重复出现零次或多次，但尽可能少的重复</td></tr><tr><td>+?</td><td>重复出现一次或多次，但尽可能少的重复</td></tr><tr><td>??</td><td>重复出现零次或一次，但尽可能少的重复</td></tr><tr><td>{n}?</td><td>重复出现n次，但尽可能少的重复</td></tr><tr><td>{n,}?</td><td>至少重复出现n次，但尽可能少的重复</td></tr><tr><td>{m,n}?</td><td>重复重现m到n次，其中，m&lt;n，但尽可能少的重复</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.w3school.com.cn/jsref/jsref_obj_regexp.asp" target="_blank" rel="noopener">JavaScript RegExp 对象</a></li><li><a href="https://www.baidufe.com/item/eb10deb92f2c05ca32cf.html" target="_blank" rel="noopener">javascript正则表达式</a></li><li><a href="https://www.cnblogs.com/myzhibie/p/4365142.html" target="_blank" rel="noopener">js正则及常用方法函数总结</a></li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>腾讯2018面试题解析</title>
      <link href="/2018/06/28/scopeQuestions/"/>
      <url>/2018/06/28/scopeQuestions/</url>
      <content type="html"><![CDATA[<h3 id="腾讯2018年的一道笔试题（涉及到作用域）"><a href="#腾讯2018年的一道笔试题（涉及到作用域）" class="headerlink" title="腾讯2018年的一道笔试题（涉及到作用域）"></a>腾讯2018年的一道笔试题（涉及到作用域）</h3><a id="more"></a><hr><p> 一：请问下面输出什么值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line"></span><br><span class="line">    a();</span><br></pre></td></tr></table></figure></p><h3 id="什么是作用域"><a href="#什么是作用域" class="headerlink" title="什么是作用域?"></a>什么是作用域?</h3><blockquote><p>通常来说一段程序代码中使用的变量和函数并不总是可用的，限定其可用性的范围即作用域，作用域的使用提高了程序逻辑的局部性，增强程序的可靠性，减少名字冲突   - - 百度百科</p></blockquote><p>我自己的理解：浏览器执行js代码的过程<br>两大问题：</p><h4 id="（1）浏览器什么时候会进入作用域链？"><a href="#（1）浏览器什么时候会进入作用域链？" class="headerlink" title="（1）浏览器什么时候会进入作用域链？"></a>（1）浏览器什么时候会进入作用域链？</h4><ul><li>当看到script标签的时候</li><li>当调用一个方法的时候</li></ul><h4 id="（2）进入作用域之后，发生了什么事情？"><a href="#（2）进入作用域之后，发生了什么事情？" class="headerlink" title="（2）进入作用域之后，发生了什么事情？"></a>（2）进入作用域之后，发生了什么事情？</h4><ul><li><p>JS预解析（为执行做准备）</p><ol><li>开辟一个空间</li><li>找代码里面有没有var，有没有方法参数，有没有方法的声明，如果有var，有方法参数，就会把var和方法参数声明的变量，赋值成undefined存到空间里面，如果有function，就会把function所有的内容存到空间里面</li></ol></li><li><p>JS逐行执行</p><p>  找有没有表达式， +-*/=….</p></li></ul><p><img src="/img/ring1.jpg" alt=""></p><hr><p> 通过上面的理论，请做下面三道题<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a)</span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1()</span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><h3 id="作用域链？"><a href="#作用域链？" class="headerlink" title="作用域链？"></a>作用域链？</h3><blockquote><p>作用域链决定了哪些数据能被函数访问。当一个函数创建后，它的作用域链会被创建此函数的作用域中可访问的数据对象填充。   - - 百度百科</p></blockquote><p><em>tip:里面的修改，外面改，外面改，里面也改</em></p><h3 id="以上代码结果"><a href="#以上代码结果" class="headerlink" title="以上代码结果"></a>以上代码结果</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Ring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Node开发脚手架工具</title>
      <link href="/2018/06/27/Node%E5%BC%80%E5%8F%91%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7/"/>
      <url>/2018/06/27/Node%E5%BC%80%E5%8F%91%E8%84%9A%E6%89%8B%E6%9E%B6%E5%B7%A5%E5%85%B7/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>曾经接触过vue-cli脚手架，发现真的很神奇，能够短短几分钟，构建出一个vue框架的初始项目。今天， 就来揭开脚手架神秘的面纱， 自己也可以编写脚手架，提高工作效率。</p><h3 id="脚手架使用流程"><a href="#脚手架使用流程" class="headerlink" title="脚手架使用流程"></a>脚手架使用流程</h3><p>回忆一下vue-cli脚手架， 我们使用的流程：</p><ul><li>全局安装vue-cli： <code>npm install -g vue-cli</code></li><li>初始化项目： <code>vue create my-project</code></li><li>根据提示选择： 一般都是选择默认配置</li><li>终端不同颜色提示，图标</li><li>给出运行样例，即可运行</li></ul><h3 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h3><p>清楚了脚手架的功能之后， 就可以一步一步分析如何实现它。<br>解析一个demo： <a href="https://github.com/comeonbob/h5-cli" target="_blank" rel="noopener">h5-clis</a><br>（1）<strong>全局安装， 简单命令创建项目功能</strong><br>实现原理： package.json 中有bin 选项配置，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"bin"</span>: &#123;</span><br><span class="line">    <span class="string">"h5-cli"</span>: <span class="string">"./index"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>全局安装后，在终端运行命令： <code>h5-cli init</code>， 相当于运行了全局依赖包中的index文件， index文件中标明是node运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env node</span><br><span class="line">require(&apos;./lib/init&apos;);</span><br></pre></td></tr></table></figure></p><p>（2） <strong>初始化项目功能</strong><br>实现原理： 终端接收用户输入的指令， 执行特定初始化操作，包括获取框架模板template, 在本地生成初始项目。<br>依赖包如下：</p><ul><li>commander.js，可以自动的解析命令和参数，用于处理用户输入的命令。</li><li>download-git-repo，下载并提取 git 仓库，用于下载项目模板。</li><li>fs-extra，文件系统fs扩展, 支持promise异步</li></ul><p>主要实现代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// resolve commands and params</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>);</span><br><span class="line"><span class="keyword">const</span> file = <span class="built_in">require</span>(<span class="string">'./file'</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Usage.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  program</span><br><span class="line">  .usage(<span class="string">'init [h5-template]'</span>)</span><br><span class="line">  .version(<span class="string">'1.6.0'</span>, <span class="string">'-v, --version'</span>)</span><br><span class="line">  .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">  .action(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">    main(name);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * main</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  file.generate(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">program.parse(process.argv);</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/comeonbob/h5-cli" target="_blank" rel="noopener">详见源码</a><br>lib<br>: download.js  //下载模板<br>: file.js  //拷贝模板<br>: init.js //初始化项目</p><p>（3） <strong>终端提示，用户交互</strong><br>若是比较灵活的脚手架，在终端与用户有交互，根据不同选择，生成不同模板。<br>实现原理：</p><ul><li>Inquirer.js，通用的命令行用户界面集合，用于和用户进行交互。</li><li>handlebars.js，模板引擎，将用户提交的信息动态填充到文件中。<br>h5-clis 脚手尽量精简，使用了默认值。</li></ul><p>（4） <strong>终端不同颜色提示，图标</strong><br>实现原理：</p><ul><li>ora，下载过程久的话，可以用于显示下载中的动画效果。</li><li>chalk，可以给终端的字体加上颜色<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>);</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'generate project start'</span>);</span><br><span class="line">spinner.start(<span class="string">'download ...'</span>);</span><br><span class="line"><span class="keyword">await</span> download.download(projectName);</span><br><span class="line">spinner.succeed(<span class="string">'download template success'</span>);</span><br></pre></td></tr></table></figure></li></ul><p>为了给用户更好的体验，建议加上下载中动画，字体颜色提示，图标等。</p><p>（5）<strong>给出运行样例，即可运行</strong><br>实现原理：<br>运行示例， 帮助信息，版本信息等。都可以通过log打出：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Help.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">program.on(<span class="string">'--help'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'  Examples:'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.green(<span class="string">'    # create a new project with an local template: init &lt;h5-tempalte&gt;'</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'    $ h5-cli init koa2'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.green(<span class="string">'    # create a new project from a github template: init &lt;username/repo&gt;'</span>))</span><br><span class="line">  <span class="built_in">console</span>.log(chalk.white(<span class="string">'    $ h5-cli init comeonbob/h5-template-koa2'</span>))</span><br><span class="line">  <span class="built_in">console</span>.log()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="运行脚手架"><a href="#运行脚手架" class="headerlink" title="运行脚手架"></a>运行脚手架</h3><ul><li><p>全局安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g h5-clis</span><br></pre></td></tr></table></figure></li><li><p>初始化项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">h5-cli init koa2</span><br></pre></td></tr></table></figure></li></ul><p>效果图：<br><img src="/img/cli_npm.png" alt="初始化项目"></p><ul><li>koa2-project 项目生成，切换目录，安装依赖包，即可查看demo<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd koa2-project</span><br><span class="line">npm install</span><br><span class="line">node app.js</span><br></pre></td></tr></table></figure></li></ul><p>效果图：<br><img src="/img/cli_api.png" alt="运行demo"></p><h3 id="脚手架利弊"><a href="#脚手架利弊" class="headerlink" title="脚手架利弊"></a>脚手架利弊</h3><blockquote><p>脚手架可以减少重复性的工作，开启一个新项目时候，不必重头开始，也不需要再旧的项目上删减，减少不必要的文件拷贝，可以大大提高工作效率；然而便利的同时，也容易忽略项目的本来面貌，技术的实现原理。 建议使用脚手架前，耐心了解生成模板框架 源码， 阅读其官网文档，从而知其然，也能知其所以然。</p></blockquote><p>安利两个脚手架, 支持npm直接安装：</p><ul><li><a href="https://github.com/comeonbob/simple-koa2-cli" target="_blank" rel="noopener">simple-koa2-cli</a> node层简单的koa2模板脚手架</li><li><a href="https://github.com/comeonbob/h5-cli" target="_blank" rel="noopener">h5-clis</a> h5脚手架，一键生成流行的框架模板. 如 vue2, koa2等。</li></ul><hr><ul><li>Date :   2018-06-27</li><li>Author : Bob</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>事件代理与冒泡.js</title>
      <link href="/2018/06/19/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E4%B8%8E%E5%86%92%E6%B3%A1/"/>
      <url>/2018/06/19/%E4%BA%8B%E4%BB%B6%E4%BB%A3%E7%90%86%E4%B8%8E%E5%86%92%E6%B3%A1/</url>
      <content type="html"><![CDATA[<h2 id="前景介绍"><a href="#前景介绍" class="headerlink" title="前景介绍"></a>前景介绍</h2><p>html元素可以进行嵌套，通俗讲就是父子元素的关系。父子元素绑定事件也是项目中不可避免的，接下来就讲讲事件代理与冒泡，以及对他们的使用。<br><a id="more"></a></p><h3 id="1-现场还原-写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的"><a href="#1-现场还原-写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的" class="headerlink" title="1.现场还原:写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的"></a>1.现场还原:<em>写了一段简单的代码，实例展示父子元素关系，这段代码也是经常遇见的</em></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">js:</span><br><span class="line">arr = [</span><br><span class="line">  &#123;&apos;name&apos;:&apos;阿根廷&apos;,code:&apos;a&apos;&#125;,</span><br><span class="line">  &#123;&apos;name&apos;:&apos;墨西哥&apos;,code:&apos;m&apos;&#125;,</span><br><span class="line">  &#123;&apos;name&apos;:&apos;法国&apos;,code:&apos;f&apos;&#125;</span><br><span class="line">]</span><br><span class="line">html:</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li v-for=&quot;(item,index) in arr&quot; @click=&quot;willWin&quot; v-text=&quot;item.name&quot; :key=&quot;item.code&quot;&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">最终大约生成：</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">  &lt;li @click=&quot;willWin&quot;&gt;阿根廷&lt;/li&gt;</span><br><span class="line">  &lt;li @click=&quot;willWin&quot;&gt;墨西哥&lt;/li&gt;</span><br><span class="line">  &lt;li @click=&quot;willWin&quot;&gt;法国&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">这段代码本身是没有问题的，但是一个问题就是我们会给每个子元素li绑定一个willWin()函数，这是十分没有必要的。</span><br></pre></td></tr></table></figure><h3 id="2-那该怎么做？？"><a href="#2-那该怎么做？？" class="headerlink" title="2.那该怎么做？？"></a>2.那该怎么做？？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">其实我们可以合理利用事件冒泡，使用事件代理（父元素代替子元素进行事件绑定，需要做的就是区分是那个子元素触发的事件），进行简单优化。</span><br><span class="line">修改之后的代码是这样的：</span><br><span class="line">  &lt;ul @click=&quot;willWin&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;(item,index) in arr&quot;  v-text=&quot;item.name&quot; :key=&quot;item.code&quot; :data-key=&apos;index&apos;&gt; </span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">这样就可以在willWin方法中获得event事件对象，它记录了事件触发元素event.target，根据它我们就可以进行区分被点击的元素，这就是事件代理的机制。</span><br></pre></td></tr></table></figure><h3 id="3-拓展介绍"><a href="#3-拓展介绍" class="headerlink" title="3.拓展介绍"></a>3.拓展介绍</h3><p>currentTarget：事件注册对象（event.currentTarget）,指向事件注册的元素。</p><hr><ul><li>Date :   2018-06-28</li><li>Author : evel</li></ul>]]></content>
      
      <categories>
          
          <category> Evel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>D3.js</title>
      <link href="/2018/06/19/d3/"/>
      <url>/2018/06/19/d3/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>D3 的全称是（Data-Driven Documents），顾名思义可以知道是一个被数据驱动的文档。</p><p>本质就是一个javascript函数库，使用它的目的就是实现数据可视化。</p><p>使用：<script src="http://d3js.org/d3.v3.min.js" charset="utf-8"></script></p><h3 id="1-比例尺-将某一区域的值映射到另一区域，其大小关系不变。"><a href="#1-比例尺-将某一区域的值映射到另一区域，其大小关系不变。" class="headerlink" title="1.比例尺:将某一区域的值映射到另一区域，其大小关系不变。"></a>1.比例尺:<em>将某一区域的值映射到另一区域，其大小关系不变。</em></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">// 线性比例尺</span><br><span class="line">var dataset = [1.2, 2.3, 0.9, 1.5, 3.3];</span><br><span class="line">var min = d3.min(dataset);</span><br><span class="line">var max = d3.max(dataset);</span><br><span class="line"></span><br><span class="line">var linear = d3.scale.linear()</span><br><span class="line">        .domain([min, max])</span><br><span class="line">        .range([0, 300]);</span><br><span class="line"></span><br><span class="line">linear(0.9);    //返回 0</span><br><span class="line">linear(2.3);    //返回 175</span><br><span class="line">linear(3.3);    //返回 300</span><br><span class="line">// 序数比例尺</span><br><span class="line">var index = [0, 1, 2, 3, 4];</span><br><span class="line">var color = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;];</span><br><span class="line">var ordinal = d3.scale.ordinal()</span><br><span class="line">        .domain(index)</span><br><span class="line">        .range(color);</span><br><span class="line"></span><br><span class="line">ordinal(0); //返回 red</span><br><span class="line">ordinal(2); //返回 green</span><br><span class="line">ordinal(4); //返回 black</span><br></pre></td></tr></table></figure><h3 id="2-柱状图"><a href="#2-柱状图" class="headerlink" title="2.柱状图"></a>2.柱状图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">&lt;head&gt;  </span><br><span class="line">&lt;meta charset=&quot;utf-8&quot;&gt;  </span><br><span class="line">&lt;title&gt;完整的柱形图&lt;/title&gt;  </span><br><span class="line">&lt;/head&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.axis path,</span><br><span class="line">.axis line&#123;</span><br><span class="line">fill: none;</span><br><span class="line">stroke: black;</span><br><span class="line">shape-rendering: crispEdges;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.axis text &#123;</span><br><span class="line">font-family: sans-serif;</span><br><span class="line">font-size: 11px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MyRect &#123;</span><br><span class="line">fill: steelblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.MyText &#123;</span><br><span class="line">fill: white;</span><br><span class="line">text-anchor: middle;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;  </span><br><span class="line">&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;  </span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">//画布大小</span><br><span class="line">var width = 400;</span><br><span class="line">var height = 400;</span><br><span class="line"></span><br><span class="line">//在 body 里添加一个 SVG 画布</span><br><span class="line">var svg = d3.select(&quot;body&quot;)</span><br><span class="line">.append(&quot;svg&quot;)</span><br><span class="line">.attr(&quot;width&quot;, width)</span><br><span class="line">.attr(&quot;height&quot;, height);</span><br><span class="line"></span><br><span class="line">//画布周边的空白</span><br><span class="line">var padding = &#123;left:30, right:30, top:20, bottom:20&#125;;</span><br><span class="line"></span><br><span class="line">//定义一个数组</span><br><span class="line">var dataset = [10, 20, 30, 40, 33, 24, 12, 5];</span><br><span class="line"></span><br><span class="line">//x轴的比例尺</span><br><span class="line">var xScale = d3.scale.ordinal()</span><br><span class="line">.domain(d3.range(dataset.length))</span><br><span class="line">.rangeRoundBands([0, width - padding.left - padding.right]);</span><br><span class="line"></span><br><span class="line">//y轴的比例尺</span><br><span class="line">var yScale = d3.scale.linear()</span><br><span class="line">.domain([0,d3.max(dataset)])</span><br><span class="line">.range([height - padding.top - padding.bottom, 0]);</span><br><span class="line"></span><br><span class="line">//定义x轴</span><br><span class="line">var xAxis = d3.svg.axis()</span><br><span class="line">.scale(xScale)</span><br><span class="line">.orient(&quot;bottom&quot;);</span><br><span class="line"></span><br><span class="line">//定义y轴</span><br><span class="line">var yAxis = d3.svg.axis()</span><br><span class="line">.scale(yScale)</span><br><span class="line">.orient(&quot;left&quot;);</span><br><span class="line"></span><br><span class="line">//矩形之间的空白</span><br><span class="line">var rectPadding = 4;</span><br><span class="line"></span><br><span class="line">//添加矩形元素</span><br><span class="line">var rects = svg.selectAll(&quot;.MyRect&quot;)</span><br><span class="line">.data(dataset)</span><br><span class="line">.enter()</span><br><span class="line">.append(&quot;rect&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;MyRect&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)</span><br><span class="line">.attr(&quot;x&quot;, function(d,i)&#123;</span><br><span class="line">return xScale(i) + rectPadding/2;</span><br><span class="line">&#125; )</span><br><span class="line">.attr(&quot;y&quot;,function(d)&#123;</span><br><span class="line">return yScale(d);</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;width&quot;, xScale.rangeBand() - rectPadding )</span><br><span class="line">.attr(&quot;height&quot;, function(d)&#123;</span><br><span class="line">return height - padding.top - padding.bottom - yScale(d);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加文字元素</span><br><span class="line">var texts = svg.selectAll(&quot;.MyText&quot;)</span><br><span class="line">.data(dataset)</span><br><span class="line">.enter()</span><br><span class="line">.append(&quot;text&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;MyText&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)</span><br><span class="line">.attr(&quot;x&quot;, function(d,i)&#123;</span><br><span class="line">return xScale(i) + rectPadding/2;</span><br><span class="line">&#125; )</span><br><span class="line">.attr(&quot;y&quot;,function(d)&#123;</span><br><span class="line">return yScale(d);</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;dx&quot;,function()&#123;</span><br><span class="line">return (xScale.rangeBand() - rectPadding)/2;</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;dy&quot;,function(d)&#123;</span><br><span class="line">return 20;</span><br><span class="line">&#125;)</span><br><span class="line">.text(function(d)&#123;</span><br><span class="line">return d;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//添加x轴</span><br><span class="line">svg.append(&quot;g&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;axis&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + (height - padding.bottom) + &quot;)&quot;)</span><br><span class="line">.call(xAxis); </span><br><span class="line"></span><br><span class="line">//添加y轴</span><br><span class="line">svg.append(&quot;g&quot;)</span><br><span class="line">.attr(&quot;class&quot;,&quot;axis&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,&quot;translate(&quot; + padding.left + &quot;,&quot; + padding.top + &quot;)&quot;)</span><br><span class="line">.call(yAxis);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;  </span><br><span class="line">&lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/rect.png" alt=""></p><h3 id="3-饼状图"><a href="#3-饼状图" class="headerlink" title="3.饼状图"></a>3.饼状图</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">  &lt;head&gt;  </span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;  </span><br><span class="line">        &lt;title&gt;饼状图&lt;/title&gt;  </span><br><span class="line">  &lt;/head&gt; </span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">    &lt;body&gt;  </span><br><span class="line">&lt;script src=&quot;http://d3js.org/d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;  </span><br><span class="line">        &lt;script&gt;</span><br><span class="line"></span><br><span class="line">var width = 400;</span><br><span class="line">var height = 400;</span><br><span class="line">var dataset = [ 30 , 10 , 43 , 55 , 13 ];</span><br><span class="line"></span><br><span class="line">var svg = d3.select(&quot;body&quot;)</span><br><span class="line">.append(&quot;svg&quot;)</span><br><span class="line">.attr(&quot;width&quot;, width)</span><br><span class="line">.attr(&quot;height&quot;, height);</span><br><span class="line"></span><br><span class="line">var pie = d3.layout.pie();</span><br><span class="line"></span><br><span class="line">var piedata = pie(dataset);</span><br><span class="line"></span><br><span class="line">var outerRadius = 150;//外半径</span><br><span class="line">var innerRadius = 0;//内半径，为0则中间没有空白</span><br><span class="line"></span><br><span class="line">var arc = d3.svg.arc()//弧生成器</span><br><span class="line">.innerRadius(innerRadius)//设置内半径</span><br><span class="line">.outerRadius(outerRadius);//设置外半径</span><br><span class="line"></span><br><span class="line">var color = d3.scale.category10();</span><br><span class="line"></span><br><span class="line">var arcs = svg.selectAll(&quot;g&quot;)</span><br><span class="line">  .data(piedata)</span><br><span class="line">  .enter()</span><br><span class="line">  .append(&quot;g&quot;)</span><br><span class="line">  .attr(&quot;transform&quot;,&quot;translate(&quot;+ (width/2) +&quot;,&quot;+ (height/2) +&quot;)&quot;);</span><br><span class="line">  </span><br><span class="line">arcs.append(&quot;path&quot;)</span><br><span class="line">.attr(&quot;fill&quot;,function(d,i)&#123;</span><br><span class="line">return color(i);</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;d&quot;,function(d)&#123;</span><br><span class="line">return arc(d);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">arcs.append(&quot;text&quot;)</span><br><span class="line">.attr(&quot;transform&quot;,function(d)&#123;</span><br><span class="line">return &quot;translate(&quot; + arc.centroid(d) + &quot;)&quot;;</span><br><span class="line">&#125;)</span><br><span class="line">.attr(&quot;text-anchor&quot;,&quot;middle&quot;)</span><br><span class="line">.text(function(d)&#123;</span><br><span class="line">return d.data;</span><br><span class="line">&#125;);</span><br><span class="line">  </span><br><span class="line">        &lt;/script&gt;  </span><br><span class="line"></span><br><span class="line">    &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="/img/pie.png" alt=""></p><hr><ul><li>Date :   2018-06-19</li><li>Author : Little</li></ul>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>es6 类class入门</title>
      <link href="/2018/05/31/es6%20%E7%B1%BBclass%E5%85%A5%E9%97%A8/"/>
      <url>/2018/05/31/es6%20%E7%B1%BBclass%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类?"></a>什么是类?</h3><blockquote><p>类是面向对象程序设计中的概念，是面向对象编程的基础。   - - 百度百科</p></blockquote><p>简单介绍下，面向对象编程中几个基本概念：</p><h4 id="（1）对象"><a href="#（1）对象" class="headerlink" title="（1）对象"></a>（1）对象</h4><p>一切事物皆为对象，生活中看到的，听到的，闻到的等东西都是对象。准确的说， 对象是一个自包含的实体，用一组可识别的特性和行为来标识。</p><h4 id="（2）类"><a href="#（2）类" class="headerlink" title="（2）类"></a>（2）类</h4><p><strong>定义：</strong><br>类是对现实生活中一类具有共同特征的事物的抽象， 换句话说，类就是具有相同属性和功能的对象的抽象的集合；<br>类的构成包括数据成员和成员函数。<br><strong>三大特性：</strong></p><ul><li><p>封装性<br>将数据和操作封装为一个有机的整体，由于类中私有成员都是隐藏的，只向外部提供有限的接口，所以能够保证内部的高内聚性和与外部的低耦合性。</p></li><li><p>继承性<br>继承定义了类如何相互关联，共享特性；更符合认知规律，使程序更易于理解，同时节省不必要的重复代码。</p></li><li><p>多态性<br>多态表示不同的对象可以执行相同的动作，但要通过自己的实现代码来执行。</p></li></ul><h4 id="（3）构造方法"><a href="#（3）构造方法" class="headerlink" title="（3）构造方法"></a>（3）构造方法</h4><p>构造方法，又叫构造函数，其实就是对类的初始化， 在 new 的时候调用。</p><h3 id="如何使用es6新特性class"><a href="#如何使用es6新特性class" class="headerlink" title="如何使用es6新特性class"></a>如何使用es6新特性class</h3><p><strong>demo:</strong><br>(1) es6 面向对象的写法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 基类: 人 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">// 默认构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(name, gender) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取个人信息</span></span><br><span class="line">  getInfo() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">`姓名：<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>, 性别：<span class="subst">$&#123;<span class="keyword">this</span>.gender&#125;</span>`</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">let</span> someOne = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="string">"male"</span>);</span><br><span class="line"><span class="comment">// 输出个人信息</span></span><br><span class="line"><span class="built_in">console</span>.log(someOne.getInfo());</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/** 派生类：超人 */</span><br><span class="line">class Superman extends Person &#123;</span><br><span class="line">   // 构造函数</span><br><span class="line">   constructor(name, gender, ability) &#123;</span><br><span class="line">     super(name, gender);</span><br><span class="line">     this.ability = ability;</span><br><span class="line">   &#125;</span><br><span class="line">  // 获取个人信息</span><br><span class="line">  getInfo() &#123;</span><br><span class="line">return `姓名：$&#123;this.name&#125;, 性别：$&#123;this.gender&#125;, 能力：$&#123;this.ability&#125;`;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">// 实例化</span><br><span class="line">let someSuperman = new Superman(&apos;enfan&apos;, &apos;male&apos;, &apos;会飞&apos;);</span><br><span class="line">// 输出超人信息</span><br><span class="line">console.log(someSuperman.getInfo());</span><br></pre></td></tr></table></figure><p>(2) es5语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, gender</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.gender = gender;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' '</span> + <span class="keyword">this</span>.gender);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> someOne = <span class="keyword">new</span> Person(<span class="string">"Bob"</span>, <span class="string">"male"</span>);</span><br><span class="line">someOne.getInfo();</span><br></pre></td></tr></table></figure></p><p>思考： es5 继承如何实现？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperMan</span>(<span class="params">name, gender, ability</span>)</span>&#123;</span><br><span class="line">  Person.call(<span class="keyword">this</span>, name, gender);</span><br><span class="line">  <span class="keyword">this</span>.ability = ability;</span><br><span class="line">&#125;</span><br><span class="line">SuperMan.prototype = <span class="keyword">new</span> Person();</span><br><span class="line">SuperMan.prototype.constructor = SuperMan;</span><br><span class="line"><span class="keyword">var</span> someSuperman = <span class="keyword">new</span> SuperMan(<span class="string">'enfan'</span>, <span class="string">'male'</span>, <span class="string">'fly'</span>);</span><br><span class="line">someSuperman.getInfo();</span><br></pre></td></tr></table></figure><p>（3）对比es6 与 es5</p><ul><li>类的调用必须通过new 一个实例,且类的内部默认使用严格模式</li><li>类的继承使用关键字extends,继承机制与es5完全不同</li><li>类的继承可以继承原生的构造函数，es5不可以</li><li>不存在变量提升，必须先声明，再调用</li></ul><h3 id="为什么要用es6-class？"><a href="#为什么要用es6-class？" class="headerlink" title="为什么要用es6 class？"></a>为什么要用es6 class？</h3><ul><li>更接近传统语言（比如c++, java）的面向对象编程写法，引入了 class（类）这个概念</li><li>使用更多设计模式</li><li>越来越多的库使用class， 如koa2</li><li>more…</li></ul><hr><ul><li>Date :   2018-05-31</li><li>Author : Bob</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式（基础篇）</title>
      <link href="/2018/04/28/RegExp/"/>
      <url>/2018/04/28/RegExp/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建正则的两种方法</span><br><span class="line">// /正则表达式/</span><br><span class="line">const re = /ABC\-abc/igmy</span><br><span class="line">// new RegExp(&apos;正则表达式&apos;) 注：特殊字符需转义</span><br><span class="line">const ex = new RegExp(&apos;ABC\\-abc&apos;, &apos;igmy&apos;) </span><br><span class="line"></span><br><span class="line">// 常见匹配字符</span><br><span class="line">// \d任意数字，\s空格,\w任意数字或字母,.任意字符,*任意个字符,+至少一个字符,?一个或多个字符,&#123;n&#125;n个字符,&#123;n,m&#125;n到m个字符,[]精确匹配,()分组,^行的开头,$行的结束</span><br><span class="line">// i表示忽略大小写,g表示全局匹配,m表示多行匹配，y表示粘连修饰符</span><br><span class="line">// \1表示的是匹配到第一个()的引用,\2表示匹配到的第二个()的引用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">// 正则的常见方法</span><br><span class="line">// test()测试</span><br><span class="line">var re = /^\d&#123;3&#125;\-\d&#123;3,8&#125;$/</span><br><span class="line">re.test(&apos;010-12345&apos;) // true </span><br><span class="line">re.test(&apos;010-1234x&apos;) // false</span><br><span class="line">re.test(&apos;010 12345&apos;) // false</span><br><span class="line"></span><br><span class="line">// exec()分组</span><br><span class="line">var s = &apos;JavaScript, VBScript, JScript and ECMAScript&apos;;</span><br><span class="line">var re=/[a-zA-Z]+Script/g;</span><br><span class="line"></span><br><span class="line">// 使用全局匹配:</span><br><span class="line">re.exec(s); // [&apos;JavaScript&apos;]</span><br><span class="line">re.lastIndex; // 10</span><br><span class="line">re.exec(s); // [&apos;VBScript&apos;]</span><br><span class="line">re.lastIndex; // 20</span><br><span class="line">re.exec(s); // [&apos;JScript&apos;]</span><br><span class="line">re.lastIndex; // 29</span><br><span class="line">re.exec(s); // [&apos;ECMAScript&apos;]</span><br><span class="line">re.lastIndex; // 44</span><br><span class="line">re.exec(s); // null，直到结束仍没有匹配到</span><br><span class="line"></span><br><span class="line">// 字符串的正则方法</span><br><span class="line"></span><br><span class="line">// search()返回字符串的索引</span><br><span class="line"></span><br><span class="line">// match()返回匹配数组,返回匹配的第一个。加上全局匹配则全部返回</span><br><span class="line">const str = &quot;独坐常忽忽，情怀何悠悠。山腰云缦缦，谷口风飕飕。猿来树袅袅，鸟入林啾啾。时催鬓飒飒，岁尽老惆惆。&quot;</span><br><span class="line">const exc = /(.)\1/g</span><br><span class="line">const result = str.match(exc)</span><br><span class="line">// [&quot;忽忽&quot;, &quot;悠悠&quot;, &quot;缦缦&quot;, &quot;飕飕&quot;, &quot;袅袅&quot;, &quot;啾啾&quot;, &quot;飒飒&quot;, &quot;惆惆&quot;]</span><br><span class="line"></span><br><span class="line">// split()字符串切分，返回数组</span><br><span class="line"></span><br><span class="line">// replace()将匹配到的字符串替换</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信小程序--入门篇</title>
      <link href="/2018/04/27/wechat-program/"/>
      <url>/2018/04/27/wechat-program/</url>
      <content type="html"><![CDATA[<blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3></blockquote><ul><li><p>申请小程序账号 <a href="https://mp.weixin.qq.com/wxopen/waregister?action=step1" target="_blank" rel="noopener">@申请网址</a></p></li><li><p>下载<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html?t=2018424" target="_blank" rel="noopener">开发者工具</a> ， 根据自己的操作系统下载对应的安装包进行安装，有关开发者工具更 详细的介绍可以查看<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/devtools.html?t=2018424" target="_blank" rel="noopener">《开发者工具介绍》</a></p></li><li><p>新建一个小程序项目，填入申请后得到的小程序AppID、项目名称，选择”普通快速开发模式”，点击确定，而后展示如下(包含左侧编译预览、右侧项目结构)：</p><p><img src="/img/init.png" alt="初始页面"></p></li></ul><blockquote><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3></blockquote><ul><li>初始化的项目结构中，包含了一些简单的代码文件，其中app.js、app.json、app.wxss这三个文件是必不可少，小程序会读取这些文件初始化实例。（<strong>注意：这三个文件名称不可任意修改</strong>）</li><li>在小程序中，wxml/wxss/js/json对应着我们平时写的html/css/js/json文件。</li><li>app.js是小程序的初始化脚本，可以在这个文件中监听小程序的生命周期，申请全局变量和调用API等等。</li><li>app.json是对小程序的全局配置，其中的pages是设置所有的页面路径（<strong>默认第一条为首页，即启动页</strong>）， window是设置页面的窗口表现等。</li><li>app.wxss是整个小程序的公共样式表。</li><li>在pages的目录下，每个文件夹目录里面由四种不同类型的文件组成，其中包含.js,.json,wxss,wxml，其中的.json,.wxss文件为非必须，因为不写代码可以默认继承app的全局app.json,app.wxss文件的设置。</li></ul><blockquote><h3 id="具体文件分析"><a href="#具体文件分析" class="headerlink" title="具体文件分析"></a>具体文件分析</h3></blockquote><ul><li><p>全局配置文件：<code>app.json</code>主要分为五个部分：pages：页面路径组，window：框架样式（状态栏、导航条、标题、窗口背景色），tabBar：底部菜单，networkTimeout：网络超时设置，debug：开启debug模式。</p><p><strong>注</strong>：page.json(page目录下，每个页面文件夹中的logs.json/index.json…..的统称)可以对页面进行单独的配置，覆盖app.json的全局配置。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">// app.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>:&#123;</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#000"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"WeChat"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"white"</span>,</span><br><span class="line">    <span class="attr">"enablePullDownRefresh"</span>:<span class="string">"true"</span>    //导航栏能够下拉刷新</span><br><span class="line">  &#125;,</span><br><span class="line">  "tabBar":&#123;       //在“tabBar”中配置底端的标题栏信息</span><br><span class="line">    "color":"#666",     //图片颜色为灰色</span><br><span class="line">    "selectedColor":"#268dcd",  //图片被选中颜色为蓝色</span><br><span class="line">    "borderStyle":"black",   //边框颜色为黑色</span><br><span class="line">    "backgroundColor":"#fafafa",  //子标题栏背景色为白色</span><br><span class="line">    "list":[     //"list"中存放底端的几个子导航栏信息，数量范围2~5</span><br><span class="line">      &#123;</span><br><span class="line">        "pagePath":"pages/index/index",  //该子导航点击后要跳转的页面</span><br><span class="line">        "iconPath":"images/icons/homeD.png",  //该子导航设置的图片，这里用的是图片的相对路径</span><br><span class="line">        "selectedIconPath":"images/icons/homeS.png",  //该子导航被点击后显示的图片</span><br><span class="line">        "text":"首页"   //该子导航显示的文字</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"pagePath"</span>:<span class="string">"pages/news/news"</span>,</span><br><span class="line">        <span class="attr">"iconPath"</span>:<span class="string">"images/icons/newsD.png"</span>,</span><br><span class="line">        <span class="attr">"selectedIconPath"</span>:<span class="string">"images/icons/newsS.png"</span>,</span><br><span class="line">        <span class="attr">"text"</span>:<span class="string">"新闻中心"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  "networkTimeout":&#123; //网络请求超时设置</span><br><span class="line">    "request": 10000,</span><br><span class="line">    "downloadFile": 10000</span><br><span class="line">  &#125;,</span><br><span class="line">  "debug":"true"   //设置是否开启debug模式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用App()来全局注册一个小程序，必须是在<code>app.js</code>文件中注册，并且不能注册多个 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">App(&#123; <span class="comment">//如下为小程序的生命周期</span></span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听初始化</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听显示（进入前台）</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听隐藏（进入后台：按home离开微信）</span></span><br><span class="line">  onError: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123;&#125;,<span class="comment">//监听错误</span></span><br><span class="line">  <span class="comment">//如下为自定义的全局方法和全局变量  </span></span><br><span class="line">  globalFun:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">  globalData: <span class="string">'Hello World'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>使用 Page()注册一个页面，在每个页面的<code>.js</code>文件中注册。</p><p><strong>注</strong>： 在小程序的<code>.js</code>文件中，若想对data中的变量进行赋值操作，必须通过<code>this.setData({变量名:值})</code>， 类似于<code>React</code>中的变量状态修改，<code>this.data.变量名 = 值</code>或<code>this.变量名=值</code>都不支持，获取data中的变量值也需要使用<code>this.data.变量名</code>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;<span class="attr">text</span>: <span class="string">"This is page data."</span>&#125;,<span class="comment">//页面数据，用来维护视图，json格式</span></span><br><span class="line">  onLoad: <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;&#125;,<span class="comment">//监听加载</span></span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听初次渲染完成</span></span><br><span class="line">  onShow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听显示</span></span><br><span class="line">  onHide: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听隐藏</span></span><br><span class="line">  onUnload: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听卸载</span></span><br><span class="line">  onPullDownRefresh: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听下拉</span></span><br><span class="line">  onReachBottom: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听上拉触底</span></span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,<span class="comment">//监听右上角分享</span></span><br><span class="line">  <span class="comment">//如下为自定义的事件处理函数（视图中绑定的）</span></span><br><span class="line">  viewTap: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">//setData设置data值，同时将更新视图</span></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;<span class="attr">text</span>: <span class="string">'Set some data for updating view.'</span>&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>小程序的视图与事件绑定：在每个页面的<code>.wxml</code>文件中，对页面<code>js</code>中的<code>data</code>进行 数据绑定 ，以及自定义事件绑定。</p><ul><li>从下边的例子可以看到，小程序的 <code>wxml</code>用到一些标签是 view, button, text,template 等等，这些标签就是小程序给开发者包装好的基本能力，就是可以直接使用的组件，更多详细组件功能可以参考：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/" target="_blank" rel="noopener">小程序<strong>·</strong> 组件</a> </li><li>还有一些<code>wx:for</code>,<code>wx:if</code>之类的条件绑定，因为小程序采用的也是<code>MVVM</code>的开发模式(例如 React, Vue)，就是把渲染和逻辑分离。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--&#123;&#123;&#125;&#125;绑定data中的指定数据并渲染到视图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123;text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--wx:for获取数组数据进行循环渲染，item为数组的每项--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;array&#125;&#125;"</span>&gt;</span> &#123;&#123;item&#125;&#125; <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--wx:if条件渲染--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;view == 'WEBVIEW'&#125;&#125;"</span>&gt;</span> WEBVIEW <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:elif</span>=<span class="string">"&#123;&#123;view == 'APP'&#125;&#125;"</span>&gt;</span> APP <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">wx:else</span>=<span class="string">"&#123;&#123;view == 'MINA'&#125;&#125;"</span>&gt;</span> MINA <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">name</span>=<span class="string">"staffName"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span>&gt;</span>FirstName: &#123;&#123;firstName&#125;&#125;, LastName: &#123;&#123;lastName&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"staffName"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...template.staffA&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">is</span>=<span class="string">"staffName"</span> <span class="attr">data</span>=<span class="string">"&#123;&#123;...template.staffB&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--bindtap指定tap事件处理函数为ViewTap--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">bindtap</span>=<span class="string">"ViewTap"</span>&gt;</span> 点击此按钮 <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;<span class="comment">//data数据主要用于视图绑定</span></span><br><span class="line">    text:<span class="string">"我是一条测试"</span>,</span><br><span class="line">    array:[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],</span><br><span class="line">    view:<span class="string">"APP"</span>,</span><br><span class="line">    template:&#123;</span><br><span class="line">        staffA: &#123;<span class="attr">firstName</span>: <span class="string">'Bob'</span>, <span class="attr">lastName</span>: <span class="string">'Gao'</span>&#125;,</span><br><span class="line">        staffB: &#123;<span class="attr">firstName</span>: <span class="string">'Bitch'</span>, <span class="attr">lastName</span>: <span class="string">'Little'</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ViewTap:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'成功被点击'</span>)&#125;<span class="comment">//自定义事件，主要用于事件绑定</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>每个页面文件夹中的<code>.wxss</code> ，顾名思义就是用来编写每个页面各自的样式，不写则默认呈现<code>app.wxss</code>文件的全局样式， 此外 <code>.wxss</code> 仅支持部分 <code>CSS 选择器</code>， 比如类名选择器(.)等..</p><p><strong>注</strong>： 在小程序中，扩展了<code>rpx</code>单位，用来代替<code>px</code>单位，编译时小程序底层会自动进行浮点数运算，平时怎么用<code>px</code>，就怎么用<code>rpx</code>。</p></li></ul><blockquote><h3 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h3></blockquote><ul><li><p>在各个页面的<code>.js</code>中调用<code>app.js</code> 的全局属性和方法，需要获取全局app实例，在<code>.js</code>顶部定义<code>const app = getApp()</code>, 使用时用<code>app.[方法名/属性名]</code> , 在<code>app.js</code>不需要再次获取实例，可以直接使用<code>this.[方法名/属性名]</code>。</p></li><li><p>公用的<code>js</code>方法可以放在utils文件夹中，可通过require引入，或者在pages同级目录新建文件夹及文件，个人建议pages目录最好只存放每个页面的<code>配置/DOM渲染/逻辑/样式</code>， 这样项目结构比较简单分明。</p></li><li><p>新建页面目录和文件，可以直接在<code>app.json</code>中的<code>pages</code>参数中，直接输入你需要创建相关目录名和文件名，点击保存，则小程序会自动为你生成对应的目录和文件(<strong>注</strong>：<code>.js/.json/.wxml/wxss</code>都会根据设置的文件名自动生成，无需在文件名后加后缀)。 当然，也可以在项目结构中点击右键去新建，<code>app.json</code>的<code>page参数</code>也会相应同步你新增的文件夹路径。个人推荐用第一种方法，因为第二种方法，经测试使用，感觉目前还存在一些bug，有时候创建文件，全局的<code>app.json</code>没有自动生成相对于的路径，导致编译的时候，还是需要手动去写入路径，否则控制台会报错，找不到你新建的文件。</p></li><li><p>跳转并刷新页面：需使用onshow来代替onload执行逻辑，onload只在首次打开页面时执行一次。如：B页面操作全局数据并跳转A页面，A页面onshow中获取全局数据更新视图。</p><p>​</p></li></ul>]]></content>
      
      <categories>
          
          <category> Emfan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS 遍历中异步操作</title>
      <link href="/2018/04/26/js%20%E9%81%8D%E5%8E%86%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/04/26/js%20%E9%81%8D%E5%8E%86%E4%B8%AD%E5%BC%82%E6%AD%A5%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>  JS遍历中异步操作，指的是JS执行循环遍历中，每一次循环里,都有异步操作。 如经典的闭包应用，每次循环异步操作中输出索引。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 3</span></span><br><span class="line"><span class="comment">// i 3</span></span><br><span class="line"><span class="comment">// i 3</span></span><br></pre></td></tr></table></figure><p>  结果发现，每次输出的都是3，并不是我们预期的结果。<br>  不同遍历方法中异步操作，如何正确得到循环索引，这就是今天的主题。 当然，闭包就是其中一种解决方法。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li>for循环 + var + 索引传参<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>： </p><blockquote><p>每次循环， 都会执行一个匿名函数，这个匿名函数是立即执行函数(IIFE)。 每一次循环创建一个私有词法环境，执行时把当前的循环的i传入，保存在这个词法环境中。遍历完成后，js不会释放这块内存，所以能够正确的输出索引。</p></blockquote><hr><ul><li>for循环 + var + 闭包<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = i;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'i'</span>, j);</span><br><span class="line">      &#125;, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  func()();</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> j = i;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'i'</span>, j);</span><br><span class="line">    &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>： </p><blockquote><p>每次遍历操作中，定时器中函数都会用到父级的作用域的变量j，每次遍历都会形成一个闭包，不会释放变量j，所以每次能正确输出索引号。</p></blockquote><hr><ul><li>for循环 + let<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> j = i;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, j);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>：</p><blockquote><p>let 是es6的一种新的变量声明方式，拥有块级作用域。上面代码中，变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量，所以输出的是正确的索引。</p></blockquote><hr><ul><li>for…of 和 for…in<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">  &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 或者 --&gt;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>解析</strong>：</p><blockquote><p>for…of 是es6中的一种遍历数组方式，for…in 大多数是遍历对象；在循环遍历中异步操作效果同for循环。</p></blockquote><hr><h3 id="特殊遍历方式"><a href="#特殊遍历方式" class="headerlink" title="特殊遍历方式"></a>特殊遍历方式</h3><ul><li>forEach、map、filter</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- forEach遍历 --&gt;</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- map遍历 --&gt;</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].map(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [undefined, undefined, undefined]  -- 每次遍历都返回</span></span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br><span class="line"></span><br><span class="line">&lt;!-- filter遍历 --&gt;</span><br><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>].filter(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">  &#125;, <span class="number">10</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// []  -- 每次遍历为真时返回</span></span><br><span class="line"><span class="comment">// i 0</span></span><br><span class="line"><span class="comment">// i 1</span></span><br><span class="line"><span class="comment">// i 2</span></span><br></pre></td></tr></table></figure><p><strong>解析</strong>：</p><blockquote><p>这三个特殊遍历方式, 变量i的作用类似于let i。每次循环都有自己作用域，所以能够输出正确的索引。</p></blockquote>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Version</title>
      <link href="/2018/04/17/version/"/>
      <url>/2018/04/17/version/</url>
      <content type="html"><![CDATA[<h3 id="v0-0-3"><a href="#v0-0-3" class="headerlink" title="v0.0.3"></a>v0.0.3</h3><p>2018-04-17</p><h3 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h3><ol><li>支持图片优雅弹框 fancybox</li><li>增加文章 <a href="/2018/04/17/version/">Version</a></li><li>支持百度搜索，已添加站点收录</li></ol><h3 id="Bugfixes"><a href="#Bugfixes" class="headerlink" title="Bugfixes"></a>Bugfixes</h3><ul><li>修复外部图片403错误</li></ul><h3 id="Backers"><a href="#Backers" class="headerlink" title="Backers"></a>Backers</h3><p>Bob</p><hr><h3 id="v0-0-2"><a href="#v0-0-2" class="headerlink" title="v0.0.2"></a>v0.0.2</h3><p>2018-04-13</p><h3 id="Features-1"><a href="#Features-1" class="headerlink" title="Features"></a>Features</h3><ol><li>增加Bob文章1篇</li><li>增加emfant文章1篇 </li><li>增加little文章1篇</li><li>增加评论功能 valine</li><li>增加站内搜索 self_search</li><li>阅读数 busuanzi</li><li>增加后台统计 baidu_analytics</li><li>增加网站图标 favicon.icon</li></ol><h3 id="Bugfixes-1"><a href="#Bugfixes-1" class="headerlink" title="Bugfixes"></a>Bugfixes</h3><ul><li>暂时移除about, rss链接</li><li>支持简体中文</li></ul><h3 id="Backers-1"><a href="#Backers-1" class="headerlink" title="Backers"></a>Backers</h3><p>Bob<br>Emfan<br>Little<br>感谢 sandy 同学提出增加评论、阅读数等功能。</p><hr><h3 id="v0-0-1"><a href="#v0-0-1" class="headerlink" title="v0.0.1"></a>v0.0.1</h3><p>2018-04-06</p><h3 id="Features-2"><a href="#Features-2" class="headerlink" title="Features"></a>Features</h3><ol><li>部署ESOP团队博客 WeShare 第一版, 域名: <a href="http://blog.bobgao.cn">blog.bobgao.cn</a></li><li>选用 maupassant 主题</li><li>增加Bob文章2篇</li><li>支持文章一键分享</li></ol><h3 id="Backers-2"><a href="#Backers-2" class="headerlink" title="Backers"></a>Backers</h3><p>Bob</p><h3 id="Core-Team"><a href="#Core-Team" class="headerlink" title="Core Team"></a>Core Team</h3><p>Bob<br>Emfan<br>Little<br>Evel<br>Ring<br>Sandy</p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>How to use Hexo.</title>
      <link href="/2018/04/02/hello-world/"/>
      <url>/2018/04/02/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack优化实战</title>
      <link href="/2018/03/29/webpack%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/"/>
      <url>/2018/03/29/webpack%E4%BC%98%E5%8C%96%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着项目的推移， 第三库使用数量增加，业务代码更是成倍增加，不知不觉发现webpack构建速度却越来越慢，从当初的30s，变成5分钟以上。 与此同时，一个同学的项目也遇到了打包慢的问题。 于是下定决心，花两周潜心研究下如何提升webpack构建性能。</p><h2 id="初步成果"><a href="#初步成果" class="headerlink" title="初步成果"></a>初步成果</h2><p>两周后，收获满满的。初步战果如下：<br>（1） 自己的项目： vue2(全家桶)+element-ui+axios+echarts+lodash+…  约120个页面<br> dev：从90s+ 优化到  41s<br> product: 从9分钟+ 优化到 43s<br>（2） 同学的项目： react + redux + antd + moment+ rc-table + …  约40个页面<br>dev:  从2分钟+ 优化到 12s<br>product: 从9分钟+优化到 13s</p><h2 id="总结优化方法"><a href="#总结优化方法" class="headerlink" title="总结优化方法"></a>总结优化方法</h2><p>首先，优化思路是从webpack构建过程去分析，主要是解析和压缩优化。</p><h4 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h4><p>(1)  <strong>webpack-bundle-analyzer</strong><br>可视化查看打包后的文件，以及文件包含的内容。<br>主要注意两点： </p><ol><li>每个打包后文件的大小，其实业务代码chunk包一般在20k以内。如果大了，就可能是把第三方库打包进去了。</li><li>打包后的文件是否有重复引用的库，应该提出来。<br><strong>举个栗子</strong>：<br><em>优化前</em><br><img src="/img/webpack_before.png" alt="优化前打包文件"><br>从图中我们发现，打包后的文件中， 很多包含了node_modulles/echarts, zrender两个库。 此时，我们就可以用DllPlugin插件，把这两个第三方库提出来， 减少单个业务代码页面打包后的文件大小， 避免重复编译。</li></ol><p><em>优化后</em><br><img src="/img/webpack_after.png" alt="优化后打包文件"><br>提取第三方库后，我们发现页面小了很多。 这时候又发现很多个文件都包含了公共代码src/utils/_serivce.js , 这种公共的业务代码也是常见的问题， 通常有以下几种办法</p><ul><li>按需加载  import { a } from xxx, 每个页面只引用需要的。需要配合export使用，修改源文件导出方式。</li><li>公用方法挂载到根实例, 如vue中， Vue.prototype._utils = _utils 。 也需要修改源文件，且不宜过大。</li><li>Tree Shaking  打包后，抖落掉不需要的代码， 不用修改源码。</li></ul><p>（2）<strong>webpack  - -profile</strong><br>可以查看打包过程中，每个步骤的速度。如果某个步骤卡了很长时间，就把对应关键字放到github上搜索， 可以发现一些很好的解决方法。<br>其中，同学的那个项目，打包过程中卡住在91% additional asset processing， 而且卡住了几分钟。 后来在github的webpack项目的issue中找到解决办法， 升级webpack版本至2.7, 以及把extract-text-webpack-plugin库升级至2.1.2。 居然一下快了几分钟~</p><hr><p>另外， 把优化方法分成通用，开发，生产三类。<br>优先级从高到低，如下：</p><h4 id="通用优化"><a href="#通用优化" class="headerlink" title="通用优化"></a>通用优化</h4><ol><li><p><strong>使用 DllPlugin</strong><br>原理是把第三方库文件分离出来单独编译，并且缓存; 极大的减少业务页面的编译时间， 以及编译后的文件大小。<br>优化时间： 3分钟+<br>详细：<br><a href="https://webpack.js.org/plugins/dll-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/dll-plugin/</a> （官网）<br><a href="https://www.cnblogs.com/ghost-xyx/p/6472578.html" target="_blank" rel="noopener">https://www.cnblogs.com/ghost-xyx/p/6472578.html</a></p></li><li><p><strong>升级webpack和node</strong><br>(1) webpack最新版本为v4+， 官方称对比v3, 性能提升了60%。这次优化时，还是用v2.7， 因为升级v4失败了。<br>优化时间：待实践。<br>详细: <a href="https://blog.csdn.net/qq_26733915/article/details/79446460" target="_blank" rel="noopener">https://blog.csdn.net/…</a><br>(2) 升级node， node目前稳定版本为v8.9.4。保持最新版本能够保证编译性能，npm保持最新也能建立更高效的模块树以及提高解析速度。<br>优化时间：30s+<br>详细：<a href="https://www.cnblogs.com/xinjie-just/p/7061619.html" target="_blank" rel="noopener">www.cnblogs.com/xinjie</a></p></li><li><p><strong>多线程解析</strong><br>(1) happypack, 多线程解析文件，如babel-loader等耗时较长的。<br>还可以配合cache-loader使用。<br>优化时间： 15s左右<br>详细： <a href="https://github.com/amireh/happypack" target="_blank" rel="noopener">https://github.com/amireh/happypack</a><br>要求： webpack 2+<br>(2) thread-loader: 还没实践过，原理也是多线程解析。<br>优化时间： 待实践<br>详细： <a href="https://webpack.js.org/loaders/thread-loader/" target="_blank" rel="noopener">https://webpack.js.org/loaders/thread-loader/</a></p></li><li><p><strong>缓存</strong><br>cache-loader<br>优化时间： 约5s<br>详细： <a href="https://webpack.js.org/loaders/cache-loader/" target="_blank" rel="noopener">https://webpack.js.org/loaders/cache-loader/</a></p></li><li><p><strong>提取公共代码</strong><br>CommonsChunkPlugin<br>这次实践中使用了CommonsChunkPlugin，并没有什么明显效果， 然后就换成了DllPlugin。<br>也许，这两个项目都是单页应用，多页应用可能效果比较好。还是个疑惑的地方~<br>优化时间： 待实践<br>详细： <a href="https://webpack.js.org/plugins/commons-chunk-plugin/" target="_blank" rel="noopener">https://webpack.js.org/plugins/commons-chunk-plugin/</a></p></li><li><p><strong>其它</strong><br>（1） loaders应尽可能配置解析路径include参数，排除路径exclude参数， 减少解析时查询范围。<br>（2） Tree Shaking. 按需加载思想差不多，去掉多余的代码。<br>优化时间： 待实践。<br>详细： <a href="https://webpack.js.org/guides/tree-shaking/" target="_blank" rel="noopener">https://webpack.js.org/guides/tree-shaking/</a><br>（3） 第三库的选择， 尽量少用，或用精简的库替代；一些工具函数，最好用原生替代。</p></li></ol><h4 id="开发环境优化"><a href="#开发环境优化" class="headerlink" title="开发环境优化"></a>开发环境优化</h4><ol><li>在内存中编译 webpack-dev-middleware等</li><li>devtool 设置成cheap-module-eval-source-map， 已经能满足调试需求， 编译能更快。<br>优化时间： 10s 左右</li></ol><h4 id="生产环境优化"><a href="#生产环境优化" class="headerlink" title="生产环境优化"></a>生产环境优化</h4><ol><li><strong>多线程压缩</strong><br>库： webpack-parallel-uglify-plugin<br>顾名思义， 多线程压缩，配合缓存大大减少了压缩时间，替代了自带的UglifyJsPlugin<br>优化时间： 40s+<br>详细： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 多线程压缩插件</span><br><span class="line">const ParallelUglifyPlugin = require(&apos;webpack-parallel-uglify-plugin&apos;);</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">    new ParallelUglifyPlugin(&#123;</span><br><span class="line">      cacheDir: &apos;.cache/&apos;,</span><br><span class="line">      uglifyJS:&#123;</span><br><span class="line">        output: &#123;</span><br><span class="line">          comments: false</span><br><span class="line">        &#125;,</span><br><span class="line">        compress: &#123;</span><br><span class="line">          dead_code: true,</span><br><span class="line">          warnings: false,</span><br><span class="line">          drop_debugger: true,</span><br><span class="line">          drop_console: true</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceMap: false</span><br><span class="line">    &#125;)</span><br><span class="line">   ]</span><br></pre></td></tr></table></figure></li></ol><p>2.<strong>多线程编译</strong><br>库： parallel-webpack<br>优化时间： 待实践<br>详细： <a href="https://github.com/trivago/parallel-webpack" target="_blank" rel="noopener">https://github.com/trivago/parallel-webpack</a></p><p>3.<strong>去掉source-map</strong><br>大多数情况，生产环境不需要详细源码。<br>优化时间： 10s+</p><h2 id="分享优化过程"><a href="#分享优化过程" class="headerlink" title="分享优化过程"></a>分享优化过程</h2><p>解决问题的思路有时候更重要</p><ol><li>很多技术官网是解决问题最快的方式， 如webpack构建优化<a href="https://webpack.js.org/guides/build-performance/" target="_blank" rel="noopener">官网文章</a></li><li>针对大部分第三方库的疑难杂症，在github上对应该库的issue，是最快解决问题的地方</li><li>一时没有找到解决办法， 休息一下，下次也许就会有不一样的理解。</li></ol><h2 id="立个flag"><a href="#立个flag" class="headerlink" title="立个flag"></a>立个flag</h2><ul><li>尽快完成待实践的技术部分，出下一篇优化文章。</li><li>研究优化首页加载。</li></ul><hr><ul><li>Date :   2018-04-03</li><li>Author : Bob</li></ul>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>AngularJS directive详解</title>
      <link href="/2018/03/28/AngularJs%20directive%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/03/28/AngularJs%20directive%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p>最近，维护一个Angular 1项目，在用过vue中element-ui后， 想自己也写一些类似组件；同时对比下angular的指令，与vue的单文件组件的用法。<br>今天的主题就是编写一个消息框 messageBox.<br><a id="more"></a></p><p><img src="/img/angular_msgbox.png" alt="消息框"></p><h2 id="如何开始构思组件"><a href="#如何开始构思组件" class="headerlink" title="如何开始构思组件"></a>如何开始构思组件</h2><p>(1) 组件的结构（html）</p><p>分析消息框组件的结构，首先想到的是，头部（标题+关闭按钮）， 主体（提示内容），底部（取消，确认按钮）;<br>后来考虑到遮罩问题， 所以还需要增加一个遮罩层。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmp-message-box-wrap"</span> <span class="attr">ng-show</span>=<span class="string">"isShow"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"cmp-message-box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"mb-title"</span> <span class="attr">ng-bind</span>=<span class="string">"mbtitle"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mb-close-icon"</span> <span class="attr">ng-click</span>=<span class="string">"closeClick()"</span>&gt;</span>&amp;#8855<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-content"</span> <span class="attr">ng-bind</span>=<span class="string">"mbcontent"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-btn-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mb-cancel"</span> <span class="attr">ng-bind</span>=<span class="string">"cancelBtnText"</span> <span class="attr">ng-click</span>=<span class="string">"cancelClick()"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"mb-confirm"</span> <span class="attr">ng-bind</span>=<span class="string">"confirmBtnText"</span> <span class="attr">ng-click</span>=<span class="string">"confirmClick()"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mb-mask"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>(2) 组件的样式</p><p>可能遇到难点，遮罩样式层级问题。整个外层是fixed，层级最低； 遮罩也是fixed， 层级高一点；消息框居中，层级最高。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* MessageBox 消息框 */</span></span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> &#123;<span class="attribute">position</span>: fixed; <span class="attribute">top</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">z-index</span>: <span class="number">9997</span>; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">text-align</span>: center; <span class="attribute">overflow</span>: hidden; <span class="attribute">font-weight</span>: normal; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.mb-mask</span>&#123; <span class="attribute">position</span>: fixed; <span class="attribute">z-index</span>: <span class="number">9998</span>; <span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>; <span class="attribute">opacity</span>: <span class="number">0.7</span>; <span class="attribute">background-color</span>: <span class="number">#303133</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span>&#123; <span class="attribute">position</span>: fixed; <span class="attribute">z-index</span>: <span class="number">9999</span>; <span class="attribute">width</span>: <span class="number">420px</span>; <span class="attribute">top</span>: <span class="number">40%</span>; <span class="attribute">background-color</span>: <span class="number">#fff</span>; <span class="attribute">display</span>: inline-block; <span class="attribute">margin-left</span>: -<span class="number">210px</span>; <span class="attribute">text-align</span>: left; <span class="attribute">border-radius</span>: <span class="number">4px</span>; <span class="attribute">padding</span>: <span class="number">15px</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">color</span>: <span class="number">#303133</span>; <span class="attribute">position</span>: relative; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span> <span class="selector-class">.mb-close-title</span>&#123; <span class="attribute">font-size</span>: <span class="number">18px</span>; <span class="attribute">color</span>: <span class="number">#303133</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span> <span class="selector-class">.mb-close-icon</span>&#123; <span class="attribute">position</span>: absolute; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">top</span>: -<span class="number">1px</span>; <span class="attribute">color</span>: <span class="number">#abadb2</span>; <span class="attribute">cursor</span>: pointer;&#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-tag">header</span> <span class="selector-class">.mb-close-icon</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">color</span>: <span class="number">#909399</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-content</span>&#123; <span class="attribute">margin-top</span>: <span class="number">15px</span>; <span class="attribute">color</span>: <span class="number">#606266</span>; <span class="attribute">font-size</span>: <span class="number">14px</span>; <span class="attribute">line-height</span>: <span class="number">24px</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span>&#123; <span class="attribute">margin-top</span>: <span class="number">15px</span>; <span class="attribute">color</span>: <span class="number">#606266</span>; <span class="attribute">text-align</span>: right; <span class="attribute">user-select</span>: none; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-tag">span</span>&#123; <span class="attribute">padding</span>: <span class="number">9px</span> <span class="number">15px</span>; <span class="attribute">font-size</span>: <span class="number">12px</span>; <span class="attribute">border-radius</span>: <span class="number">3px</span>; <span class="attribute">cursor</span>: pointer; <span class="attribute">text-align</span>: center; <span class="attribute">color</span>: <span class="number">#606266</span>; <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dcdfe6</span>; <span class="attribute">display</span>: inline-block; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-cancel</span>&#123; <span class="attribute">margin-right</span>: <span class="number">10px</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-cancel</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background</span>: <span class="number">#e9e9e9</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-cancel</span><span class="selector-pseudo">:active</span>&#123; <span class="attribute">background</span>: <span class="number">#d6d3d3</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-confirm</span>&#123; <span class="attribute">background</span>: <span class="number">#7a7777</span>; <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-confirm</span><span class="selector-pseudo">:hover</span>&#123; <span class="attribute">background</span>: <span class="number">#8f8c8c</span>; &#125;</span><br><span class="line"><span class="selector-class">.cmp-message-box-wrap</span> <span class="selector-class">.cmp-message-box</span> <span class="selector-class">.mb-btn-wrap</span> <span class="selector-class">.mb-confirm</span><span class="selector-pseudo">:active</span>&#123; <span class="attribute">background</span>: <span class="number">#6b6868</span>; &#125;</span><br></pre></td></tr></table></figure><p>(3) 组件的功能</p><p>组件功能包括</p><ol><li>取消，关闭按钮， 消息框消失；</li><li>确认按钮，执行一件待定事情后， 消息框消失;</li><li>点击遮罩层，可以配置是否消失消息框</li></ol><p>(4) 逻辑编码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">.directive(<span class="string">'messageBox'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 声明形式</span></span><br><span class="line">        restrict: <span class="string">'AE'</span>,</span><br><span class="line">        <span class="comment">// 参数传递</span></span><br><span class="line">        scope: &#123;</span><br><span class="line">            <span class="comment">// 标题</span></span><br><span class="line">            mbtitle: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 内容</span></span><br><span class="line">            mbcontent: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 取消按钮文字</span></span><br><span class="line">            cancelBtnText: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 确认按钮文字</span></span><br><span class="line">            confirmBtnText: <span class="string">'@'</span>,</span><br><span class="line">            <span class="comment">// 是否显示消息框</span></span><br><span class="line">            isShow: <span class="string">'='</span>,</span><br><span class="line">            <span class="comment">// 关闭回调</span></span><br><span class="line">            close: <span class="string">'&amp;'</span>,</span><br><span class="line">            <span class="comment">// 取消回调</span></span><br><span class="line">            cancel: <span class="string">'&amp;'</span>,</span><br><span class="line">            <span class="comment">// 确认回调</span></span><br><span class="line">            confirm: <span class="string">'&amp;'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 嵌入</span></span><br><span class="line">        transclude: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 模板</span></span><br><span class="line">        templateUrl:<span class="string">'/templates/messageBox.html'</span>,</span><br><span class="line">        <span class="comment">// 是否替换原有元素</span></span><br><span class="line">        replace: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 指令优先级</span></span><br><span class="line">        priority: <span class="number">100</span>,</span><br><span class="line">        <span class="comment">// 指令优先级终止</span></span><br><span class="line">        terminal: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// 编译前执行，外部交互的api，指令间复用，数据初始化</span></span><br><span class="line">        controller: <span class="function"><span class="keyword">function</span>(<span class="params">$scope, $element, $attrs, $transclude</span>) </span>&#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 引用</span></span><br><span class="line">        <span class="built_in">require</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="comment">// 作用域与dom进行链接</span></span><br><span class="line">        link: <span class="function"><span class="keyword">function</span> (<span class="params">$scope, ele, attr</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 点击关闭</span></span><br><span class="line">            $scope.closeClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $scope.close();</span><br><span class="line">                $scope.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 点击取消</span></span><br><span class="line">            $scope.cancelClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $scope.cancel();</span><br><span class="line">                $scope.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 点击确认</span></span><br><span class="line">            $scope.confirmClick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $scope.confirm();</span><br><span class="line">                $scope.isShow = <span class="literal">false</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="消息框注册成全局"><a href="#消息框注册成全局" class="headerlink" title="消息框注册成全局"></a>消息框注册成全局</h2><p>Vue 中可以引入element-ui中的消息框， 然后挂载在vue的根实例上；<br>Angular 1中可以挂载到根作用域上$rootScope，html放在index.html中， 在.run()方法中初始化；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">.run(<span class="function"><span class="keyword">function</span> (<span class="params">$rootScope</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 初始化全局变量 */</span></span><br><span class="line">    <span class="comment">// 消息框</span></span><br><span class="line">    $rootScope.$messageBoxData = &#123;&#125;;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbTitle 标题</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbContent 内容</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbCancelBtnText 取消按钮文字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; mbConfirmBtnText 确认按钮文字</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; closeCb 关闭图标事件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; cancelCb 取消按钮事件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; confirmCb 确认按钮事件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    $rootScope.$messageBox = <span class="function"><span class="keyword">function</span> (<span class="params">mbTitle, mbContent, mbCancelBtnText, mbConfirmBtnText, closeCb, cancelCb, confirmCb</span>) </span>&#123;</span><br><span class="line">        $rootScope.$messageBoxData.isMessageBoxShow = <span class="literal">true</span>;</span><br><span class="line">        $rootScope.$messageBoxData.mbTitle = mbTitle;</span><br><span class="line">        $rootScope.$messageBoxData.mbContent = mbContent;</span><br><span class="line">        $rootScope.$messageBoxData.mbCancelBtnText = mbCancelBtnText;</span><br><span class="line">        $rootScope.$messageBoxData.mbConfirmBtnText = mbConfirmBtnText;</span><br><span class="line">        $rootScope.$messageBoxData.closeCb = closeCb;</span><br><span class="line">        $rootScope.$messageBoxData.cancelCb = cancelCb;</span><br><span class="line">        $rootScope.$messageBoxData.confirmCb = confirmCb;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在任何controller中简单调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 删除对话框</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showDelDialog</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $rootScope.$messageBox(<span class="string">'删除'</span>, <span class="string">'确定删除吗？'</span>, <span class="string">'取消'</span>, <span class="string">'确定'</span>, <span class="literal">null</span>, <span class="literal">null</span>, delConfirm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Angular-指令学习"><a href="#Angular-指令学习" class="headerlink" title="Angular 指令学习"></a>Angular 指令学习</h2><p>参考：</p><p><a href="https://segmentfault.com/a/1190000005851663" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005851663</a></p><p><a href="https://www.cnblogs.com/ermu-learn/p/5913760.html" target="_blank" rel="noopener">https://www.cnblogs.com/ermu-learn/p/5913760.html</a></p><hr><p><em>Bob</em></p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>canvas 的使用</title>
      <link href="/2018/01/29/canvas/"/>
      <url>/2018/01/29/canvas/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Canvas<br>获取绘图上下文<br>var gd = oC.getContext(‘2d’);</p><p>重新开始路径<br>gd.beginPath();</p><p>开始<br>gd.moveTo(x,y)<br>结束<br>gd.lineTo(x,y)</p><p>闭合路径<br>gd.closePath();</p><p>描边<br>gd.stroke()</p><p>描边颜色<br>gd.strokeStyle</p><p>线宽<br>gd.lineWidth</p><p>填充<br>gd.fill()</p><p>填充颜色<br>gd.fillStyle</p><p>清屏<br>gd.clearRect(x,y,w,h);</p><p>画矩形<br>    a)<br>        gd.rect(x,y,w,h);<br>        stroke()/fill()<br>    b)<br>        gd.fillRect(x,y,w,h)<br>    c)<br>        gd.strokeRect(x,y,w,h)</p><p>运动<br>先清屏，再画图</p><p>画弧<br>    gd.arc(cx,cy,r,s,e,b);<br>        cx,cy         圆心坐标<br>        r             半径<br>        s             开始弧度<br>        e             结束弧度<br>        b             是否逆时针<br>    gd.stroke()/fill();</p><p>饼图<br>    先求和<br>    求出每个数字的比例<br>    通过比例求出角度</p><p>改变线条端点样式<br>    gd.lineCap = round             圆<br>    gd.lineCap = butt             平</p><p>文字<br>    gd.font = ‘大小 字体类型’;<br>        必须一起设置，否则不生效<br>    gd.textAlign            水平对齐方式<br>    gd.textBaseline         基线对齐方式<br>        middle        中间对齐<br>    gd.fillText(str,x,y);         填充文字<br>    gd.strokeText(str,x,y);     描边文字<br>            位置是<br>                x         左侧<br>                y         基线</p><p>事件<br>    1.算位置<br>    2.gd.isPointInPath(pageX,pageY)<br>        总结：<br>            gd.isPointInPath只能给最后一个图形加</p><p>拖拽</p><p>渐变<br>    创建线性渐变<br>    var lg = gd.createLinearGradient(x1,y1,x2,y2);<br>    设置颜色<br>    lg.addColorStop(系数,颜色);</p><p>变形<br>    旋转         rotate<br>    平移         translate<br>    缩放         scale</p><pre><code>旋转    gd.rotate(弧度);平移    gd.translate(x,y);缩放    gd.scale(x,y);    画布左上角是原心,原心是不可以改变的。    操作的是整个画布    变形会叠加    操作完，画图，画完图之后，把画布还原回去还原画布    gd.save();             保存画布当前状态    gd.restore();         还原回保存的状态    如果要用变形        1.gd.save();    保存        2.操作        3.画图        4.gd.restore();    还原矩形左上角旋转    先保存    把画布偏移到左上角位置    旋转    画图     要画在0,0的位置    还原矩形中心旋转</code></pre><p>设置图片背景<br>    gd.createPattern(oImg,’平铺方式’);<br>                            no-repeat<br>                            repeat-x<br>                            repeat-y<br>                            repeat<br>    背景是从画布左上角走的</p><pre><code>导出图片    oC.toDataURL([mime-type]);    可以指定图片类型    oC.toDataURL(&apos;image/png&apos;);    oC.toDataURL(&apos;image/jpeg&apos;);</code></pre><p>引入图片<br>    gd.drawImage(oImg,dx,dy);</p><pre><code>gd.drawImage(    oImg,    dx,dy,[dw],[dh]);gd.drawImage(    oImg,    [sx],[sy],[sw],[sh],    dx,dy,[dw],[dh]);</code></pre><p>总结：<br>    canvas一切操作都在画图之前</p><p>像素级操作<br>    比较耗费性能，必须配合服务器环境<br>    var result = gd.getImageData(x,y,w,h);<br>    var d = result.data;<br>    d所有像素点<br>        四个为一组     r,g,b,a,r,g,b,a…</p><pre><code>操作完成，要还回去gd.putImageData(result,x,y);</code></pre><p>效果<br>    复古效果：<br>        d[i]=(r<em>0.393)+(g</em>0.769)+(b<em>0.189);     // red<br>        d[i+1]=(r</em>0.349)+(g<em>0.686)+(b</em>0.168);     // green<br>        d[i+2]=(r<em>0.272)+(g</em>0.534)+(b*0.131);     // blue<br>    红色蒙版效果：<br>        d[i]=(r+g+b)/3;        // 红色通道取平均值<br>        d[i+1]=d[i+2]=0;          // 绿色通道和蓝色通道都设为0</p><pre><code>图片曝光(高亮效果)：    d[i]+=200;    d[i+1]+=200;    d[i+2]+=200;颜色反转：    d[i]=255-d[i];    d[i+1]=255-d[i+1];    d[i+2]=255-d[i+2];    </code></pre><p>计算机图形学<br>像素级操作非常耗费性能，尽量少用。</p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        *&#123;</span></span><br><span class="line"><span class="undefined">            margin: 0;</span></span><br><span class="line"><span class="undefined">            padding: 0;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        html,body&#123;</span></span><br><span class="line"><span class="undefined">            height: 100%;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        body&#123;</span></span><br><span class="line"><span class="undefined">            overflow: hidden;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        canvas&#123;</span></span><br><span class="line"><span class="undefined">            background:#000;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">rnd</span>(<span class="params">n,m</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(m-n)+n);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> oC=<span class="built_in">document</span>.querySelector(<span class="string">'canvas'</span>);</span></span><br><span class="line"><span class="javascript">            oC.width=<span class="built_in">document</span>.documentElement.clientWidth;</span></span><br><span class="line"><span class="javascript">            oC.height=<span class="built_in">document</span>.documentElement.clientHeight;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> gd=oC.getContext(<span class="string">'2d'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> N=<span class="number">5</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> Len=<span class="number">40</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aPoint=[];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> aOldPoint=[];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;N;i++)&#123;</span></span><br><span class="line"><span class="undefined">                aPoint[i]=&#123;</span></span><br><span class="line"><span class="undefined">                    x:rnd(0,oC.width),</span></span><br><span class="line"><span class="undefined">                    y:rnd(0,oC.height),</span></span><br><span class="line"><span class="undefined">                    iSpeedX:rnd(-10,10),</span></span><br><span class="line"><span class="undefined">                    iSpeedY:rnd(-10,10)</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">                gd.clearRect(0,0,oC.width,oC.height);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(aPoint[i].x&lt;<span class="number">0</span>||aPoint[i].x&gt;=<span class="built_in">document</span>.documentElement.clientWidth<span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        aPoint[i].iSpeedX*=-1;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(aPoint[i].y&lt;<span class="number">0</span>||aPoint[i].y&gt;=<span class="built_in">document</span>.documentElement.clientHeight<span class="number">-1</span>)&#123;</span></span><br><span class="line"><span class="undefined">                        aPoint[i].iSpeedY*=-1;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    aPoint[i].x+=aPoint[i].iSpeedX;</span></span><br><span class="line"><span class="undefined">                    aPoint[i].y+=aPoint[i].iSpeedY;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">                    createPoint(aPoint[i]);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                gd.beginPath();<span class="comment">//一组矩形连接</span></span></span><br><span class="line"><span class="undefined">                gd.moveTo(aPoint[0].x,aPoint[0].y);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">                    gd.lineTo(aPoint[i].x,aPoint[i].y);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                gd.closePath();</span></span><br><span class="line"><span class="javascript">                gd.strokeStyle=<span class="string">'rgb(225,225,225)'</span>;</span></span><br><span class="line"><span class="undefined">                gd.stroke();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> arr=[];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aPoint.length;i++)&#123;</span></span><br><span class="line"><span class="undefined">                    arr[i]=&#123;</span></span><br><span class="line"><span class="undefined">                        x:aPoint[i].x,</span></span><br><span class="line"><span class="undefined">                        y:aPoint[i].y,</span></span><br><span class="line"><span class="undefined">                        iSpeedX:aPoint[i].iSpeedX,</span></span><br><span class="line"><span class="undefined">                        iSpeedY:aPoint[i].iSpeedY</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">                aOldPoint.push(arr);</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(aOldPoint.length&gt;Len)&#123;</span></span><br><span class="line"><span class="undefined">                    aOldPoint.shift();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;aOldPoint.length;i++)&#123;<span class="comment">//多组矩形连接</span></span></span><br><span class="line"><span class="undefined">                    gd.beginPath();</span></span><br><span class="line"><span class="undefined">                    gd.moveTo(aOldPoint[i][0].x,aOldPoint[i][0].y);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>;j&lt;aOldPoint[i].length;j++)&#123;</span></span><br><span class="line"><span class="undefined">                        gd.lineTo(aOldPoint[i][j].x,aOldPoint[i][j].y);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    gd.closePath();</span></span><br><span class="line"><span class="javascript">                    gd.strokeStyle=<span class="string">'rgba(225,225,225,'</span>+i/Len+<span class="string">')'</span>;</span></span><br><span class="line"><span class="undefined">                    gd.stroke();</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;,30);</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">createPoint</span>(<span class="params">point</span>)</span>&#123;<span class="comment">//创建矩形</span></span></span><br><span class="line"><span class="undefined">                gd.beginPath();</span></span><br><span class="line"><span class="undefined">                gd.rect(point.x,point.y,1,1);</span></span><br><span class="line"><span class="javascript">                gd.fillStyle=<span class="string">'#fff'</span>;</span></span><br><span class="line"><span class="undefined">                gd.fill();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Emfan </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flex</title>
      <link href="/2017/10/12/Flex/"/>
      <url>/2017/10/12/Flex/</url>
      <content type="html"><![CDATA[<p><strong>目前常见的布局方式有固定布局，流动布局，css3增加了弹性布局。</strong></p><p>所谓固定布局，就是网站的内容宽度是一定的，即容器的宽度是固定的，容器内的块宽度是像素</p><p>或者百分百，无论怎样缩放网页，容器的宽度始终不变。</p><p>所谓流动布局，也叫流体布局，即容器的宽度一般设为百分百的形式，根据屏幕的分辨率网页适应</p><p>不同的宽度。</p><a id="more"></a><p>以前网站设计大多采用这两种，但随着移动端的发展，各种各样的屏幕分辨率需要适应时，这两种</p><p>布局也出现了明显的缺点，首先，固定布局若屏幕宽度小于容器宽度时，会出现滚动条，甚至直接</p><p>无法展示，而流动布局若在屏幕分辨率很小时，会给用户很不好的体验，因此，弹性布局应运而生。</p><h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><p>所谓弹性布局，即可根据屏幕大小调节容器大小，开发者无需固定容器内块的宽度，只需声明其布局</p><p>行为，比如，横向排列，纵向排列，元素间隔，对齐方式，空间分配等。</p><p>例1：</p><p><img src="./flexbox.png" alt=""></p><p>上面是一个导航菜单，有三个选项，若此时产品经理要求我们去除第二个选项，只保留另外两个，我们</p><p>分别从三种布局分析：</p><h4 id="固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。"><a href="#固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。" class="headerlink" title="固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。"></a>固定布局：宽度固定，去除第二个，总宽度也得跟着改变，影响页面布局。</h4><h4 id="流动布局：去除第二个，宽度需由原先的33-33-改为50-左右，改动大。"><a href="#流动布局：去除第二个，宽度需由原先的33-33-改为50-左右，改动大。" class="headerlink" title="流动布局：去除第二个，宽度需由原先的33.33%改为50%左右，改动大。"></a>流动布局：去除第二个，宽度需由原先的33.33%改为50%左右，改动大。</h4><p>以上两种布局，改动HTML的同时，还得改动css，麻烦，让我们看看弹性布局的写法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;flexbox&quot;&gt; </span><br><span class="line">    &lt;div&gt;游戏列表&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;个人中心&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;申请服务&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">.flexbox &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    margin-top: 100px;</span><br><span class="line">    border: 1px solid red;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">    align-items: center;</span><br><span class="line">    display: flex;</span><br><span class="line">&#125;</span><br><span class="line">.flexbox div &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">    text-align: center;</span><br><span class="line">    border-right: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">.flexbox &gt; div:last-child &#123;</span><br><span class="line">border-right: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在flex布局中，我们可以为子元素指定flex: 1定义所占空间大小，若子元素为3，则分成3份，若去除第二个选项，</p><p>则另外两个各占1/2，使用方便。</p><p><img src="./flexbox2.png" alt=""></p><h2 id="语法"><a href="#语法" class="headerlink" title="语法:"></a><strong>语法:</strong></h2><font color="red">采用Flex布局的元素称为Flex容器，以下简称容器。容器内的子元素称为Flex项目，以下简称项目。</font><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.flexbox &#123;</span><br><span class="line">  display：flex;</span><br><span class="line">  display: -weblit-flex;//WebKit内核</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面讲元素设为Flex容器,容器内有水平的主轴和垂直的纵轴。</p><p>另外，Flex容器内的项目的float,vertical-align,clear属性都会失效。</p><h4 id="容器的属性："><a href="#容器的属性：" class="headerlink" title="容器的属性："></a>容器的属性：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 设置主轴方向</span><br><span class="line">flex-direction: row | row-reverse | column | column-reverse;</span><br><span class="line">// 轴线上的项目是否换行</span><br><span class="line">flex-wrap: nowrap | wrap | wrap-reverse;</span><br><span class="line">// 简写flex-direction和flex-wrap</span><br><span class="line">flex-flow: flex-direction || flex-wrap;</span><br><span class="line">// 项目在主轴的对齐方式</span><br><span class="line">justify-content: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">// 项目在纵轴的对齐方式</span><br><span class="line">align-items: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">// 项目在交叉轴的对齐方式</span><br><span class="line">align-content: flex-start | flex-end | center | space-between | space-around | stretch;</span><br></pre></td></tr></table></figure><h4 id="项目的属性："><a href="#项目的属性：" class="headerlink" title="项目的属性："></a>项目的属性：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 项目的排列顺序。数值越小，排列越靠前，默认为0。</span><br><span class="line">order: &lt;integer&gt;;</span><br><span class="line">// 项目的放大比例，默认为0。</span><br><span class="line">flex-grow: &lt;number&gt;;</span><br><span class="line">// 项目的缩小比例，默认为。</span><br><span class="line">flex-shrink: &lt;number&gt;;</span><br><span class="line">// 项目占据的主轴空间。</span><br><span class="line">flex-basis: &lt;length&gt; | auto;</span><br><span class="line">// flex-grow, flex-shrink 和 flex-basis的简写。</span><br><span class="line">flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ];</span><br><span class="line">// 单个项目有与其他项目不一样的对齐方式。</span><br><span class="line">align-self: auto | flex-start | flex-end | center | baseline | stretch;</span><br></pre></td></tr></table></figure><p>经典案例：骰子的实现:</p><p><img src="./dice.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">HTML:</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">&lt;div class=&quot;first-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;second-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;third-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fourth-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;fifth-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;sixth-dice&quot;&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;column&quot;&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;dot&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">CSS:</span><br><span class="line">.content &#123;</span><br><span class="line">display: flex;</span><br><span class="line">width: 800px;</span><br><span class="line">flex-direction: row;</span><br><span class="line">justify-content: space-around;</span><br><span class="line">background-color: #000;</span><br><span class="line">&#125;</span><br><span class="line">[class$=&quot;dice&quot;] &#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line">background-color: #e7e7e7;</span><br><span class="line">border-radius: 10%;</span><br><span class="line">margin: 10px 0;</span><br><span class="line">padding: 3px;</span><br><span class="line">box-shadow:</span><br><span class="line">    inset 0 5px white, </span><br><span class="line">    inset 0 -5px #bbb,</span><br><span class="line">    inset 5px 0 #d7d7d7, </span><br><span class="line">    inset -5px 0 #d7d7d7;</span><br><span class="line">&#125;</span><br><span class="line">.dot &#123;</span><br><span class="line">display: block;</span><br><span class="line">    width: 24px;</span><br><span class="line">    height: 24px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    margin: 4px;</span><br><span class="line">    background-color: #333;</span><br><span class="line">    box-shadow: inset 0 3px #111, inset 0 -3px #555;</span><br><span class="line">&#125;</span><br><span class="line">.first-dice &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br><span class="line">&#125;</span><br><span class="line">.second-dice &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.second-dice .dot:nth-of-type(2) &#123;</span><br><span class="line">align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">.third-dice &#123;</span><br><span class="line">display: flex;;</span><br><span class="line">justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line">.third-dice .dot:nth-of-type(3) &#123;</span><br><span class="line">align-self: flex-end;</span><br><span class="line">&#125;</span><br><span class="line">.third-dice .dot:nth-of-type(2) &#123;</span><br><span class="line">align-self: center;</span><br><span class="line">&#125;</span><br><span class="line">.fourth-dice,.fifth-dice, .sixth-dice &#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.fourth-dice .column, .fifth-dice .column, .sixth-dice .column &#123;</span><br><span class="line">display: flex;</span><br><span class="line">flex-direction: column;</span><br><span class="line">justify-content: space-between;</span><br><span class="line">&#125;</span><br><span class="line">.fifth-dice .column:nth-of-type(2) &#123;</span><br><span class="line">align-self: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>详细用法可查看<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">阮一峰Flex 布局教程</a></p>]]></content>
      
      <categories>
          
          <category> Little </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git命令入门</title>
      <link href="/2017/04/03/git/"/>
      <url>/2017/04/03/git/</url>
      <content type="html"><![CDATA[<h3 id="基础命令介绍"><a href="#基础命令介绍" class="headerlink" title="基础命令介绍"></a>基础命令介绍</h3><ul><li><p>从服务器上拉取代码<br>git clone <a href="https://github.com/comeonbob/weShare.git" target="_blank" rel="noopener">https://github.com/comeonbob/weShare.git</a></p></li><li><p>创建本地分支并且关联远程分支develop<br>git checkout develop</p></li><li><p>更新本地分支develop<br>git pull –ff</p></li></ul><ul><li><p>创建本地分支，并切换到feature<br>git checkout -b feature</p></li><li><p>提交代码<br>git commit -a -m “xxx”</p></li><li><p>切换开发分支拉取最新代码, 并返回feature分支(避免在develop分支上冲突)<br>git checkout develop<br>git pull –ff<br>git checkout feature</p></li><li><p>合并分支 rebase （可能产生冲突）<br>git rebase develop</p></li><li><p>切换至develop分支, 并合并分支<br>git checkout develop<br>git merge –no-ff feature</p></li><li><p>提交代码<br>git push</p></li></ul><hr><h3 id="其他参考学习"><a href="#其他参考学习" class="headerlink" title="其他参考学习"></a>其他参考学习</h3><ul><li><p>配置git, 保存户名、密码等</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) git config --list                    //查看当前git配置</span><br><span class="line">(2) git config credential.helper=store   //配置存储模式</span><br><span class="line">(3) git config user.name=<span class="string">'xxx.xx'</span>        //设置用户名</span><br><span class="line">(4) git config user.email=<span class="string">'xxx.xx'</span>       //设置email</span><br></pre></td></tr></table></figure></li><li><p>分支管理</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) git branch -a                        //查看所有分支</span><br><span class="line">(2) git branch dev                       //创建本地分支</span><br><span class="line">(3) git branch -d dev                    //删除本地分支</span><br><span class="line">(3) git push origin dev                  //创建远程分支</span><br><span class="line">(4) git push origin --delete dev         //删除远程分支</span><br><span class="line">(5) git checkout -b dev origin/dev       //创建并切换本地dev分支，并关联远程dev分支</span><br><span class="line">(6) git branch --<span class="built_in">set</span>-upstream-to=origin dev       //本地分支关联远程dev分支</span><br></pre></td></tr></table></figure></li><li><p>提交分支、冲突解决</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(1) git status                           //查看当前代码状态</span><br><span class="line">(2) git checkout a.js                    //复原a.js文件</span><br><span class="line">(3) git add .                            //添加所有文件</span><br><span class="line">(4) git clean -df                        //清除未添加文件</span><br><span class="line">(5) git commit -a -m <span class="string">"xx"</span>                //提交所有文件</span><br><span class="line">(6) git rebase develop                   //合并develop分支到当前分支</span><br><span class="line">(7) git rebase develop --<span class="built_in">continue</span>        //解决冲突后继续合并</span><br><span class="line">(8) git rebase develop --skip            //跳过冲突</span><br><span class="line">(9) git merge --no-ff feature -m <span class="string">""</span>      //合并feature分支到当前主分支</span><br><span class="line">(10) git pull --ff                       //更新最新代码</span><br><span class="line">(11) git push                            //推送本地代码</span><br><span class="line">(12) git <span class="built_in">clone</span> xxx                       //克隆远程分支到本地</span><br></pre></td></tr></table></figure></li></ul><hr><p><em>Bob</em></p>]]></content>
      
      <categories>
          
          <category> Bob </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端自动化 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
